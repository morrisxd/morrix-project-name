/*  
    VTun - Virtual Tunnel over TCP/IP network.

    Copyright (C) 1998-2000  Maxim Krasnyansky <max_mk@yahoo.com>

    VTun has been derived from VPPP package by Maxim Krasnyansky. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 */

/*
 * $Id: tun_dev.c,v 1.4 2006/12/11 10:45:35 mtbishop Exp $
 */ 
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>

#include <arpa/inet.h>
#include <netinet/ether.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <linux/if.h>

#include "tun_dev.h"
#include "wddi_log.h"
#include "spp_npu_link.h"
#include "spp_wddi_server.h"
#include "np_common.h"
#include "xs_ioctl.h"

#define HAVE_LINUX_IF_TUN_H
#define O_NOFOLLOW     00400000        /* don't follow links */



/* 
 * Allocate TUN device, returns opened fd. 
 * Stores dev name in the first arg(must be large enough).
 */  
static int tun_open_common0(char *dev, int istun)
{
    char tunname[14];
    int i, fd, err;

    if( *dev ) {
       sprintf(tunname, "/dev/%s", dev);
       return open(tunname, O_RDWR);
    }

    sprintf(tunname, "/dev/%s", istun ? "tun" : "tap");
    err = 0;
    for(i=0; i < 255; i++){
       sprintf(tunname + 8, "%d", i);
       /* Open device */
       if( (fd=open(tunname, O_RDWR)) > 0 ) {
          strcpy(dev, tunname + 5);
          return fd;
       }
       else if (errno != ENOENT)
          err = errno;
       else if (i)	/* don't try all 256 devices */
          break;
    }
    if (err)
	errno = err;
    return -1;
}

#ifdef HAVE_LINUX_IF_TUN_H /* New driver support */
#include <linux/if_tun.h>

#ifndef OTUNSETNOCSUM
/* pre 2.4.6 compatibility */
#define OTUNSETNOCSUM  (('T'<< 8) | 200) 
#define OTUNSETDEBUG   (('T'<< 8) | 201) 
#define OTUNSETIFF     (('T'<< 8) | 202) 
#define OTUNSETPERSIST (('T'<< 8) | 203) 
#define OTUNSETOWNER   (('T'<< 8) | 204)
#endif

static int tun_open_common(char *dev, int istun)
{
    struct ifreq ifr;
    int fd;

    if ((fd = open("/dev/net/tun", O_RDWR)) < 0)
       return tun_open_common0(dev, istun);

    memset(&ifr, 0, sizeof(ifr));
    ifr.ifr_flags = (istun ? IFF_TUN : IFF_TAP) | IFF_NO_PI;
    if (*dev)
       strncpy(ifr.ifr_name, dev, IFNAMSIZ);

    if (ioctl(fd, TUNSETIFF, (void *) &ifr) < 0) {
       if (errno == EBADFD) {
	  /* Try old ioctl */
 	  if (ioctl(fd, OTUNSETIFF, (void *) &ifr) < 0) 
	     goto failed;
       } else
          goto failed;
    } 

    strcpy(dev, ifr.ifr_name);
    return fd;

failed:
    close(fd);
    return -1;
}

#else
# define tun_open_common(dev, type) tun_open_common0(dev, type)

#endif /* New driver support */

int tun_open(char *dev) { return tun_open_common(dev, 1); }
int tap_open(char *dev) { return tun_open_common(dev, 0); }

int tun_close(int fd, char *dev) { return close(fd); }
int tap_close(int fd, char *dev) { return close(fd); }

/* Read/write frames from TUN device */
int tun_write(int fd, char *buf, int len) { return write(fd, buf, len); }
int tap_write(int fd, char *buf, int len) { return write(fd, buf, len); }

int tun_read(int fd, char *buf, int len) { return read(fd, buf, len); }
int tap_read(int fd, char *buf, int len) { return read(fd, buf, len); }

int g_tapfd;
int tap_init(void)
{
    int tapfd;
    int tunfd;
    int status;
    char tapName[16]={0};
    char tunName[16]={0};
    char strVlan[25]={0};
    char strIpconf[60]={0};
	char strRouteconf[128]={0};
	STRU_SET_INITAIL_CONFIG *initial_cfg = npu_get_initial_cfg_info();
	if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
	{
		sprintf(strVlan,"vconfig add tap0 %d",initial_cfg->VlanTag);
		sprintf(strIpconf,"ifconfig tap0.%d %d.%d.%d.%d netmask %d.%d.%d.%d up",initial_cfg->VlanTag,
							(u8)(initial_cfg->ifIpaddr>>24),(u8)((initial_cfg->ifIpaddr>>16)&0xFF),(u8)((initial_cfg->ifIpaddr>>8)&0xFF),(u8)((initial_cfg->ifIpaddr)&0xFF),
							(u8)(initial_cfg->ifIpNetMask>>24),(u8)((initial_cfg->ifIpNetMask>>16)&0xFF),(u8)((initial_cfg->ifIpNetMask>>8)&0xFF),(u8)((initial_cfg->ifIpNetMask)&0xFF));
	}
	else
	{
		sprintf(strIpconf,"ifconfig tap0 %d.%d.%d.%d netmask %d.%d.%d.%d up",
							(u8)(initial_cfg->ifIpaddr>>24),(u8)((initial_cfg->ifIpaddr>>16)&0xFF),(u8)((initial_cfg->ifIpaddr>>8)&0xFF),(u8)((initial_cfg->ifIpaddr)&0xFF),
							(u8)(initial_cfg->ifIpNetMask>>24),(u8)((initial_cfg->ifIpNetMask>>16)&0xFF),(u8)((initial_cfg->ifIpNetMask>>8)&0xFF),(u8)((initial_cfg->ifIpNetMask)&0xFF));
	}


   tapfd= tap_open(tapName);
   tunfd= tun_open(tunName);
   WDDI_INFO( "%s\n", tapName);
   WDDI_INFO( "%s\n", tunName);
   
   WDDI_INFO("tun file id: %d\n", tunfd);
   WDDI_INFO("tap file id: %d\n", tapfd);
   if ((status = system("ifconfig tap0 0.0.0.0 up")) < 0)
     WDDI_ERR("system ifconfig up");
  /**********************************************************/ 
/*   if ((status = system("vconfig add tap0 133")) < 0)
   	   WDDI_ERR("system vconfig");
   if ((status = system("ifconfig tap0.133 10.170.33.194 netmask 255.255.255.128 up")) < 0)
	   WDDI_ERR("system ifconfig tap0.133");*/

   //if ((status = system("vconfig add tap0 133")) < 0) 
   if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
   {
	   if ((status = system(strVlan)) < 0)																		
			   WDDI_ERR("system vconfig"); 
   }
   if ((status = system(strIpconf)) < 0)                                  
       WDDI_ERR("system ifconfig");

   /*********************************************************/
   //tap_hwadd_read(initial_cfg->ifMACsrc);
   (void)tap_socket_sethwaddr(initial_cfg->ifMACsrc);	  
   if ((status = system("ifconfig -a")) < 0)
	   WDDI_ERR("system ifconfig -a");
	   
   if ((status = system("ifconfig tun0 0.0.0.0 up")) < 0)
	   WDDI_ERR("system ifconfig tun0");

  
  int i;
  struct in_addr DstIpaddr;
  struct in_addr GwIpaddr;
  struct in_addr Routegwaddr;
  u32 Dstip,Gwip ,RouteMask;
  for(i = 0;i< SPP_MAX_ROUTE_NUM;i++)
  {
	  if(initial_cfg->routeInfo[i].GatewayIP && initial_cfg->routeInfo[i].IpDst)
	  {
		  Gwip = htonl(initial_cfg->routeInfo[i].GatewayIP);
		  Dstip = htonl(initial_cfg->routeInfo[i].IpDst);
		  RouteMask = htonl(initial_cfg->routeInfo[i].mask);
		  memcpy(&DstIpaddr,&Dstip,4);
		  memcpy(&GwIpaddr,&Gwip,4);
		  memcpy(&Routegwaddr,&RouteMask,4);
		  
		  char GwIp[24];
		  sprintf(GwIp,"%s",inet_ntoa(GwIpaddr));

		  char RoutemaskStr[24];
		  sprintf(RoutemaskStr,"%s",inet_ntoa(Routegwaddr));
		  
		  if(0xffffffff == RouteMask)/*host route*/
		  {
		      if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
		      {
				  sprintf(strRouteconf,"route add -host %s gw %s dev tap0.%d",inet_ntoa(DstIpaddr),GwIp,initial_cfg->VlanTag);				
			  }
			  else
			  {
				  sprintf(strRouteconf,"route add -host %s gw %s dev tap0",inet_ntoa(DstIpaddr),GwIp);				
			  }
		  }
		  else /*net route*/
		  {
		      if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
		      {
				  sprintf(strRouteconf,"route add -net %s netmask %s gw %s dev tap0.%d",inet_ntoa(DstIpaddr),RoutemaskStr,GwIp,initial_cfg->VlanTag);			   
			  }
			  else
			  {
				  sprintf(strRouteconf,"route add -net %s netmask %s gw %s dev tap0",inet_ntoa(DstIpaddr),RoutemaskStr,GwIp);			   
			  }
		  }
		  printf("%s\n",strRouteconf);
		   if ((status = system(strRouteconf)) < 0) 																	
			   WDDI_ERR("system route add");
	  }
   }
    g_tapfd = tapfd;
    return tapfd;
}

int tap_interface_reconfig(void)
{
    //int tapfd;
    //int tunfd;
    int status;
    char strVlan[128]={0};
    char strIpconf[128]={0};
	char strRouteconf[128]={0};
	STRU_SET_INITAIL_CONFIG *initial_cfg = npu_get_initial_cfg_info();
	STRU_SET_INITAIL_CONFIG *np_reconfig_ptr = npu_get_np_reconfig();
	//close old interface tap0.*
    sprintf(strVlan,"ifconfig tap0.%d down",initial_cfg->VlanTag);
	printf("%s\n", strVlan);
	if ((status = system(strVlan)) < 0) 																	 
		WDDI_ERR("system ifconfig");
	
	
    sprintf(strVlan,"vconfig add tap0 %d",np_reconfig_ptr->VlanTag);
    sprintf(strIpconf,"ifconfig tap0.%d %d.%d.%d.%d netmask %d.%d.%d.%d up",np_reconfig_ptr->VlanTag,
		                (u8)(np_reconfig_ptr->ifIpaddr>>24),(u8)((np_reconfig_ptr->ifIpaddr>>16)&0xFF),(u8)((np_reconfig_ptr->ifIpaddr>>8)&0xFF),(u8)((np_reconfig_ptr->ifIpaddr)&0xFF),
		                (u8)(np_reconfig_ptr->ifIpNetMask>>24),(u8)((np_reconfig_ptr->ifIpNetMask>>16)&0xFF),(u8)((np_reconfig_ptr->ifIpNetMask>>8)&0xFF),(u8)((np_reconfig_ptr->ifIpNetMask)&0xFF));

   if ((status = system(strVlan)) < 0)                                                                      
           WDDI_ERR("system vconfig"); 
   if ((status = system(strIpconf)) < 0)                                  
       WDDI_ERR("system ifconfig");

   (void)tap_socket_sethwaddr(np_reconfig_ptr->ifMACsrc);	  
   if ((status = system("ifconfig -a")) < 0)
	   WDDI_ERR("system ifconfig -a");
   /*add route add -host 10.138.80.1 gw 10.136.33.66 dev tap0.422*/
   int i;
   struct in_addr DstIpaddr;
   struct in_addr GwIpaddr;
   struct in_addr Routegwaddr;
   u32 Dstip,Gwip ,RouteMask;
   for(i = 0;i< SPP_MAX_ROUTE_NUM;i++)
   {
	   if(initial_cfg->routeInfo[i].GatewayIP && initial_cfg->routeInfo[i].IpDst)
	   {
		   Gwip = htonl(initial_cfg->routeInfo[i].GatewayIP);
		   Dstip = htonl(initial_cfg->routeInfo[i].IpDst);
		   RouteMask = htonl(initial_cfg->routeInfo[i].mask);
		   memcpy(&DstIpaddr,&Dstip,4);
		   memcpy(&GwIpaddr,&Gwip,4);
		   memcpy(&Routegwaddr,&RouteMask,4);
		   
		   char GwIp[24];
		   sprintf(GwIp,"%s",inet_ntoa(GwIpaddr));
   
		   char RoutemaskStr[24];
		   sprintf(RoutemaskStr,"%s",inet_ntoa(Routegwaddr));
		   
		   if(0xffffffff == RouteMask)/*host route*/
		   {
			   sprintf(strRouteconf,"route add -host %s gw %s dev tap0.%d",inet_ntoa(DstIpaddr),GwIp,initial_cfg->VlanTag); 			 
		   }
		   else /*net route*/
		   {
			   sprintf(strRouteconf,"route add -net %s netmask %s gw %s dev tap0.%d",inet_ntoa(DstIpaddr),RoutemaskStr,GwIp,initial_cfg->VlanTag);				
		   }
		   printf("%s\n",strRouteconf);
			if ((status = system(strRouteconf)) < 0)																	 
				WDDI_ERR("system route add");
	   }
	}
    return 0;
}



int     sockfd;   

int tap_socket_open(void)
{
    int status=0;
    int option;
    int reuse =1;
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);   
    if (sockfd < 0) {   
        WDDI_ERR("socket open fail");   
    }   
    /**/
    setsockopt(sockfd,SOL_SOCKET,SO_REUSEADDR,&reuse,sizeof(int));	
    status = fcntl(sockfd, F_SETFL, O_NONBLOCK);
    if (status < 0)
    {
    	WDDI_ERR("socket fcntl fail");
    }

    option = 1;
    status = ioctl(sockfd, FIONBIO, (int *)&option); // turn on non-blocking io
    if (status < 0)
    {
    	WDDI_ERR("socket ioctl fail");
    }

    return sockfd;

}
int tap_socket_getarp(unsigned int ipaddr, char* buf)   
{   
    struct arpreq arpreq={{0}};   
    struct sockaddr_in *sin;   
    struct sockaddr_storage ss;   
    char ifname[10];
    memset(&ss, 0, sizeof(ss));   

    sin = (struct sockaddr_in *) &ss;   
    sin->sin_family = AF_INET;  
    //ipaddr = 0x5a20880a;/*temp used for gateway ipaddr*/
   /* if (inet_pton(AF_INET, argv[1], &(sin->sin_addr)) <= 0) {   
        perror("inet_pton error");   
        return -1;   
    } */
		
	STRU_SET_INITAIL_CONFIG *initial_cfg = npu_get_initial_cfg_info();
#if 0
	/*if ipaddr belongs to same net work*/
    if(htonl(ipaddr)&initial_cfg->ifIpNetMask == initial_cfg->ifIpaddr&initial_cfg->ifIpNetMask)
    {

	}
	else/*to scan getway*/
	{
		u32 i;
		for(i = 0;i< SPP_MAX_ROUTE_NUM;i++)
		{
		
			/*add netmask when route add -net */
			if(htonl(ipaddr) == (initial_cfg->routeInfo[i].IpDst &initial_cfg->routeInfo[i].mask))
			{
				ipaddr = initial_cfg->routeInfo[i].GatewayIP;
				ipaddr	= htonl (ipaddr);
				break;
			}
		}
		if(i == SPP_MAX_ROUTE_NUM)
		{	/*don't return ,maybe no route configured in xml fils .*/
			WDDI_WARNING("can't get gateway ip ,ipaddr = 0x%x", ipaddr);
			//return -1;
		}

	}
#endif
	/*ipaddr = 0x5a20880a;*//*temp used for gateway ipaddr*/
   /* if (inet_pton(AF_INET, argv[1], &(sin->sin_addr)) <= 0) {   
        perror("inet_pton error");   
        return -1;   
    } */
	if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
	{
		sprintf(ifname,"tap0.%d",initial_cfg->VlanTag);
 	}
	else
	{
		sprintf(ifname,"tap0");
 	}

    sin->sin_addr.s_addr = (ipaddr);/*where the address come from? networks*/
   
    sin = (struct sockaddr_in *) &arpreq.arp_pa;   
    memcpy(sin, &ss, sizeof(struct sockaddr_in));   
    strcpy(arpreq.arp_dev, ifname);   
    arpreq.arp_ha.sa_family = AF_UNSPEC;   
    if (ioctl(sockfd, SIOCGARP, &arpreq) < 0) {   
        WDDI_WARNING("ioctl %s ipaddr = 0x%x error = %d", strerror(errno),ipaddr,errno);
        return -1;   
    }   
   // ptr = (unsigned char *)arpreq.arp_ha.sa_data;
    memcpy(buf, arpreq.arp_ha.sa_data, 6);
    //sprintf(buf,"%x:%x:%x:%x:%x:%x", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5));   
    return 0;   
}  

int tap_socket_gethwaddr(unsigned char* mac)   
{   
    struct ifreq ifr;
    int ret;
    char ifname[10];
	STRU_SET_INITAIL_CONFIG *initial_cfg = npu_get_initial_cfg_info();
	if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
	{
		sprintf(ifname,"tap0.%d",initial_cfg->VlanTag);
	}
	else
	{
		sprintf(ifname,"tap0");
	}
    memset(&ifr,   0,   sizeof(ifr)); 
    strcpy(ifr.ifr_name,  ifname); 
    ret   =   ioctl(sockfd, SIOCGIFHWADDR, &ifr, sizeof(ifr)); 
    if   (ret == 0)   { 
        memcpy(mac,   ifr.ifr_hwaddr.sa_data,   6); 
    }   else   { 
        WDDI_WARNING("ioctl %s ifname %s:", strerror(errno),ifname);
    } 

    return ret;   
}  

int tap_socket_sethwaddr( unsigned char* mac)   
{   
    struct ifreq ifr;
    int ret;
    char ifname[10];
    memset(&ifr,   0,   sizeof(ifr)); 
	STRU_SET_INITAIL_CONFIG *initial_cfg = npu_get_initial_cfg_info();
	
	if(NPU_VLAN_ENABLE == initial_cfg->VlanFlag)
	{
		sprintf(ifname,"tap0.%d",initial_cfg->VlanTag);
	}
	else
	{
		sprintf(ifname,"tap0");
	}

    strcpy(ifr.ifr_name,  ifname); 
    ifr.ifr_addr.sa_family = ARPHRD_ETHER;
    memcpy(ifr.ifr_hwaddr.sa_data, mac, 6);
    
    ret   =   ioctl(sockfd, SIOCSIFHWADDR, &ifr, sizeof(ifr)); 
    if   (ret != 0){ 
        WDDI_WARNING("ioctl %s ifname %s:", strerror(errno),ifname);
    } 

    return ret;   
}  

int tap_socket_send( unsigned int ipaddr,unsigned short port, unsigned int ipaddr_src,unsigned int port_src,unsigned char* buf, int len)
{
    int tolen;
    struct sockaddr_in sin={0};   
    int ret;
    memset(&sin,0,sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = ipaddr_src;//htonl(INADDR_ANY);
    sin.sin_port = port_src;
    if(bind(sockfd, (struct sockaddr *)&sin, sizeof(sin))< 0)
        WDDI_WARNING("bind %s port_src  = %d ipaddr_src = 0x%x erron = %d", strerror(errno),port_src,ipaddr_src,errno);

    sin.sin_family = AF_INET;
    sin.sin_port = (port);
    sin.sin_addr.s_addr = (ipaddr);
    
    /*if (inet_pton(AF_INET, "149.128.49.115", &(sin->sin_addr)) <= 0) {   
    perror("inet_pton error");   
    return -1;   
    } */

    tolen = sizeof(sin);
    ret = sendto(sockfd, buf, len, MSG_DONTWAIT, (struct sockaddr *)&sin, tolen);
    if(ret < 0)
        WDDI_WARNING("sendto %s", strerror(errno));
  //  printf("sendto %d bytes", result);

    return ret;
}


int tap_packet_write(char* buf, int len)
{
    int size;
	size = tap_write(g_tapfd, buf, len);
	if(size < 0)
	{
		WDDI_WARNING("write tap0 %s", strerror(errno));
	}
    return size;
}



int tap_socket_close(void)
{
    close(sockfd);
    return 0;
}



int tap_hwadd_read (char* mac)
{
    int               fd;
    XS_FILE_DESC      desc;
    unsigned char     buf[2048], offset;
    char              *str, *ptr, *saveptr;
    struct ether_addr *addr;

    fd = open("/dev/wp_bank24", O_RDWR|O_NOFOLLOW, 0644);
    if(fd == -1) {
	perror("open");
	exit(1);
    }
	
    desc.buf = buf;

    if(ioctl(fd, XS_IOCTL_ENV_GET32, &desc) != 0) {
	close(fd);
	printf("XS_IOCTL_ENV_GET failed\n");
	perror("ioctl");
	exit(1);
    }

    close(fd);

    // Print all environment variables
    //printf("%s\n", buf);

    // Get Serial and MACs
    ptr = (char *)buf;
    while((str = strtok_r(ptr, "\n", &saveptr)) != NULL) {
	if(!strncmp(str, "BOARD_MAC_ETH0", strlen("BOARD_MAC_ETH0"))) {
	    offset = strlen("BOARD_MAC_ETH0") + 1;
	    addr = ether_aton(&str[offset]);
	    WDDI_INFO("MAC for port 0 is %02x:%02x:%02x:%02x:%02x:%02x\n", 
		   addr->ether_addr_octet[0],
		   addr->ether_addr_octet[1],
		   addr->ether_addr_octet[2],
		   addr->ether_addr_octet[3],
		   addr->ether_addr_octet[4],
		   addr->ether_addr_octet[5]);
          memcpy(mac, addr->ether_addr_octet, 6);
          return 0;
	}

	ptr = NULL;
    }

    return 1;
}

#if 0

int tap_socket_getarp1(char* ipaddr, char* buf)   
{   
    unsigned char * ptr;
    struct arpreq arpreq;   
    struct sockaddr_in *sin;   
    struct sockaddr_storage ss;   
    
    memset(&ss, 0, sizeof(ss));   

    sin = (struct sockaddr_in *) &ss;   
    sin->sin_family = AF_INET;  
    
    if (inet_pton(AF_INET, ipaddr, &(sin->sin_addr)) <= 0) {   
        perror("inet_pton");   
        return -1;   
    } 

//    sin->sin_addr.s_addr = htonl(ipaddr);
   
    sin = (struct sockaddr_in *) &arpreq.arp_pa;   
    memcpy(sin, &ss, sizeof(struct sockaddr_in));   
    strcpy(arpreq.arp_dev, "eth0");   
    arpreq.arp_ha.sa_family = AF_UNSPEC;   
    if (ioctl(sockfd, SIOCGARP, &arpreq) < 0) {   
        perror("ioctl SIOCGARP: ");   
        return -1;   
    }   
   ptr = (unsigned char *)arpreq.arp_ha.sa_data;
    memcpy(buf, arpreq.arp_ha.sa_data, 6);
    printf("%x:%x:%x:%x:%x:%x\n", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5));   
    return 0;   
}  

int main(int argc, char **argv)
{
    char mac[6];
    unsigned char * ptr;

    tap_socket_open();

    tap_socket_getarp1(argv[1], mac);

    tap_socket_gethwaddr("eth0", mac);

    ptr = mac;

    printf("%x:%x:%x:%x:%x:%x\n", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5));   
    
    tap_socket_close();
}

#endif
