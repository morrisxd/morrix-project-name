
spp_wddi_client_TC1:     file format elf64-x86-64


Disassembly of section .init:

0000000000400a80 <_init>:
  400a80:	48 83 ec 08          	sub    $0x8,%rsp
  400a84:	e8 f3 01 00 00       	callq  400c7c <call_gmon_start>
  400a89:	e8 82 02 00 00       	callq  400d10 <frame_dummy>
  400a8e:	e8 2d 46 00 00       	callq  4050c0 <__do_global_ctors_aux>
  400a93:	48 83 c4 08          	add    $0x8,%rsp
  400a97:	c3                   	retq   

Disassembly of section .plt:

0000000000400a98 <printf@plt-0x10>:
  400a98:	ff 35 52 65 20 00    	pushq  0x206552(%rip)        # 606ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
  400a9e:	ff 25 54 65 20 00    	jmpq   *0x206554(%rip)        # 606ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
  400aa4:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400aa8 <printf@plt>:
  400aa8:	ff 25 52 65 20 00    	jmpq   *0x206552(%rip)        # 607000 <_GLOBAL_OFFSET_TABLE_+0x18>
  400aae:	68 00 00 00 00       	pushq  $0x0
  400ab3:	e9 e0 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400ab8 <memset@plt>:
  400ab8:	ff 25 4a 65 20 00    	jmpq   *0x20654a(%rip)        # 607008 <_GLOBAL_OFFSET_TABLE_+0x20>
  400abe:	68 01 00 00 00       	pushq  $0x1
  400ac3:	e9 d0 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400ac8 <close@plt>:
  400ac8:	ff 25 42 65 20 00    	jmpq   *0x206542(%rip)        # 607010 <_GLOBAL_OFFSET_TABLE_+0x28>
  400ace:	68 02 00 00 00       	pushq  $0x2
  400ad3:	e9 c0 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400ad8 <ioctl@plt>:
  400ad8:	ff 25 3a 65 20 00    	jmpq   *0x20653a(%rip)        # 607018 <_GLOBAL_OFFSET_TABLE_+0x30>
  400ade:	68 03 00 00 00       	pushq  $0x3
  400ae3:	e9 b0 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400ae8 <abort@plt>:
  400ae8:	ff 25 32 65 20 00    	jmpq   *0x206532(%rip)        # 607020 <_GLOBAL_OFFSET_TABLE_+0x38>
  400aee:	68 04 00 00 00       	pushq  $0x4
  400af3:	e9 a0 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400af8 <puts@plt>:
  400af8:	ff 25 2a 65 20 00    	jmpq   *0x20652a(%rip)        # 607028 <_GLOBAL_OFFSET_TABLE_+0x40>
  400afe:	68 05 00 00 00       	pushq  $0x5
  400b03:	e9 90 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b08 <exit@plt>:
  400b08:	ff 25 22 65 20 00    	jmpq   *0x206522(%rip)        # 607030 <_GLOBAL_OFFSET_TABLE_+0x48>
  400b0e:	68 06 00 00 00       	pushq  $0x6
  400b13:	e9 80 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b18 <gettimeofday@plt>:
  400b18:	ff 25 1a 65 20 00    	jmpq   *0x20651a(%rip)        # 607038 <_GLOBAL_OFFSET_TABLE_+0x50>
  400b1e:	68 07 00 00 00       	pushq  $0x7
  400b23:	e9 70 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b28 <putchar@plt>:
  400b28:	ff 25 12 65 20 00    	jmpq   *0x206512(%rip)        # 607040 <_GLOBAL_OFFSET_TABLE_+0x58>
  400b2e:	68 08 00 00 00       	pushq  $0x8
  400b33:	e9 60 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b38 <getopt@plt>:
  400b38:	ff 25 0a 65 20 00    	jmpq   *0x20650a(%rip)        # 607048 <_GLOBAL_OFFSET_TABLE_+0x60>
  400b3e:	68 09 00 00 00       	pushq  $0x9
  400b43:	e9 50 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b48 <malloc@plt>:
  400b48:	ff 25 02 65 20 00    	jmpq   *0x206502(%rip)        # 607050 <_GLOBAL_OFFSET_TABLE_+0x68>
  400b4e:	68 0a 00 00 00       	pushq  $0xa
  400b53:	e9 40 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b58 <__libc_start_main@plt>:
  400b58:	ff 25 fa 64 20 00    	jmpq   *0x2064fa(%rip)        # 607058 <_GLOBAL_OFFSET_TABLE_+0x70>
  400b5e:	68 0b 00 00 00       	pushq  $0xb
  400b63:	e9 30 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b68 <getpid@plt>:
  400b68:	ff 25 f2 64 20 00    	jmpq   *0x2064f2(%rip)        # 607060 <_GLOBAL_OFFSET_TABLE_+0x78>
  400b6e:	68 0c 00 00 00       	pushq  $0xc
  400b73:	e9 20 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b78 <free@plt>:
  400b78:	ff 25 ea 64 20 00    	jmpq   *0x2064ea(%rip)        # 607068 <_GLOBAL_OFFSET_TABLE_+0x80>
  400b7e:	68 0d 00 00 00       	pushq  $0xd
  400b83:	e9 10 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b88 <strlen@plt>:
  400b88:	ff 25 e2 64 20 00    	jmpq   *0x2064e2(%rip)        # 607070 <_GLOBAL_OFFSET_TABLE_+0x88>
  400b8e:	68 0e 00 00 00       	pushq  $0xe
  400b93:	e9 00 ff ff ff       	jmpq   400a98 <_init+0x18>

0000000000400b98 <sprintf@plt>:
  400b98:	ff 25 da 64 20 00    	jmpq   *0x2064da(%rip)        # 607078 <_GLOBAL_OFFSET_TABLE_+0x90>
  400b9e:	68 0f 00 00 00       	pushq  $0xf
  400ba3:	e9 f0 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400ba8 <strerror@plt>:
  400ba8:	ff 25 d2 64 20 00    	jmpq   *0x2064d2(%rip)        # 607080 <_GLOBAL_OFFSET_TABLE_+0x98>
  400bae:	68 10 00 00 00       	pushq  $0x10
  400bb3:	e9 e0 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400bb8 <atoi@plt>:
  400bb8:	ff 25 ca 64 20 00    	jmpq   *0x2064ca(%rip)        # 607088 <_GLOBAL_OFFSET_TABLE_+0xa0>
  400bbe:	68 11 00 00 00       	pushq  $0x11
  400bc3:	e9 d0 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400bc8 <memcpy@plt>:
  400bc8:	ff 25 c2 64 20 00    	jmpq   *0x2064c2(%rip)        # 607090 <_GLOBAL_OFFSET_TABLE_+0xa8>
  400bce:	68 12 00 00 00       	pushq  $0x12
  400bd3:	e9 c0 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400bd8 <socket@plt>:
  400bd8:	ff 25 ba 64 20 00    	jmpq   *0x2064ba(%rip)        # 607098 <_GLOBAL_OFFSET_TABLE_+0xb0>
  400bde:	68 13 00 00 00       	pushq  $0x13
  400be3:	e9 b0 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400be8 <__errno_location@plt>:
  400be8:	ff 25 b2 64 20 00    	jmpq   *0x2064b2(%rip)        # 6070a0 <_GLOBAL_OFFSET_TABLE_+0xb8>
  400bee:	68 14 00 00 00       	pushq  $0x14
  400bf3:	e9 a0 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400bf8 <strcpy@plt>:
  400bf8:	ff 25 aa 64 20 00    	jmpq   *0x2064aa(%rip)        # 6070a8 <_GLOBAL_OFFSET_TABLE_+0xc0>
  400bfe:	68 15 00 00 00       	pushq  $0x15
  400c03:	e9 90 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400c08 <fwrite@plt>:
  400c08:	ff 25 a2 64 20 00    	jmpq   *0x2064a2(%rip)        # 6070b0 <_GLOBAL_OFFSET_TABLE_+0xc8>
  400c0e:	68 16 00 00 00       	pushq  $0x16
  400c13:	e9 80 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400c18 <realloc@plt>:
  400c18:	ff 25 9a 64 20 00    	jmpq   *0x20649a(%rip)        # 6070b8 <_GLOBAL_OFFSET_TABLE_+0xd0>
  400c1e:	68 17 00 00 00       	pushq  $0x17
  400c23:	e9 70 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400c28 <fprintf@plt>:
  400c28:	ff 25 92 64 20 00    	jmpq   *0x206492(%rip)        # 6070c0 <_GLOBAL_OFFSET_TABLE_+0xd8>
  400c2e:	68 18 00 00 00       	pushq  $0x18
  400c33:	e9 60 fe ff ff       	jmpq   400a98 <_init+0x18>

0000000000400c38 <strtoul@plt>:
  400c38:	ff 25 8a 64 20 00    	jmpq   *0x20648a(%rip)        # 6070c8 <_GLOBAL_OFFSET_TABLE_+0xe0>
  400c3e:	68 19 00 00 00       	pushq  $0x19
  400c43:	e9 50 fe ff ff       	jmpq   400a98 <_init+0x18>

Disassembly of section .text:

0000000000400c50 <_start>:
  400c50:	31 ed                	xor    %ebp,%ebp
  400c52:	49 89 d1             	mov    %rdx,%r9
  400c55:	5e                   	pop    %rsi
  400c56:	48 89 e2             	mov    %rsp,%rdx
  400c59:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400c5d:	50                   	push   %rax
  400c5e:	54                   	push   %rsp
  400c5f:	49 c7 c0 20 50 40 00 	mov    $0x405020,%r8
  400c66:	48 c7 c1 30 50 40 00 	mov    $0x405030,%rcx
  400c6d:	48 c7 c7 a5 33 40 00 	mov    $0x4033a5,%rdi
  400c74:	e8 df fe ff ff       	callq  400b58 <__libc_start_main@plt>
  400c79:	f4                   	hlt    
  400c7a:	90                   	nop
  400c7b:	90                   	nop

0000000000400c7c <call_gmon_start>:
  400c7c:	48 83 ec 08          	sub    $0x8,%rsp
  400c80:	48 8b 05 59 63 20 00 	mov    0x206359(%rip),%rax        # 606fe0 <_DYNAMIC+0x1a0>
  400c87:	48 85 c0             	test   %rax,%rax
  400c8a:	74 02                	je     400c8e <call_gmon_start+0x12>
  400c8c:	ff d0                	callq  *%rax
  400c8e:	48 83 c4 08          	add    $0x8,%rsp
  400c92:	c3                   	retq   
  400c93:	90                   	nop
  400c94:	90                   	nop
  400c95:	90                   	nop
  400c96:	90                   	nop
  400c97:	90                   	nop
  400c98:	90                   	nop
  400c99:	90                   	nop
  400c9a:	90                   	nop
  400c9b:	90                   	nop
  400c9c:	90                   	nop
  400c9d:	90                   	nop
  400c9e:	90                   	nop
  400c9f:	90                   	nop

0000000000400ca0 <__do_global_dtors_aux>:
  400ca0:	55                   	push   %rbp
  400ca1:	48 89 e5             	mov    %rsp,%rbp
  400ca4:	53                   	push   %rbx
  400ca5:	48 83 ec 08          	sub    $0x8,%rsp
  400ca9:	80 3d e0 64 20 00 00 	cmpb   $0x0,0x2064e0(%rip)        # 607190 <completed.6159>
  400cb0:	75 4b                	jne    400cfd <__do_global_dtors_aux+0x5d>
  400cb2:	b8 30 6e 60 00       	mov    $0x606e30,%eax
  400cb7:	48 8b 15 da 64 20 00 	mov    0x2064da(%rip),%rdx        # 607198 <dtor_idx.6161>
  400cbe:	48 2d 28 6e 60 00    	sub    $0x606e28,%rax
  400cc4:	48 c1 f8 03          	sar    $0x3,%rax
  400cc8:	48 8d 58 ff          	lea    -0x1(%rax),%rbx
  400ccc:	48 39 da             	cmp    %rbx,%rdx
  400ccf:	73 25                	jae    400cf6 <__do_global_dtors_aux+0x56>
  400cd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  400cd8:	48 8d 42 01          	lea    0x1(%rdx),%rax
  400cdc:	48 89 05 b5 64 20 00 	mov    %rax,0x2064b5(%rip)        # 607198 <dtor_idx.6161>
  400ce3:	ff 14 c5 28 6e 60 00 	callq  *0x606e28(,%rax,8)
  400cea:	48 8b 15 a7 64 20 00 	mov    0x2064a7(%rip),%rdx        # 607198 <dtor_idx.6161>
  400cf1:	48 39 da             	cmp    %rbx,%rdx
  400cf4:	72 e2                	jb     400cd8 <__do_global_dtors_aux+0x38>
  400cf6:	c6 05 93 64 20 00 01 	movb   $0x1,0x206493(%rip)        # 607190 <completed.6159>
  400cfd:	48 83 c4 08          	add    $0x8,%rsp
  400d01:	5b                   	pop    %rbx
  400d02:	c9                   	leaveq 
  400d03:	c3                   	retq   
  400d04:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
  400d0b:	00 00 00 00 00 

0000000000400d10 <frame_dummy>:
  400d10:	55                   	push   %rbp
  400d11:	48 83 3d 1f 61 20 00 	cmpq   $0x0,0x20611f(%rip)        # 606e38 <__JCR_END__>
  400d18:	00 
  400d19:	48 89 e5             	mov    %rsp,%rbp
  400d1c:	74 1a                	je     400d38 <frame_dummy+0x28>
  400d1e:	b8 00 00 00 00       	mov    $0x0,%eax
  400d23:	48 85 c0             	test   %rax,%rax
  400d26:	74 10                	je     400d38 <frame_dummy+0x28>
  400d28:	bf 38 6e 60 00       	mov    $0x606e38,%edi
  400d2d:	49 89 c3             	mov    %rax,%r11
  400d30:	c9                   	leaveq 
  400d31:	41 ff e3             	jmpq   *%r11
  400d34:	0f 1f 40 00          	nopl   0x0(%rax)
  400d38:	c9                   	leaveq 
  400d39:	c3                   	retq   
  400d3a:	90                   	nop
  400d3b:	90                   	nop

0000000000400d3c <npu_vport_open>:


LINX_CLINET_INFO g_StruClientLinxInfo={NULL,0,0,SPP_NPU_LINX_NOT_CREATED,0};

int npu_vport_open(u8 vp_type,u32 ipaddr_src,u32 port_src)
{
  400d3c:	55                   	push   %rbp
  400d3d:	48 89 e5             	mov    %rsp,%rbp
  400d40:	53                   	push   %rbx
  400d41:	48 83 ec 38          	sub    $0x38,%rsp
  400d45:	89 75 c8             	mov    %esi,-0x38(%rbp)
  400d48:	89 55 c4             	mov    %edx,-0x3c(%rbp)
  400d4b:	40 88 7d cc          	mov    %dil,-0x34(%rbp)
    int status;
	int Socketfd;
	union LINX_SIGNAL *sig;
	LINX_SIGSELECT sigsel_only[] = {1,NPU_ACK_SIG};
  400d4f:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%rbp)
  400d56:	c7 45 d4 02 84 00 00 	movl   $0x8402,-0x2c(%rbp)
	LINX_CLINET_INFO *linx_info;
	PRINTF_INFO("=======Client: npu_vport_open start.\n");
  400d5d:	bf 10 51 40 00       	mov    $0x405110,%edi
  400d62:	e8 91 fd ff ff       	callq  400af8 <puts@plt>
    status = npu_creat_linx(&Socketfd);
  400d67:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  400d6b:	e8 ef 1a 00 00       	callq  40285f <npu_creat_linx>
  400d70:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	if(status != STATUS_OK)
  400d73:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  400d77:	74 0b                	je     400d84 <npu_vport_open+0x48>
	{
	    return status;
  400d79:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  400d7c:	89 45 c0             	mov    %eax,-0x40(%rbp)
  400d7f:	e9 b8 01 00 00       	jmpq   400f3c <npu_vport_open+0x200>
	}
	linx_info = npu_get_client_linx_info(Socketfd);
  400d84:	8b 7d e0             	mov    -0x20(%rbp),%edi
  400d87:	e8 f8 1f 00 00       	callq  402d84 <npu_get_client_linx_info>
  400d8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(linx_info == NULL)
  400d90:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400d95:	75 0c                	jne    400da3 <npu_vport_open+0x67>
	return ERR_GET_VPORT_INFO;
  400d97:	c7 45 c0 f4 ff ff ff 	movl   $0xfffffff4,-0x40(%rbp)
  400d9e:	e9 99 01 00 00       	jmpq   400f3c <npu_vport_open+0x200>
	/*judge type ,port<->*/
	/*np function opend link*/
    
	sig = linx_alloc(linx_info->linx, sizeof(struct stru_vport_open_sig), VPORT_PORT_OPEN_SIG);
  400da3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400da7:	48 8b 38             	mov    (%rax),%rdi
  400daa:	ba 08 84 00 00       	mov    $0x8408,%edx
  400daf:	be 10 00 00 00       	mov    $0x10,%esi
  400db4:	e8 07 36 00 00       	callq  4043c0 <linx_alloc>
  400db9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	sig->vport_open.ipaddr_src = ipaddr_src;
  400dbd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  400dc1:	8b 45 c8             	mov    -0x38(%rbp),%eax
  400dc4:	89 42 08             	mov    %eax,0x8(%rdx)
	sig->vport_open.port_src = port_src;
  400dc7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  400dcb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  400dce:	89 42 0c             	mov    %eax,0xc(%rdx)
	sig->vport_open.vp_type = vp_type;
  400dd1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  400dd5:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  400dd9:	88 42 04             	mov    %al,0x4(%rdx)
	if (sig == NULL) 
  400ddc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400de0:	48 85 c0             	test   %rax,%rax
  400de3:	75 4d                	jne    400e32 <npu_vport_open+0xf6>
	{
		ERR("linx_alloc() failed");
  400de5:	ba 47 00 00 00       	mov    $0x47,%edx
  400dea:	be 35 51 40 00       	mov    $0x405135,%esi
  400def:	bf 47 51 40 00       	mov    $0x405147,%edi
  400df4:	b8 00 00 00 00       	mov    $0x0,%eax
  400df9:	e8 aa fc ff ff       	callq  400aa8 <printf@plt>
  400dfe:	e8 e5 fd ff ff       	callq  400be8 <__errno_location@plt>
  400e03:	8b 38                	mov    (%rax),%edi
  400e05:	e8 9e fd ff ff       	callq  400ba8 <strerror@plt>
  400e0a:	48 89 c3             	mov    %rax,%rbx
  400e0d:	e8 d6 fd ff ff       	callq  400be8 <__errno_location@plt>
  400e12:	8b 30                	mov    (%rax),%esi
  400e14:	48 89 da             	mov    %rbx,%rdx
  400e17:	bf 58 51 40 00       	mov    $0x405158,%edi
  400e1c:	b8 00 00 00 00       	mov    $0x0,%eax
  400e21:	e8 82 fc ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_ALLOC;
  400e26:	c7 45 c0 f7 ff ff ff 	movl   $0xfffffff7,-0x40(%rbp)
  400e2d:	e9 0a 01 00 00       	jmpq   400f3c <npu_vport_open+0x200>
	}
	if (linx_send(linx_info->linx, &sig, linx_info->server) == -1) 
  400e32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e36:	8b 50 14             	mov    0x14(%rax),%edx
  400e39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e3d:	48 8b 38             	mov    (%rax),%rdi
  400e40:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  400e44:	e8 37 3b 00 00       	callq  404980 <linx_send>
  400e49:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  400e4c:	75 4d                	jne    400e9b <npu_vport_open+0x15f>
	{
		ERR("linx_send() failed");
  400e4e:	ba 4c 00 00 00       	mov    $0x4c,%edx
  400e53:	be 35 51 40 00       	mov    $0x405135,%esi
  400e58:	bf 47 51 40 00       	mov    $0x405147,%edi
  400e5d:	b8 00 00 00 00       	mov    $0x0,%eax
  400e62:	e8 41 fc ff ff       	callq  400aa8 <printf@plt>
  400e67:	e8 7c fd ff ff       	callq  400be8 <__errno_location@plt>
  400e6c:	8b 38                	mov    (%rax),%edi
  400e6e:	e8 35 fd ff ff       	callq  400ba8 <strerror@plt>
  400e73:	48 89 c3             	mov    %rax,%rbx
  400e76:	e8 6d fd ff ff       	callq  400be8 <__errno_location@plt>
  400e7b:	8b 30                	mov    (%rax),%esi
  400e7d:	48 89 da             	mov    %rbx,%rdx
  400e80:	bf 80 51 40 00       	mov    $0x405180,%edi
  400e85:	b8 00 00 00 00       	mov    $0x0,%eax
  400e8a:	e8 19 fc ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_SEND;
  400e8f:	c7 45 c0 f6 ff ff ff 	movl   $0xfffffff6,-0x40(%rbp)
  400e96:	e9 a1 00 00 00       	jmpq   400f3c <npu_vport_open+0x200>
	}
	
	if (linx_receive(linx_info->linx, &sig,
  400e9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e9f:	48 8b 38             	mov    (%rax),%rdi
  400ea2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  400ea6:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  400eaa:	e8 e1 3d 00 00       	callq  404c90 <linx_receive>
  400eaf:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  400eb2:	75 4a                	jne    400efe <npu_vport_open+0x1c2>
				   sigsel_only) == -1) 				   
	{
		ERR("linx_receive() failed");
  400eb4:	ba 53 00 00 00       	mov    $0x53,%edx
  400eb9:	be 35 51 40 00       	mov    $0x405135,%esi
  400ebe:	bf 47 51 40 00       	mov    $0x405147,%edi
  400ec3:	b8 00 00 00 00       	mov    $0x0,%eax
  400ec8:	e8 db fb ff ff       	callq  400aa8 <printf@plt>
  400ecd:	e8 16 fd ff ff       	callq  400be8 <__errno_location@plt>
  400ed2:	8b 38                	mov    (%rax),%edi
  400ed4:	e8 cf fc ff ff       	callq  400ba8 <strerror@plt>
  400ed9:	48 89 c3             	mov    %rax,%rbx
  400edc:	e8 07 fd ff ff       	callq  400be8 <__errno_location@plt>
  400ee1:	8b 30                	mov    (%rax),%esi
  400ee3:	48 89 da             	mov    %rbx,%rdx
  400ee6:	bf a8 51 40 00       	mov    $0x4051a8,%edi
  400eeb:	b8 00 00 00 00       	mov    $0x0,%eax
  400ef0:	e8 b3 fb ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_RSV_FAIL;
  400ef5:	c7 45 c0 f3 ff ff ff 	movl   $0xfffffff3,-0x40(%rbp)
  400efc:	eb 3e                	jmp    400f3c <npu_vport_open+0x200>
	}
	
	if(sig->npu_ack.result == STATUS_OK){
  400efe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f02:	8b 40 04             	mov    0x4(%rax),%eax
  400f05:	85 c0                	test   %eax,%eax
  400f07:	75 2c                	jne    400f35 <npu_vport_open+0x1f9>
		PRINTF_INFO("Client Open: NPU_ACK_SIG received.\n");
  400f09:	bf d0 51 40 00       	mov    $0x4051d0,%edi
  400f0e:	e8 e5 fb ff ff       	callq  400af8 <puts@plt>
		linx_free_buf(linx_info->linx,&sig);
  400f13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f17:	48 8b 38             	mov    (%rax),%rdi
  400f1a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  400f1e:	e8 1d 3b 00 00       	callq  404a40 <linx_free_buf>
		PRINTF_INFO("=======Client: npu_vport_open end.\n");
  400f23:	bf f8 51 40 00       	mov    $0x4051f8,%edi
  400f28:	e8 cb fb ff ff       	callq  400af8 <puts@plt>
		return Socketfd;
  400f2d:	8b 45 e0             	mov    -0x20(%rbp),%eax
  400f30:	89 45 c0             	mov    %eax,-0x40(%rbp)
  400f33:	eb 07                	jmp    400f3c <npu_vport_open+0x200>
	}
	else
		return ERR_LINX_RSV_FAIL;
  400f35:	c7 45 c0 f3 ff ff ff 	movl   $0xfffffff3,-0x40(%rbp)
  400f3c:	8b 45 c0             	mov    -0x40(%rbp),%eax
		

}
  400f3f:	48 83 c4 38          	add    $0x38,%rsp
  400f43:	5b                   	pop    %rbx
  400f44:	c9                   	leaveq 
  400f45:	c3                   	retq   

0000000000400f46 <npu_vport_close>:

int npu_vport_close(int Socketfd,u8 vp_type,u32 port_src)
{
  400f46:	55                   	push   %rbp
  400f47:	48 89 e5             	mov    %rsp,%rbp
  400f4a:	53                   	push   %rbx
  400f4b:	48 83 ec 38          	sub    $0x38,%rsp
  400f4f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  400f52:	89 55 c4             	mov    %edx,-0x3c(%rbp)
  400f55:	40 88 75 c8          	mov    %sil,-0x38(%rbp)
    int status;
	union LINX_SIGNAL *sig;
	LINX_SIGSELECT sigsel_only[] = {1,NPU_ACK_SIG};
  400f59:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%rbp)
  400f60:	c7 45 d4 02 84 00 00 	movl   $0x8402,-0x2c(%rbp)
	LINX_CLINET_INFO *linx_info;	
    /*recommend never close linx connection ,will be discuss in further*/
	PRINTF_INFO("=======Client: npu_vport_close start.\n");	
  400f67:	bf 20 52 40 00       	mov    $0x405220,%edi
  400f6c:	e8 87 fb ff ff       	callq  400af8 <puts@plt>


	linx_info = npu_get_client_linx_info(Socketfd);
  400f71:	8b 7d cc             	mov    -0x34(%rbp),%edi
  400f74:	e8 0b 1e 00 00       	callq  402d84 <npu_get_client_linx_info>
  400f79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(linx_info == NULL)
  400f7d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400f82:	75 0c                	jne    400f90 <npu_vport_close+0x4a>
	return ERR_GET_VPORT_INFO;		
  400f84:	c7 45 c0 f4 ff ff ff 	movl   $0xfffffff4,-0x40(%rbp)
  400f8b:	e9 ac 01 00 00       	jmpq   40113c <npu_vport_close+0x1f6>
	/*judge type ,port<->*/
	/*np function opend link*/
	
	sig = linx_alloc(linx_info->linx, sizeof(struct stru_vport_close_sig), VPORT_PORT_CLOSE_SIG);
  400f90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f94:	48 8b 38             	mov    (%rax),%rdi
  400f97:	ba 09 84 00 00       	mov    $0x8409,%edx
  400f9c:	be 0c 00 00 00       	mov    $0xc,%esi
  400fa1:	e8 1a 34 00 00       	callq  4043c0 <linx_alloc>
  400fa6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	sig->vport_close.port_src = port_src;
  400faa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  400fae:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  400fb1:	89 42 08             	mov    %eax,0x8(%rdx)
	sig->vport_close.vp_type = vp_type;
  400fb4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  400fb8:	0f b6 45 c8          	movzbl -0x38(%rbp),%eax
  400fbc:	88 42 04             	mov    %al,0x4(%rdx)
	PRINTF_INFO("======= port = %d\n",port_src);
  400fbf:	8b 75 c4             	mov    -0x3c(%rbp),%esi
  400fc2:	bf 46 52 40 00       	mov    $0x405246,%edi
  400fc7:	b8 00 00 00 00       	mov    $0x0,%eax
  400fcc:	e8 d7 fa ff ff       	callq  400aa8 <printf@plt>
	if (sig == NULL) 
  400fd1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400fd5:	48 85 c0             	test   %rax,%rax
  400fd8:	75 4d                	jne    401027 <npu_vport_close+0xe1>
	{
		ERR("linx_alloc() failed");
  400fda:	ba 79 00 00 00       	mov    $0x79,%edx
  400fdf:	be 35 51 40 00       	mov    $0x405135,%esi
  400fe4:	bf 47 51 40 00       	mov    $0x405147,%edi
  400fe9:	b8 00 00 00 00       	mov    $0x0,%eax
  400fee:	e8 b5 fa ff ff       	callq  400aa8 <printf@plt>
  400ff3:	e8 f0 fb ff ff       	callq  400be8 <__errno_location@plt>
  400ff8:	8b 38                	mov    (%rax),%edi
  400ffa:	e8 a9 fb ff ff       	callq  400ba8 <strerror@plt>
  400fff:	48 89 c3             	mov    %rax,%rbx
  401002:	e8 e1 fb ff ff       	callq  400be8 <__errno_location@plt>
  401007:	8b 30                	mov    (%rax),%esi
  401009:	48 89 da             	mov    %rbx,%rdx
  40100c:	bf 58 51 40 00       	mov    $0x405158,%edi
  401011:	b8 00 00 00 00       	mov    $0x0,%eax
  401016:	e8 8d fa ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_ALLOC;
  40101b:	c7 45 c0 f7 ff ff ff 	movl   $0xfffffff7,-0x40(%rbp)
  401022:	e9 15 01 00 00       	jmpq   40113c <npu_vport_close+0x1f6>
	}
	if (linx_send(linx_info->linx, &sig, linx_info->server) == -1) 
  401027:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40102b:	8b 50 14             	mov    0x14(%rax),%edx
  40102e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401032:	48 8b 38             	mov    (%rax),%rdi
  401035:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  401039:	e8 42 39 00 00       	callq  404980 <linx_send>
  40103e:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401041:	75 4d                	jne    401090 <npu_vport_close+0x14a>
	{
		ERR("linx_send() failed");
  401043:	ba 7e 00 00 00       	mov    $0x7e,%edx
  401048:	be 35 51 40 00       	mov    $0x405135,%esi
  40104d:	bf 47 51 40 00       	mov    $0x405147,%edi
  401052:	b8 00 00 00 00       	mov    $0x0,%eax
  401057:	e8 4c fa ff ff       	callq  400aa8 <printf@plt>
  40105c:	e8 87 fb ff ff       	callq  400be8 <__errno_location@plt>
  401061:	8b 38                	mov    (%rax),%edi
  401063:	e8 40 fb ff ff       	callq  400ba8 <strerror@plt>
  401068:	48 89 c3             	mov    %rax,%rbx
  40106b:	e8 78 fb ff ff       	callq  400be8 <__errno_location@plt>
  401070:	8b 30                	mov    (%rax),%esi
  401072:	48 89 da             	mov    %rbx,%rdx
  401075:	bf 80 51 40 00       	mov    $0x405180,%edi
  40107a:	b8 00 00 00 00       	mov    $0x0,%eax
  40107f:	e8 24 fa ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_SEND;
  401084:	c7 45 c0 f6 ff ff ff 	movl   $0xfffffff6,-0x40(%rbp)
  40108b:	e9 ac 00 00 00       	jmpq   40113c <npu_vport_close+0x1f6>
	}

	if (linx_receive(linx_info->linx, &sig,
  401090:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401094:	48 8b 38             	mov    (%rax),%rdi
  401097:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40109b:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  40109f:	e8 ec 3b 00 00       	callq  404c90 <linx_receive>
  4010a4:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  4010a7:	75 4a                	jne    4010f3 <npu_vport_close+0x1ad>
				   sigsel_only) == -1) 				   
	{
		ERR("linx_receive() failed");
  4010a9:	ba 85 00 00 00       	mov    $0x85,%edx
  4010ae:	be 35 51 40 00       	mov    $0x405135,%esi
  4010b3:	bf 47 51 40 00       	mov    $0x405147,%edi
  4010b8:	b8 00 00 00 00       	mov    $0x0,%eax
  4010bd:	e8 e6 f9 ff ff       	callq  400aa8 <printf@plt>
  4010c2:	e8 21 fb ff ff       	callq  400be8 <__errno_location@plt>
  4010c7:	8b 38                	mov    (%rax),%edi
  4010c9:	e8 da fa ff ff       	callq  400ba8 <strerror@plt>
  4010ce:	48 89 c3             	mov    %rax,%rbx
  4010d1:	e8 12 fb ff ff       	callq  400be8 <__errno_location@plt>
  4010d6:	8b 30                	mov    (%rax),%esi
  4010d8:	48 89 da             	mov    %rbx,%rdx
  4010db:	bf a8 51 40 00       	mov    $0x4051a8,%edi
  4010e0:	b8 00 00 00 00       	mov    $0x0,%eax
  4010e5:	e8 be f9 ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_RSV_FAIL;
  4010ea:	c7 45 c0 f3 ff ff ff 	movl   $0xfffffff3,-0x40(%rbp)
  4010f1:	eb 49                	jmp    40113c <npu_vport_close+0x1f6>
	}

	if(sig->npu_ack.result == STATUS_OK){
  4010f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4010f7:	8b 40 04             	mov    0x4(%rax),%eax
  4010fa:	85 c0                	test   %eax,%eax
  4010fc:	75 37                	jne    401135 <npu_vport_close+0x1ef>
		
		PRINTF_INFO("Client Close: NPU_ACK_SIG received.\n");
  4010fe:	bf 60 52 40 00       	mov    $0x405260,%edi
  401103:	e8 f0 f9 ff ff       	callq  400af8 <puts@plt>
		linx_free_buf(linx_info->linx,&sig);
  401108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40110c:	48 8b 38             	mov    (%rax),%rdi
  40110f:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  401113:	e8 28 39 00 00       	callq  404a40 <linx_free_buf>
		
		status = npu_close_linx(Socketfd);		
  401118:	8b 7d cc             	mov    -0x34(%rbp),%edi
  40111b:	e8 fe 15 00 00       	callq  40271e <npu_close_linx>
  401120:	89 45 e4             	mov    %eax,-0x1c(%rbp)
		PRINTF_INFO("=======Client: npu_vport_close end.\n");		
  401123:	bf 88 52 40 00       	mov    $0x405288,%edi
  401128:	e8 cb f9 ff ff       	callq  400af8 <puts@plt>
		return status;
  40112d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401130:	89 45 c0             	mov    %eax,-0x40(%rbp)
  401133:	eb 07                	jmp    40113c <npu_vport_close+0x1f6>
	}
	else
		return ERR_LINX_RSV_FAIL;
  401135:	c7 45 c0 f3 ff ff ff 	movl   $0xfffffff3,-0x40(%rbp)
  40113c:	8b 45 c0             	mov    -0x40(%rbp),%eax
}
  40113f:	48 83 c4 38          	add    $0x38,%rsp
  401143:	5b                   	pop    %rbx
  401144:	c9                   	leaveq 
  401145:	c3                   	retq   

0000000000401146 <npu_vport_send>:

int npu_vport_send(int Socketfd,u8 vp_type,u8* p, u32 len,u32 ipaddr_src,u32 port_src,u32 ipaddr_dst,u32 port_dst)
{
  401146:	55                   	push   %rbp
  401147:	48 89 e5             	mov    %rsp,%rbp
  40114a:	53                   	push   %rbx
  40114b:	48 83 ec 38          	sub    $0x38,%rsp
  40114f:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  401152:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  401156:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  401159:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  40115d:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  401161:	40 88 75 e0          	mov    %sil,-0x20(%rbp)
	union LINX_SIGNAL *sig;
	LINX_CLINET_INFO *linx_info;
	PRINTF_INFO("=======Client: npu_vport_send start.\n");		
  401165:	bf b0 52 40 00       	mov    $0x4052b0,%edi
  40116a:	e8 89 f9 ff ff       	callq  400af8 <puts@plt>
	linx_info = npu_get_client_linx_info(Socketfd);	
  40116f:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  401172:	e8 0d 1c 00 00       	callq  402d84 <npu_get_client_linx_info>
  401177:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	
	if(linx_info == NULL)
  40117b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  401180:	75 0c                	jne    40118e <npu_vport_send+0x48>
	{
		return ERR_GET_LINX_INFO;
  401182:	c7 45 c8 f5 ff ff ff 	movl   $0xfffffff5,-0x38(%rbp)
  401189:	e9 38 01 00 00       	jmpq   4012c6 <npu_vport_send+0x180>
	}
	sig = linx_alloc(linx_info->linx, sizeof(struct stru_spp_send_sig) + len, SPP_SEND_SIG);
  40118e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  401191:	83 c0 20             	add    $0x20,%eax
  401194:	89 c6                	mov    %eax,%esi
  401196:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40119a:	48 8b 38             	mov    (%rax),%rdi
  40119d:	ba 04 84 00 00       	mov    $0x8404,%edx
  4011a2:	e8 19 32 00 00       	callq  4043c0 <linx_alloc>
  4011a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	sig->spp_send.vp_type = vp_type;
  4011ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011af:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  4011b3:	88 42 04             	mov    %al,0x4(%rdx)
	sig->spp_send.length = len;
  4011b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011ba:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  4011bd:	89 42 08             	mov    %eax,0x8(%rdx)
	sig->spp_send.ipaddr_dst = ipaddr_dst;
  4011c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011c4:	8b 45 10             	mov    0x10(%rbp),%eax
  4011c7:	89 42 10             	mov    %eax,0x10(%rdx)
	sig->spp_send.ipaddr_src = ipaddr_src;
  4011ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011ce:	8b 45 d0             	mov    -0x30(%rbp),%eax
  4011d1:	89 42 0c             	mov    %eax,0xc(%rdx)
	sig->spp_send.port_dst = port_dst ;
  4011d4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011d8:	8b 45 18             	mov    0x18(%rbp),%eax
  4011db:	89 42 18             	mov    %eax,0x18(%rdx)
	sig->spp_send.port_src = port_src ;	
  4011de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011e2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  4011e5:	89 42 14             	mov    %eax,0x14(%rdx)
	memcpy(sig->spp_send.pdata,p,len);
  4011e8:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  4011eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4011ef:	48 8d 78 1c          	lea    0x1c(%rax),%rdi
  4011f3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  4011f7:	e8 cc f9 ff ff       	callq  400bc8 <memcpy@plt>
	if (sig == NULL) 
  4011fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401200:	48 85 c0             	test   %rax,%rax
  401203:	75 4a                	jne    40124f <npu_vport_send+0x109>
	{
		ERR("linx_alloc() failed");
  401205:	ba ab 00 00 00       	mov    $0xab,%edx
  40120a:	be 35 51 40 00       	mov    $0x405135,%esi
  40120f:	bf 47 51 40 00       	mov    $0x405147,%edi
  401214:	b8 00 00 00 00       	mov    $0x0,%eax
  401219:	e8 8a f8 ff ff       	callq  400aa8 <printf@plt>
  40121e:	e8 c5 f9 ff ff       	callq  400be8 <__errno_location@plt>
  401223:	8b 38                	mov    (%rax),%edi
  401225:	e8 7e f9 ff ff       	callq  400ba8 <strerror@plt>
  40122a:	48 89 c3             	mov    %rax,%rbx
  40122d:	e8 b6 f9 ff ff       	callq  400be8 <__errno_location@plt>
  401232:	8b 30                	mov    (%rax),%esi
  401234:	48 89 da             	mov    %rbx,%rdx
  401237:	bf 58 51 40 00       	mov    $0x405158,%edi
  40123c:	b8 00 00 00 00       	mov    $0x0,%eax
  401241:	e8 62 f8 ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_ALLOC;
  401246:	c7 45 c8 f7 ff ff ff 	movl   $0xfffffff7,-0x38(%rbp)
  40124d:	eb 77                	jmp    4012c6 <npu_vport_send+0x180>
	}
	if (linx_send(linx_info->linx, &sig, linx_info->server) == -1) 
  40124f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401253:	8b 50 14             	mov    0x14(%rax),%edx
  401256:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40125a:	48 8b 38             	mov    (%rax),%rdi
  40125d:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  401261:	e8 1a 37 00 00       	callq  404980 <linx_send>
  401266:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401269:	75 4a                	jne    4012b5 <npu_vport_send+0x16f>
	{
		ERR("linx_send() failed");
  40126b:	ba b0 00 00 00       	mov    $0xb0,%edx
  401270:	be 35 51 40 00       	mov    $0x405135,%esi
  401275:	bf 47 51 40 00       	mov    $0x405147,%edi
  40127a:	b8 00 00 00 00       	mov    $0x0,%eax
  40127f:	e8 24 f8 ff ff       	callq  400aa8 <printf@plt>
  401284:	e8 5f f9 ff ff       	callq  400be8 <__errno_location@plt>
  401289:	8b 38                	mov    (%rax),%edi
  40128b:	e8 18 f9 ff ff       	callq  400ba8 <strerror@plt>
  401290:	48 89 c3             	mov    %rax,%rbx
  401293:	e8 50 f9 ff ff       	callq  400be8 <__errno_location@plt>
  401298:	8b 30                	mov    (%rax),%esi
  40129a:	48 89 da             	mov    %rbx,%rdx
  40129d:	bf 80 51 40 00       	mov    $0x405180,%edi
  4012a2:	b8 00 00 00 00       	mov    $0x0,%eax
  4012a7:	e8 fc f7 ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_SEND;
  4012ac:	c7 45 c8 f6 ff ff ff 	movl   $0xfffffff6,-0x38(%rbp)
  4012b3:	eb 11                	jmp    4012c6 <npu_vport_send+0x180>
	}
	PRINTF_INFO("=======Client: npu_vport_send end.\n");	
  4012b5:	bf d8 52 40 00       	mov    $0x4052d8,%edi
  4012ba:	e8 39 f8 ff ff       	callq  400af8 <puts@plt>
	return STATUS_OK;
  4012bf:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  4012c6:	8b 45 c8             	mov    -0x38(%rbp),%eax
}
  4012c9:	48 83 c4 38          	add    $0x38,%rsp
  4012cd:	5b                   	pop    %rbx
  4012ce:	c9                   	leaveq 
  4012cf:	c3                   	retq   

00000000004012d0 <npu_vport_recv>:

int npu_vport_recv(int Socketfd,u8* buf, u32 maxlen,u8* vp_type,u32* ipaddr_dst,u32* port,u32* ipaddr_src, u16* udp_port_src)
{
  4012d0:	55                   	push   %rbp
  4012d1:	48 89 e5             	mov    %rsp,%rbp
  4012d4:	53                   	push   %rbx
  4012d5:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  4012dc:	89 7d ac             	mov    %edi,-0x54(%rbp)
  4012df:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  4012e3:	89 55 9c             	mov    %edx,-0x64(%rbp)
  4012e6:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  4012ea:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
  4012ee:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)

	LINX_SIGSELECT sigsel_any[] = { 0 };
  4012f2:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
	LINX_CLINET_INFO *linx_info;
	LINX_SPID server;
    union LINX_SIGNAL *sig;
	int length;
	PRINTF_INFO("=======Client: npu_vport_recv start.\n");	
  4012f9:	bf 00 53 40 00       	mov    $0x405300,%edi
  4012fe:	e8 f5 f7 ff ff       	callq  400af8 <puts@plt>
    linx_info = npu_get_client_linx_info(Socketfd);	
  401303:	8b 7d ac             	mov    -0x54(%rbp),%edi
  401306:	e8 79 1a 00 00       	callq  402d84 <npu_get_client_linx_info>
  40130b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	if(linx_info == NULL)
  40130f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  401314:	75 0f                	jne    401325 <npu_vport_recv+0x55>
	{
		return ERR_GET_LINX_INFO;
  401316:	c7 85 78 ff ff ff f5 	movl   $0xfffffff5,-0x88(%rbp)
  40131d:	ff ff ff 
  401320:	e9 5f 04 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
	}
	
	//if (linx_receive_w_tmo(linx_info->linx, &sig, 1,
	//			   sigsel_any) == -1) 
    if (linx_receive(linx_info->linx, &sig,
  401325:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401329:	48 8b 38             	mov    (%rax),%rdi
  40132c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  401330:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  401334:	e8 57 39 00 00       	callq  404c90 <linx_receive>
  401339:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  40133c:	75 50                	jne    40138e <npu_vport_recv+0xbe>
				   sigsel_any) == -1) 				   
	{
		ERR("linx_receive() failed");
  40133e:	ba cb 00 00 00       	mov    $0xcb,%edx
  401343:	be 35 51 40 00       	mov    $0x405135,%esi
  401348:	bf 47 51 40 00       	mov    $0x405147,%edi
  40134d:	b8 00 00 00 00       	mov    $0x0,%eax
  401352:	e8 51 f7 ff ff       	callq  400aa8 <printf@plt>
  401357:	e8 8c f8 ff ff       	callq  400be8 <__errno_location@plt>
  40135c:	8b 38                	mov    (%rax),%edi
  40135e:	e8 45 f8 ff ff       	callq  400ba8 <strerror@plt>
  401363:	48 89 c3             	mov    %rax,%rbx
  401366:	e8 7d f8 ff ff       	callq  400be8 <__errno_location@plt>
  40136b:	8b 30                	mov    (%rax),%esi
  40136d:	48 89 da             	mov    %rbx,%rdx
  401370:	bf a8 51 40 00       	mov    $0x4051a8,%edi
  401375:	b8 00 00 00 00       	mov    $0x0,%eax
  40137a:	e8 29 f7 ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_RSV_FAIL;
  40137f:	c7 85 78 ff ff ff f3 	movl   $0xfffffff3,-0x88(%rbp)
  401386:	ff ff ff 
  401389:	e9 f6 03 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
	}
	if(sig == LINX_NIL)
  40138e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401392:	48 85 c0             	test   %rax,%rax
  401395:	75 19                	jne    4013b0 <npu_vport_recv+0xe0>
	{
		PRINTF_INFO("Client: received sig timeout.\n");
  401397:	bf 25 53 40 00       	mov    $0x405325,%edi
  40139c:	e8 57 f7 ff ff       	callq  400af8 <puts@plt>
		return ERR_LINX_RSV_TMOUT;
  4013a1:	c7 85 78 ff ff ff f2 	movl   $0xfffffff2,-0x88(%rbp)
  4013a8:	ff ff ff 
  4013ab:	e9 d4 03 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
	}
	else
	{	
		server = linx_sender(linx_info->linx, &sig);
  4013b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4013b4:	48 8b 38             	mov    (%rax),%rdi
  4013b7:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  4013bb:	e8 20 2d 00 00       	callq  4040e0 <linx_sender>
  4013c0:	89 45 d4             	mov    %eax,-0x2c(%rbp)
		if (server == LINX_ILLEGAL_SPID) 
  4013c3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  4013c7:	75 41                	jne    40140a <npu_vport_recv+0x13a>
		{
			ERR("linx_sender() failed");
  4013c9:	ba d8 00 00 00       	mov    $0xd8,%edx
  4013ce:	be 35 51 40 00       	mov    $0x405135,%esi
  4013d3:	bf 47 51 40 00       	mov    $0x405147,%edi
  4013d8:	b8 00 00 00 00       	mov    $0x0,%eax
  4013dd:	e8 c6 f6 ff ff       	callq  400aa8 <printf@plt>
  4013e2:	e8 01 f8 ff ff       	callq  400be8 <__errno_location@plt>
  4013e7:	8b 38                	mov    (%rax),%edi
  4013e9:	e8 ba f7 ff ff       	callq  400ba8 <strerror@plt>
  4013ee:	48 89 c3             	mov    %rax,%rbx
  4013f1:	e8 f2 f7 ff ff       	callq  400be8 <__errno_location@plt>
  4013f6:	8b 30                	mov    (%rax),%esi
  4013f8:	48 89 da             	mov    %rbx,%rdx
  4013fb:	bf 48 53 40 00       	mov    $0x405348,%edi
  401400:	b8 00 00 00 00       	mov    $0x0,%eax
  401405:	e8 9e f6 ff ff       	callq  400aa8 <printf@plt>
		}
		switch (sig->sig_no) 
  40140a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40140e:	8b 00                	mov    (%rax),%eax
  401410:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  401416:	81 bd 7c ff ff ff 02 	cmpl   $0x8402,-0x84(%rbp)
  40141d:	84 00 00 
  401420:	0f 84 b1 00 00 00    	je     4014d7 <npu_vport_recv+0x207>
  401426:	81 bd 7c ff ff ff 02 	cmpl   $0x8402,-0x84(%rbp)
  40142d:	84 00 00 
  401430:	77 11                	ja     401443 <npu_vport_recv+0x173>
  401432:	81 bd 7c ff ff ff 01 	cmpl   $0x8401,-0x84(%rbp)
  401439:	84 00 00 
  40143c:	74 2a                	je     401468 <npu_vport_recv+0x198>
  40143e:	e9 e1 02 00 00       	jmpq   401724 <npu_vport_recv+0x454>
  401443:	81 bd 7c ff ff ff 05 	cmpl   $0x8405,-0x84(%rbp)
  40144a:	84 00 00 
  40144d:	0f 84 f3 00 00 00    	je     401546 <npu_vport_recv+0x276>
  401453:	81 bd 7c ff ff ff 0a 	cmpl   $0x840a,-0x84(%rbp)
  40145a:	84 00 00 
  40145d:	0f 84 74 02 00 00    	je     4016d7 <npu_vport_recv+0x407>
  401463:	e9 bc 02 00 00       	jmpq   401724 <npu_vport_recv+0x454>
		{
			case NPU_ECHO_SIG:
			{
				PRINTF_INFO("Client: NPU_ECHO_SIG received.\n");
  401468:	bf 70 53 40 00       	mov    $0x405370,%edi
  40146d:	e8 86 f6 ff ff       	callq  400af8 <puts@plt>
				if(linx_free_buf(linx_info->linx,&sig) == -1)
  401472:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401476:	48 8b 38             	mov    (%rax),%rdi
  401479:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  40147d:	e8 be 35 00 00       	callq  404a40 <linx_free_buf>
  401482:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401485:	75 41                	jne    4014c8 <npu_vport_recv+0x1f8>
				{
					ERR("linx_free_buf() failed");
  401487:	ba e1 00 00 00       	mov    $0xe1,%edx
  40148c:	be 35 51 40 00       	mov    $0x405135,%esi
  401491:	bf 47 51 40 00       	mov    $0x405147,%edi
  401496:	b8 00 00 00 00       	mov    $0x0,%eax
  40149b:	e8 08 f6 ff ff       	callq  400aa8 <printf@plt>
  4014a0:	e8 43 f7 ff ff       	callq  400be8 <__errno_location@plt>
  4014a5:	8b 38                	mov    (%rax),%edi
  4014a7:	e8 fc f6 ff ff       	callq  400ba8 <strerror@plt>
  4014ac:	48 89 c3             	mov    %rax,%rbx
  4014af:	e8 34 f7 ff ff       	callq  400be8 <__errno_location@plt>
  4014b4:	8b 30                	mov    (%rax),%esi
  4014b6:	48 89 da             	mov    %rbx,%rdx
  4014b9:	bf 90 53 40 00       	mov    $0x405390,%edi
  4014be:	b8 00 00 00 00       	mov    $0x0,%eax
  4014c3:	e8 e0 f5 ff ff       	callq  400aa8 <printf@plt>
				}				
				return 0;
  4014c8:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  4014cf:	00 00 00 
  4014d2:	e9 ad 02 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
			}
			case NPU_ACK_SIG:
			{   
				
				PRINTF_INFO("Client: NPU_ACK_SIG received.\n");
  4014d7:	bf b9 53 40 00       	mov    $0x4053b9,%edi
  4014dc:	e8 17 f6 ff ff       	callq  400af8 <puts@plt>
				
				if(linx_free_buf(linx_info->linx,&sig) == -1)
  4014e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4014e5:	48 8b 38             	mov    (%rax),%rdi
  4014e8:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  4014ec:	e8 4f 35 00 00       	callq  404a40 <linx_free_buf>
  4014f1:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  4014f4:	75 41                	jne    401537 <npu_vport_recv+0x267>
				{
					ERR("linx_free_buf() failed");
  4014f6:	ba ec 00 00 00       	mov    $0xec,%edx
  4014fb:	be 35 51 40 00       	mov    $0x405135,%esi
  401500:	bf 47 51 40 00       	mov    $0x405147,%edi
  401505:	b8 00 00 00 00       	mov    $0x0,%eax
  40150a:	e8 99 f5 ff ff       	callq  400aa8 <printf@plt>
  40150f:	e8 d4 f6 ff ff       	callq  400be8 <__errno_location@plt>
  401514:	8b 38                	mov    (%rax),%edi
  401516:	e8 8d f6 ff ff       	callq  400ba8 <strerror@plt>
  40151b:	48 89 c3             	mov    %rax,%rbx
  40151e:	e8 c5 f6 ff ff       	callq  400be8 <__errno_location@plt>
  401523:	8b 30                	mov    (%rax),%esi
  401525:	48 89 da             	mov    %rbx,%rdx
  401528:	bf 90 53 40 00       	mov    $0x405390,%edi
  40152d:	b8 00 00 00 00       	mov    $0x0,%eax
  401532:	e8 71 f5 ff ff       	callq  400aa8 <printf@plt>
				}				
				return 0;
  401537:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  40153e:	00 00 00 
  401541:	e9 3e 02 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
			}			
			case SPP_RECEIVE_SIG:
			{
				u32 k;
				u8  *pdata;
				length = sig->spp_receive.length;
  401546:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40154a:	8b 40 08             	mov    0x8(%rax),%eax
  40154d:	89 45 d8             	mov    %eax,-0x28(%rbp)
                if(length > maxlen)
  401550:	8b 45 d8             	mov    -0x28(%rbp),%eax
  401553:	3b 45 9c             	cmp    -0x64(%rbp),%eax
  401556:	76 2f                	jbe    401587 <npu_vport_recv+0x2b7>
                {
                    PRINTF_INFO("client: receive packet size biger then expect! maxlen = %d ,length = %d ,vp_type = %d\n",maxlen,(u32)length, sig->spp_receive.vp_type);
  401558:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40155c:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  401560:	0f b6 c8             	movzbl %al,%ecx
  401563:	8b 55 d8             	mov    -0x28(%rbp),%edx
  401566:	8b 75 9c             	mov    -0x64(%rbp),%esi
  401569:	bf d8 53 40 00       	mov    $0x4053d8,%edi
  40156e:	b8 00 00 00 00       	mov    $0x0,%eax
  401573:	e8 30 f5 ff ff       	callq  400aa8 <printf@plt>
					return ERR_LINX_RSV_OVER_SIZE;
  401578:	c7 85 78 ff ff ff f1 	movl   $0xfffffff1,-0x88(%rbp)
  40157f:	ff ff ff 
  401582:	e9 fd 01 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
				}
				*ipaddr_dst = sig->spp_receive.ipaddr_dst;
  401587:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40158b:	8b 50 10             	mov    0x10(%rax),%edx
  40158e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401592:	89 10                	mov    %edx,(%rax)
			    *ipaddr_src = sig->spp_receive.ipaddr_src;
  401594:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401598:	8b 50 14             	mov    0x14(%rax),%edx
  40159b:	48 8b 45 10          	mov    0x10(%rbp),%rax
  40159f:	89 10                	mov    %edx,(%rax)
				*udp_port_src = sig->spp_receive.port_src;
  4015a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4015a5:	0f b7 50 18          	movzwl 0x18(%rax),%edx
  4015a9:	48 8b 45 18          	mov    0x18(%rbp),%rax
  4015ad:	66 89 10             	mov    %dx,(%rax)
				*port = sig->spp_receive.port;
  4015b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4015b4:	8b 50 0c             	mov    0xc(%rax),%edx
  4015b7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  4015bb:	89 10                	mov    %edx,(%rax)
				pdata = sig->spp_receive.pdata;	
  4015bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4015c1:	48 83 c0 1a          	add    $0x1a,%rax
  4015c5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				*vp_type = sig->spp_receive.vp_type;
  4015c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4015cd:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  4015d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4015d5:	88 10                	mov    %dl,(%rax)
				memcpy(buf,pdata,length);
  4015d7:	8b 45 d8             	mov    -0x28(%rbp),%eax
  4015da:	48 63 d0             	movslq %eax,%rdx
  4015dd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4015e1:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  4015e5:	e8 de f5 ff ff       	callq  400bc8 <memcpy@plt>
				PRINTF_INFO("client: received receive sig length =%d port_src =%d port_dst =%d vp_type = %d ipaddr_src = 0x%x ipaddr_dst=0x%x\n",length,*udp_port_src,*port,*vp_type,*ipaddr_src,*ipaddr_dst);
  4015ea:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4015ee:	8b 38                	mov    (%rax),%edi
  4015f0:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4015f4:	44 8b 00             	mov    (%rax),%r8d
  4015f7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  4015fb:	0f b6 00             	movzbl (%rax),%eax
  4015fe:	0f b6 d0             	movzbl %al,%edx
  401601:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  401605:	8b 08                	mov    (%rax),%ecx
  401607:	48 8b 45 18          	mov    0x18(%rbp),%rax
  40160b:	0f b7 00             	movzwl (%rax),%eax
  40160e:	0f b7 c0             	movzwl %ax,%eax
  401611:	8b 75 d8             	mov    -0x28(%rbp),%esi
  401614:	89 3c 24             	mov    %edi,(%rsp)
  401617:	45 89 c1             	mov    %r8d,%r9d
  40161a:	41 89 d0             	mov    %edx,%r8d
  40161d:	89 c2                	mov    %eax,%edx
  40161f:	bf 30 54 40 00       	mov    $0x405430,%edi
  401624:	b8 00 00 00 00       	mov    $0x0,%eax
  401629:	e8 7a f4 ff ff       	callq  400aa8 <printf@plt>
				for (k = 0; k < length; k++)
  40162e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  401635:	eb 20                	jmp    401657 <npu_vport_recv+0x387>
				{
					PRINTF_INFO("%2.2x ", pdata[k]);
  401637:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40163a:	48 03 45 e0          	add    -0x20(%rbp),%rax
  40163e:	0f b6 00             	movzbl (%rax),%eax
  401641:	0f b6 f0             	movzbl %al,%esi
  401644:	bf a2 54 40 00       	mov    $0x4054a2,%edi
  401649:	b8 00 00 00 00       	mov    $0x0,%eax
  40164e:	e8 55 f4 ff ff       	callq  400aa8 <printf@plt>
				*port = sig->spp_receive.port;
				pdata = sig->spp_receive.pdata;	
				*vp_type = sig->spp_receive.vp_type;
				memcpy(buf,pdata,length);
				PRINTF_INFO("client: received receive sig length =%d port_src =%d port_dst =%d vp_type = %d ipaddr_src = 0x%x ipaddr_dst=0x%x\n",length,*udp_port_src,*port,*vp_type,*ipaddr_src,*ipaddr_dst);
				for (k = 0; k < length; k++)
  401653:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  401657:	8b 45 d8             	mov    -0x28(%rbp),%eax
  40165a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  40165d:	77 d8                	ja     401637 <npu_vport_recv+0x367>
				{
					PRINTF_INFO("%2.2x ", pdata[k]);
				}
				PRINTF_INFO("\n");
  40165f:	bf 0a 00 00 00       	mov    $0xa,%edi
  401664:	e8 bf f4 ff ff       	callq  400b28 <putchar@plt>

				if(linx_free_buf(linx_info->linx,&sig) == -1)
  401669:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40166d:	48 8b 38             	mov    (%rax),%rdi
  401670:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  401674:	e8 c7 33 00 00       	callq  404a40 <linx_free_buf>
  401679:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  40167c:	75 41                	jne    4016bf <npu_vport_recv+0x3ef>
				{
					ERR("linx_free_buf() failed");
  40167e:	ba 0a 01 00 00       	mov    $0x10a,%edx
  401683:	be 35 51 40 00       	mov    $0x405135,%esi
  401688:	bf 47 51 40 00       	mov    $0x405147,%edi
  40168d:	b8 00 00 00 00       	mov    $0x0,%eax
  401692:	e8 11 f4 ff ff       	callq  400aa8 <printf@plt>
  401697:	e8 4c f5 ff ff       	callq  400be8 <__errno_location@plt>
  40169c:	8b 38                	mov    (%rax),%edi
  40169e:	e8 05 f5 ff ff       	callq  400ba8 <strerror@plt>
  4016a3:	48 89 c3             	mov    %rax,%rbx
  4016a6:	e8 3d f5 ff ff       	callq  400be8 <__errno_location@plt>
  4016ab:	8b 30                	mov    (%rax),%esi
  4016ad:	48 89 da             	mov    %rbx,%rdx
  4016b0:	bf 90 53 40 00       	mov    $0x405390,%edi
  4016b5:	b8 00 00 00 00       	mov    $0x0,%eax
  4016ba:	e8 e9 f3 ff ff       	callq  400aa8 <printf@plt>
				}
				PRINTF_INFO("=======Client: npu_vport_recv udp data end.\n");					
  4016bf:	bf b0 54 40 00       	mov    $0x4054b0,%edi
  4016c4:	e8 2f f4 ff ff       	callq  400af8 <puts@plt>
                return length;
  4016c9:	8b 45 d8             	mov    -0x28(%rbp),%eax
  4016cc:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  4016d2:	e9 ad 00 00 00       	jmpq   401784 <npu_vport_recv+0x4b4>
				
			}
		    case ATTACH_SERVER_SIG:
			{
				PRINTF_INFO("Client: Contact with server lost.\n");
  4016d7:	bf e0 54 40 00       	mov    $0x4054e0,%edi
  4016dc:	e8 17 f4 ff ff       	callq  400af8 <puts@plt>
				linx_free_buf(linx_info->linx,&sig);
  4016e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4016e5:	48 8b 38             	mov    (%rax),%rdi
  4016e8:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  4016ec:	e8 4f 33 00 00       	callq  404a40 <linx_free_buf>
			    }
				exit(1);
				#endif
				int status;
				/*restart find server process,reset the linx status*/
				g_StruClientLinxInfo.LinkStatus = SPP_NPU_LINX_DISCONNECTED;
  4016f1:	c7 05 b5 5a 20 00 02 	movl   $0x2,0x205ab5(%rip)        # 6071b0 <g_StruClientLinxInfo+0x10>
  4016f8:	00 00 00 
				status = npu_creat_linx(&g_StruClientLinxInfo.Socketfd);
  4016fb:	bf ac 71 60 00       	mov    $0x6071ac,%edi
  401700:	e8 5a 11 00 00       	callq  40285f <npu_creat_linx>
  401705:	89 45 ec             	mov    %eax,-0x14(%rbp)
				if(status!= STATUS_OK)
  401708:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  40170c:	74 0a                	je     401718 <npu_vport_recv+0x448>
				{
					exit(1);
  40170e:	bf 01 00 00 00       	mov    $0x1,%edi
  401713:	e8 f0 f3 ff ff       	callq  400b08 <exit@plt>
				}
				return 0;
  401718:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  40171f:	00 00 00 
  401722:	eb 60                	jmp    401784 <npu_vport_recv+0x4b4>
				#if 0
				printf("Client: Unexpected signal received "
					   "(sig_no = %d) - ignored\n",
					   sig->sig_no);
				#endif
				if (linx_free_buf(linx_info->linx, &sig) == -1) 
  401724:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401728:	48 8b 38             	mov    (%rax),%rdi
  40172b:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  40172f:	e8 0c 33 00 00       	callq  404a40 <linx_free_buf>
  401734:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401737:	75 41                	jne    40177a <npu_vport_recv+0x4aa>
				{
					ERR("linx_free_buf() failed");
  401739:	ba 30 01 00 00       	mov    $0x130,%edx
  40173e:	be 35 51 40 00       	mov    $0x405135,%esi
  401743:	bf 47 51 40 00       	mov    $0x405147,%edi
  401748:	b8 00 00 00 00       	mov    $0x0,%eax
  40174d:	e8 56 f3 ff ff       	callq  400aa8 <printf@plt>
  401752:	e8 91 f4 ff ff       	callq  400be8 <__errno_location@plt>
  401757:	8b 38                	mov    (%rax),%edi
  401759:	e8 4a f4 ff ff       	callq  400ba8 <strerror@plt>
  40175e:	48 89 c3             	mov    %rax,%rbx
  401761:	e8 82 f4 ff ff       	callq  400be8 <__errno_location@plt>
  401766:	8b 30                	mov    (%rax),%esi
  401768:	48 89 da             	mov    %rbx,%rdx
  40176b:	bf 90 53 40 00       	mov    $0x405390,%edi
  401770:	b8 00 00 00 00       	mov    $0x0,%eax
  401775:	e8 2e f3 ff ff       	callq  400aa8 <printf@plt>
				}
			}
			return 0;				
  40177a:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  401781:	00 00 00 
  401784:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
		}
	}
	return length;
}
  40178a:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  401791:	5b                   	pop    %rbx
  401792:	c9                   	leaveq 
  401793:	c3                   	retq   

0000000000401794 <npu_ioctrl>:

int npu_ioctrl(u32 cmd ,void *arg)
{
  401794:	55                   	push   %rbp
  401795:	48 89 e5             	mov    %rsp,%rbp
  401798:	53                   	push   %rbx
  401799:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  4017a0:	89 bd 9c fd ff ff    	mov    %edi,-0x264(%rbp)
  4017a6:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
	/* 2. resolve the arg based on it's kind,then set the related signal */

	/* 3. send it to server linx handle */

	
	switch(cmd)
  4017ad:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  4017b3:	89 85 88 fd ff ff    	mov    %eax,-0x278(%rbp)
  4017b9:	83 bd 88 fd ff ff 06 	cmpl   $0x6,-0x278(%rbp)
  4017c0:	77 1f                	ja     4017e1 <npu_ioctrl+0x4d>
  4017c2:	83 bd 88 fd ff ff 02 	cmpl   $0x2,-0x278(%rbp)
  4017c9:	0f 83 31 08 00 00    	jae    402000 <npu_ioctrl+0x86c>
  4017cf:	83 bd 88 fd ff ff 00 	cmpl   $0x0,-0x278(%rbp)
  4017d6:	0f 84 24 08 00 00    	je     402000 <npu_ioctrl+0x86c>
  4017dc:	e9 23 0f 00 00       	jmpq   402704 <npu_ioctrl+0xf70>
  4017e1:	8b 85 88 fd ff ff    	mov    -0x278(%rbp),%eax
  4017e7:	83 e8 64             	sub    $0x64,%eax
  4017ea:	83 f8 08             	cmp    $0x8,%eax
  4017ed:	0f 87 11 0f 00 00    	ja     402704 <npu_ioctrl+0xf70>
				int Socketfd;
				union LINX_SIGNAL *sig;
				union LINX_SIGNAL *replysig;
				LINX_CLINET_INFO *linx_info;
				
				status = npu_creat_linx(&Socketfd);
  4017f3:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  4017f7:	e8 63 10 00 00       	callq  40285f <npu_creat_linx>
  4017fc:	89 45 cc             	mov    %eax,-0x34(%rbp)
				if(status != STATUS_OK)
  4017ff:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  401803:	74 0e                	je     401813 <npu_ioctrl+0x7f>
				{
					return status;
  401805:	8b 45 cc             	mov    -0x34(%rbp),%eax
  401808:	89 85 8c fd ff ff    	mov    %eax,-0x274(%rbp)
  40180e:	e9 fb 0e 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}
				linx_info = npu_get_client_linx_info(Socketfd);
  401813:	8b 7d c8             	mov    -0x38(%rbp),%edi
  401816:	e8 69 15 00 00       	callq  402d84 <npu_get_client_linx_info>
  40181b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                if(cmd == NPU_SET_INITIAL_CONFIG)
  40181f:	83 bd 9c fd ff ff 64 	cmpl   $0x64,-0x264(%rbp)
  401826:	0f 85 8c 00 00 00    	jne    4018b8 <npu_ioctrl+0x124>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_SET_INITAIL_CONFIG), NPU_REQUEST_SIG);
  40182c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401830:	48 8b 38             	mov    (%rax),%rdi
  401833:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401838:	be 50 82 00 00       	mov    $0x8250,%esi
  40183d:	e8 7e 2b 00 00       	callq  4043c0 <linx_alloc>
  401842:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401846:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40184a:	48 85 c0             	test   %rax,%rax
  40184d:	75 50                	jne    40189f <npu_ioctrl+0x10b>
					{
						ERR("linx_alloc() failed\n");
  40184f:	ba 5f 01 00 00       	mov    $0x15f,%edx
  401854:	be 35 51 40 00       	mov    $0x405135,%esi
  401859:	bf 47 51 40 00       	mov    $0x405147,%edi
  40185e:	b8 00 00 00 00       	mov    $0x0,%eax
  401863:	e8 40 f2 ff ff       	callq  400aa8 <printf@plt>
  401868:	e8 7b f3 ff ff       	callq  400be8 <__errno_location@plt>
  40186d:	8b 38                	mov    (%rax),%edi
  40186f:	e8 34 f3 ff ff       	callq  400ba8 <strerror@plt>
  401874:	48 89 c3             	mov    %rax,%rbx
  401877:	e8 6c f3 ff ff       	callq  400be8 <__errno_location@plt>
  40187c:	8b 30                	mov    (%rax),%esi
  40187e:	48 89 da             	mov    %rbx,%rdx
  401881:	bf 08 55 40 00       	mov    $0x405508,%edi
  401886:	b8 00 00 00 00       	mov    $0x0,%eax
  40188b:	e8 18 f2 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401890:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401897:	ff ff ff 
  40189a:	e9 6f 0e 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_SET_INITAIL_CONFIG));
  40189f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4018a3:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  4018a7:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  4018ae:	ba 40 82 00 00       	mov    $0x8240,%edx
  4018b3:	e8 10 f3 ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_SET_FR_UPLINK_PATH_RULE)
  4018b8:	83 bd 9c fd ff ff 65 	cmpl   $0x65,-0x264(%rbp)
  4018bf:	0f 85 8c 00 00 00    	jne    401951 <npu_ioctrl+0x1bd>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_SET_FR_UPLINK_PATH_RULE), NPU_REQUEST_SIG);
  4018c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4018c9:	48 8b 38             	mov    (%rax),%rdi
  4018cc:	ba 0c 84 00 00       	mov    $0x840c,%edx
  4018d1:	be 20 00 00 00       	mov    $0x20,%esi
  4018d6:	e8 e5 2a 00 00       	callq  4043c0 <linx_alloc>
  4018db:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  4018df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4018e3:	48 85 c0             	test   %rax,%rax
  4018e6:	75 50                	jne    401938 <npu_ioctrl+0x1a4>
					{
						ERR("linx_alloc() failed\n");
  4018e8:	ba 69 01 00 00       	mov    $0x169,%edx
  4018ed:	be 35 51 40 00       	mov    $0x405135,%esi
  4018f2:	bf 47 51 40 00       	mov    $0x405147,%edi
  4018f7:	b8 00 00 00 00       	mov    $0x0,%eax
  4018fc:	e8 a7 f1 ff ff       	callq  400aa8 <printf@plt>
  401901:	e8 e2 f2 ff ff       	callq  400be8 <__errno_location@plt>
  401906:	8b 38                	mov    (%rax),%edi
  401908:	e8 9b f2 ff ff       	callq  400ba8 <strerror@plt>
  40190d:	48 89 c3             	mov    %rax,%rbx
  401910:	e8 d3 f2 ff ff       	callq  400be8 <__errno_location@plt>
  401915:	8b 30                	mov    (%rax),%esi
  401917:	48 89 da             	mov    %rbx,%rdx
  40191a:	bf 08 55 40 00       	mov    $0x405508,%edi
  40191f:	b8 00 00 00 00       	mov    $0x0,%eax
  401924:	e8 7f f1 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401929:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401930:	ff ff ff 
  401933:	e9 d6 0d 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_SET_FR_UPLINK_PATH_RULE));
  401938:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40193c:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401940:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401947:	ba 10 00 00 00       	mov    $0x10,%edx
  40194c:	e8 77 f2 ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_SET_FR_UPLINK_PATH_LINK_TABLE)
  401951:	83 bd 9c fd ff ff 67 	cmpl   $0x67,-0x264(%rbp)
  401958:	0f 85 8c 00 00 00    	jne    4019ea <npu_ioctrl+0x256>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_SET_FR_UPLINK_PATH_LINK_TABLE), NPU_REQUEST_SIG);
  40195e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401962:	48 8b 38             	mov    (%rax),%rdi
  401965:	ba 0c 84 00 00       	mov    $0x840c,%edx
  40196a:	be 18 02 00 00       	mov    $0x218,%esi
  40196f:	e8 4c 2a 00 00       	callq  4043c0 <linx_alloc>
  401974:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401978:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40197c:	48 85 c0             	test   %rax,%rax
  40197f:	75 50                	jne    4019d1 <npu_ioctrl+0x23d>
					{
						ERR("linx_alloc() failed\n");
  401981:	ba 73 01 00 00       	mov    $0x173,%edx
  401986:	be 35 51 40 00       	mov    $0x405135,%esi
  40198b:	bf 47 51 40 00       	mov    $0x405147,%edi
  401990:	b8 00 00 00 00       	mov    $0x0,%eax
  401995:	e8 0e f1 ff ff       	callq  400aa8 <printf@plt>
  40199a:	e8 49 f2 ff ff       	callq  400be8 <__errno_location@plt>
  40199f:	8b 38                	mov    (%rax),%edi
  4019a1:	e8 02 f2 ff ff       	callq  400ba8 <strerror@plt>
  4019a6:	48 89 c3             	mov    %rax,%rbx
  4019a9:	e8 3a f2 ff ff       	callq  400be8 <__errno_location@plt>
  4019ae:	8b 30                	mov    (%rax),%esi
  4019b0:	48 89 da             	mov    %rbx,%rdx
  4019b3:	bf 08 55 40 00       	mov    $0x405508,%edi
  4019b8:	b8 00 00 00 00       	mov    $0x0,%eax
  4019bd:	e8 e6 f0 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  4019c2:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  4019c9:	ff ff ff 
  4019cc:	e9 3d 0d 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_SET_FR_UPLINK_PATH_LINK_TABLE));
  4019d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4019d5:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  4019d9:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  4019e0:	ba 08 02 00 00       	mov    $0x208,%edx
  4019e5:	e8 de f1 ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_DELETE_FR_UPLINK_PATH_RULE)
  4019ea:	83 bd 9c fd ff ff 66 	cmpl   $0x66,-0x264(%rbp)
  4019f1:	0f 85 8c 00 00 00    	jne    401a83 <npu_ioctrl+0x2ef>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_DELETE_FR_UPLINK_PATH_RULE), NPU_REQUEST_SIG);
  4019f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4019fb:	48 8b 38             	mov    (%rax),%rdi
  4019fe:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401a03:	be 1c 00 00 00       	mov    $0x1c,%esi
  401a08:	e8 b3 29 00 00       	callq  4043c0 <linx_alloc>
  401a0d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401a11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401a15:	48 85 c0             	test   %rax,%rax
  401a18:	75 50                	jne    401a6a <npu_ioctrl+0x2d6>
					{
						ERR("linx_alloc() failed\n");
  401a1a:	ba 7d 01 00 00       	mov    $0x17d,%edx
  401a1f:	be 35 51 40 00       	mov    $0x405135,%esi
  401a24:	bf 47 51 40 00       	mov    $0x405147,%edi
  401a29:	b8 00 00 00 00       	mov    $0x0,%eax
  401a2e:	e8 75 f0 ff ff       	callq  400aa8 <printf@plt>
  401a33:	e8 b0 f1 ff ff       	callq  400be8 <__errno_location@plt>
  401a38:	8b 38                	mov    (%rax),%edi
  401a3a:	e8 69 f1 ff ff       	callq  400ba8 <strerror@plt>
  401a3f:	48 89 c3             	mov    %rax,%rbx
  401a42:	e8 a1 f1 ff ff       	callq  400be8 <__errno_location@plt>
  401a47:	8b 30                	mov    (%rax),%esi
  401a49:	48 89 da             	mov    %rbx,%rdx
  401a4c:	bf 08 55 40 00       	mov    $0x405508,%edi
  401a51:	b8 00 00 00 00       	mov    $0x0,%eax
  401a56:	e8 4d f0 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401a5b:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401a62:	ff ff ff 
  401a65:	e9 a4 0c 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_DELETE_FR_UPLINK_PATH_RULE));
  401a6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401a6e:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401a72:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401a79:	ba 0c 00 00 00       	mov    $0xc,%edx
  401a7e:	e8 45 f1 ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_SET_FR_DOWNLINK_PATH_LINK_TABLE)
  401a83:	83 bd 9c fd ff ff 6c 	cmpl   $0x6c,-0x264(%rbp)
  401a8a:	0f 85 8c 00 00 00    	jne    401b1c <npu_ioctrl+0x388>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_SET_FR_DOWNLINK_PATH_LINK_TABLE), NPU_REQUEST_SIG);
  401a90:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401a94:	48 8b 38             	mov    (%rax),%rdi
  401a97:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401a9c:	be 98 00 00 00       	mov    $0x98,%esi
  401aa1:	e8 1a 29 00 00       	callq  4043c0 <linx_alloc>
  401aa6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401aaa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401aae:	48 85 c0             	test   %rax,%rax
  401ab1:	75 50                	jne    401b03 <npu_ioctrl+0x36f>
					{
						ERR("linx_alloc() failed\n");
  401ab3:	ba 87 01 00 00       	mov    $0x187,%edx
  401ab8:	be 35 51 40 00       	mov    $0x405135,%esi
  401abd:	bf 47 51 40 00       	mov    $0x405147,%edi
  401ac2:	b8 00 00 00 00       	mov    $0x0,%eax
  401ac7:	e8 dc ef ff ff       	callq  400aa8 <printf@plt>
  401acc:	e8 17 f1 ff ff       	callq  400be8 <__errno_location@plt>
  401ad1:	8b 38                	mov    (%rax),%edi
  401ad3:	e8 d0 f0 ff ff       	callq  400ba8 <strerror@plt>
  401ad8:	48 89 c3             	mov    %rax,%rbx
  401adb:	e8 08 f1 ff ff       	callq  400be8 <__errno_location@plt>
  401ae0:	8b 30                	mov    (%rax),%esi
  401ae2:	48 89 da             	mov    %rbx,%rdx
  401ae5:	bf 08 55 40 00       	mov    $0x405508,%edi
  401aea:	b8 00 00 00 00       	mov    $0x0,%eax
  401aef:	e8 b4 ef ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401af4:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401afb:	ff ff ff 
  401afe:	e9 0b 0c 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_SET_FR_DOWNLINK_PATH_LINK_TABLE));
  401b03:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401b07:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401b0b:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401b12:	ba 88 00 00 00       	mov    $0x88,%edx
  401b17:	e8 ac f0 ff ff       	callq  400bc8 <memcpy@plt>
				}				
                if(cmd == NPU_SET_FR_DOWNLINK_PATH_RULE)
  401b1c:	83 bd 9c fd ff ff 6a 	cmpl   $0x6a,-0x264(%rbp)
  401b23:	0f 85 8c 00 00 00    	jne    401bb5 <npu_ioctrl+0x421>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_SET_FR_DOWNLINK_PATH_RULE), NPU_REQUEST_SIG);
  401b29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401b2d:	48 8b 38             	mov    (%rax),%rdi
  401b30:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401b35:	be 1c 00 00 00       	mov    $0x1c,%esi
  401b3a:	e8 81 28 00 00       	callq  4043c0 <linx_alloc>
  401b3f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401b43:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401b47:	48 85 c0             	test   %rax,%rax
  401b4a:	75 50                	jne    401b9c <npu_ioctrl+0x408>
					{
						ERR("linx_alloc() failed\n");
  401b4c:	ba 91 01 00 00       	mov    $0x191,%edx
  401b51:	be 35 51 40 00       	mov    $0x405135,%esi
  401b56:	bf 47 51 40 00       	mov    $0x405147,%edi
  401b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  401b60:	e8 43 ef ff ff       	callq  400aa8 <printf@plt>
  401b65:	e8 7e f0 ff ff       	callq  400be8 <__errno_location@plt>
  401b6a:	8b 38                	mov    (%rax),%edi
  401b6c:	e8 37 f0 ff ff       	callq  400ba8 <strerror@plt>
  401b71:	48 89 c3             	mov    %rax,%rbx
  401b74:	e8 6f f0 ff ff       	callq  400be8 <__errno_location@plt>
  401b79:	8b 30                	mov    (%rax),%esi
  401b7b:	48 89 da             	mov    %rbx,%rdx
  401b7e:	bf 08 55 40 00       	mov    $0x405508,%edi
  401b83:	b8 00 00 00 00       	mov    $0x0,%eax
  401b88:	e8 1b ef ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401b8d:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401b94:	ff ff ff 
  401b97:	e9 72 0b 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_SET_FR_DOWNLINK_PATH_RULE));
  401b9c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401ba0:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401ba4:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401bab:	ba 0c 00 00 00       	mov    $0xc,%edx
  401bb0:	e8 13 f0 ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_DELETE_FR_DOWNLINK_PATH_RULE)
  401bb5:	83 bd 9c fd ff ff 6b 	cmpl   $0x6b,-0x264(%rbp)
  401bbc:	0f 85 8c 00 00 00    	jne    401c4e <npu_ioctrl+0x4ba>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_DELETE_FR_DOWNLINK_PATH_RULE), NPU_REQUEST_SIG);
  401bc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401bc6:	48 8b 38             	mov    (%rax),%rdi
  401bc9:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401bce:	be 18 00 00 00       	mov    $0x18,%esi
  401bd3:	e8 e8 27 00 00       	callq  4043c0 <linx_alloc>
  401bd8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401bdc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401be0:	48 85 c0             	test   %rax,%rax
  401be3:	75 50                	jne    401c35 <npu_ioctrl+0x4a1>
					{
						ERR("linx_alloc() failed\n");
  401be5:	ba 9b 01 00 00       	mov    $0x19b,%edx
  401bea:	be 35 51 40 00       	mov    $0x405135,%esi
  401bef:	bf 47 51 40 00       	mov    $0x405147,%edi
  401bf4:	b8 00 00 00 00       	mov    $0x0,%eax
  401bf9:	e8 aa ee ff ff       	callq  400aa8 <printf@plt>
  401bfe:	e8 e5 ef ff ff       	callq  400be8 <__errno_location@plt>
  401c03:	8b 38                	mov    (%rax),%edi
  401c05:	e8 9e ef ff ff       	callq  400ba8 <strerror@plt>
  401c0a:	48 89 c3             	mov    %rax,%rbx
  401c0d:	e8 d6 ef ff ff       	callq  400be8 <__errno_location@plt>
  401c12:	8b 30                	mov    (%rax),%esi
  401c14:	48 89 da             	mov    %rbx,%rdx
  401c17:	bf 08 55 40 00       	mov    $0x405508,%edi
  401c1c:	b8 00 00 00 00       	mov    $0x0,%eax
  401c21:	e8 82 ee ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401c26:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401c2d:	ff ff ff 
  401c30:	e9 d9 0a 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_DELETE_FR_DOWNLINK_PATH_RULE));
  401c35:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401c39:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401c3d:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401c44:	ba 08 00 00 00       	mov    $0x8,%edx
  401c49:	e8 7a ef ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_SET_UPDATE_BVCI_PATH_RULE)
  401c4e:	83 bd 9c fd ff ff 68 	cmpl   $0x68,-0x264(%rbp)
  401c55:	0f 85 8c 00 00 00    	jne    401ce7 <npu_ioctrl+0x553>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_SET_UPDATE_BVCI_PATH_RULE), NPU_REQUEST_SIG);
  401c5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401c5f:	48 8b 38             	mov    (%rax),%rdi
  401c62:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401c67:	be 1c 00 00 00       	mov    $0x1c,%esi
  401c6c:	e8 4f 27 00 00       	callq  4043c0 <linx_alloc>
  401c71:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401c75:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401c79:	48 85 c0             	test   %rax,%rax
  401c7c:	75 50                	jne    401cce <npu_ioctrl+0x53a>
					{
						ERR("linx_alloc() failed\n");
  401c7e:	ba a5 01 00 00       	mov    $0x1a5,%edx
  401c83:	be 35 51 40 00       	mov    $0x405135,%esi
  401c88:	bf 47 51 40 00       	mov    $0x405147,%edi
  401c8d:	b8 00 00 00 00       	mov    $0x0,%eax
  401c92:	e8 11 ee ff ff       	callq  400aa8 <printf@plt>
  401c97:	e8 4c ef ff ff       	callq  400be8 <__errno_location@plt>
  401c9c:	8b 38                	mov    (%rax),%edi
  401c9e:	e8 05 ef ff ff       	callq  400ba8 <strerror@plt>
  401ca3:	48 89 c3             	mov    %rax,%rbx
  401ca6:	e8 3d ef ff ff       	callq  400be8 <__errno_location@plt>
  401cab:	8b 30                	mov    (%rax),%esi
  401cad:	48 89 da             	mov    %rbx,%rdx
  401cb0:	bf 08 55 40 00       	mov    $0x405508,%edi
  401cb5:	b8 00 00 00 00       	mov    $0x0,%eax
  401cba:	e8 e9 ed ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401cbf:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401cc6:	ff ff ff 
  401cc9:	e9 40 0a 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_SET_UPDATE_BVCI_PATH_RULE));
  401cce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401cd2:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401cd6:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401cdd:	ba 0c 00 00 00       	mov    $0xc,%edx
  401ce2:	e8 e1 ee ff ff       	callq  400bc8 <memcpy@plt>
				}
                if(cmd == NPU_DELETE_UPDATE_BVCI_PATH_RULE)
  401ce7:	83 bd 9c fd ff ff 69 	cmpl   $0x69,-0x264(%rbp)
  401cee:	0f 85 8c 00 00 00    	jne    401d80 <npu_ioctrl+0x5ec>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(STRU_DELETE_UPDATE_BVCI_PATH_RULE), NPU_REQUEST_SIG);
  401cf4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401cf8:	48 8b 38             	mov    (%rax),%rdi
  401cfb:	ba 0c 84 00 00       	mov    $0x840c,%edx
  401d00:	be 1c 00 00 00       	mov    $0x1c,%esi
  401d05:	e8 b6 26 00 00       	callq  4043c0 <linx_alloc>
  401d0a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					if (sig == NULL) 
  401d0e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401d12:	48 85 c0             	test   %rax,%rax
  401d15:	75 50                	jne    401d67 <npu_ioctrl+0x5d3>
					{
						ERR("linx_alloc() failed\n");
  401d17:	ba af 01 00 00       	mov    $0x1af,%edx
  401d1c:	be 35 51 40 00       	mov    $0x405135,%esi
  401d21:	bf 47 51 40 00       	mov    $0x405147,%edi
  401d26:	b8 00 00 00 00       	mov    $0x0,%eax
  401d2b:	e8 78 ed ff ff       	callq  400aa8 <printf@plt>
  401d30:	e8 b3 ee ff ff       	callq  400be8 <__errno_location@plt>
  401d35:	8b 38                	mov    (%rax),%edi
  401d37:	e8 6c ee ff ff       	callq  400ba8 <strerror@plt>
  401d3c:	48 89 c3             	mov    %rax,%rbx
  401d3f:	e8 a4 ee ff ff       	callq  400be8 <__errno_location@plt>
  401d44:	8b 30                	mov    (%rax),%esi
  401d46:	48 89 da             	mov    %rbx,%rdx
  401d49:	bf 08 55 40 00       	mov    $0x405508,%edi
  401d4e:	b8 00 00 00 00       	mov    $0x0,%eax
  401d53:	e8 50 ed ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  401d58:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  401d5f:	ff ff ff 
  401d62:	e9 a7 09 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					memcpy(sig->npu_request.pargv,arg,sizeof(STRU_DELETE_UPDATE_BVCI_PATH_RULE));
  401d67:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401d6b:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  401d6f:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
  401d76:	ba 0c 00 00 00       	mov    $0xc,%edx
  401d7b:	e8 48 ee ff ff       	callq  400bc8 <memcpy@plt>
				}

				sig->npu_request.cmdType = NPU_SET_REQUEST_TYPE;
  401d80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  401d84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
				sig->npu_request.cmd = cmd;
  401d8b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  401d8f:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  401d95:	89 42 04             	mov    %eax,0x4(%rdx)
				if (linx_send(linx_info->linx, &sig, linx_info->server) == -1) 
  401d98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401d9c:	8b 50 14             	mov    0x14(%rax),%edx
  401d9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401da3:	48 8b 38             	mov    (%rax),%rdi
  401da6:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  401daa:	e8 d1 2b 00 00       	callq  404980 <linx_send>
  401daf:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401db2:	75 50                	jne    401e04 <npu_ioctrl+0x670>
				{
					ERR("linx_send() failed");
  401db4:	ba b9 01 00 00       	mov    $0x1b9,%edx
  401db9:	be 35 51 40 00       	mov    $0x405135,%esi
  401dbe:	bf 47 51 40 00       	mov    $0x405147,%edi
  401dc3:	b8 00 00 00 00       	mov    $0x0,%eax
  401dc8:	e8 db ec ff ff       	callq  400aa8 <printf@plt>
  401dcd:	e8 16 ee ff ff       	callq  400be8 <__errno_location@plt>
  401dd2:	8b 38                	mov    (%rax),%edi
  401dd4:	e8 cf ed ff ff       	callq  400ba8 <strerror@plt>
  401dd9:	48 89 c3             	mov    %rax,%rbx
  401ddc:	e8 07 ee ff ff       	callq  400be8 <__errno_location@plt>
  401de1:	8b 30                	mov    (%rax),%esi
  401de3:	48 89 da             	mov    %rbx,%rdx
  401de6:	bf 80 51 40 00       	mov    $0x405180,%edi
  401deb:	b8 00 00 00 00       	mov    $0x0,%eax
  401df0:	e8 b3 ec ff ff       	callq  400aa8 <printf@plt>
					return ERR_LINX_SEND;
  401df5:	c7 85 8c fd ff ff f6 	movl   $0xfffffff6,-0x274(%rbp)
  401dfc:	ff ff ff 
  401dff:	e9 0a 09 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}

				LINX_SIGSELECT sigsel_any[] = { 1, NPU_SET_REQUEST_ACK_SIG};
  401e04:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
  401e0b:	c7 45 b4 0d 84 00 00 	movl   $0x840d,-0x4c(%rbp)
				/*initial maybe take a long time*/
                if(cmd == NPU_SET_INITIAL_CONFIG)
  401e12:	83 bd 9c fd ff ff 64 	cmpl   $0x64,-0x264(%rbp)
  401e19:	75 6d                	jne    401e88 <npu_ioctrl+0x6f4>
                {
					if (linx_receive(linx_info->linx, &replysig, sigsel_any) == -1)
  401e1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401e1f:	48 8b 38             	mov    (%rax),%rdi
  401e22:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  401e26:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  401e2a:	e8 61 2e 00 00       	callq  404c90 <linx_receive>
  401e2f:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401e32:	0f 85 be 00 00 00    	jne    401ef6 <npu_ioctrl+0x762>
					{
						ERR("linx_receive_w_tmo() failed");
  401e38:	ba c3 01 00 00       	mov    $0x1c3,%edx
  401e3d:	be 35 51 40 00       	mov    $0x405135,%esi
  401e42:	bf 47 51 40 00       	mov    $0x405147,%edi
  401e47:	b8 00 00 00 00       	mov    $0x0,%eax
  401e4c:	e8 57 ec ff ff       	callq  400aa8 <printf@plt>
  401e51:	e8 92 ed ff ff       	callq  400be8 <__errno_location@plt>
  401e56:	8b 38                	mov    (%rax),%edi
  401e58:	e8 4b ed ff ff       	callq  400ba8 <strerror@plt>
  401e5d:	48 89 c3             	mov    %rax,%rbx
  401e60:	e8 83 ed ff ff       	callq  400be8 <__errno_location@plt>
  401e65:	8b 30                	mov    (%rax),%esi
  401e67:	48 89 da             	mov    %rbx,%rdx
  401e6a:	bf 30 55 40 00       	mov    $0x405530,%edi
  401e6f:	b8 00 00 00 00       	mov    $0x0,%eax
  401e74:	e8 2f ec ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_RCV_TMOUT;
  401e79:	c7 85 8c fd ff ff fc 	movl   $0xfffffffc,-0x274(%rbp)
  401e80:	ff ff ff 
  401e83:	e9 86 08 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					}

				}
				else
				{
					if (linx_receive_w_tmo(linx_info->linx, &replysig, NPU_RECEIVE_IOCTL_TIMEOUT, sigsel_any) == -1)
  401e88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401e8c:	48 8b 38             	mov    (%rax),%rdi
  401e8f:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  401e93:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  401e97:	ba 2c 01 00 00       	mov    $0x12c,%edx
  401e9c:	e8 cf 2d 00 00       	callq  404c70 <linx_receive_w_tmo>
  401ea1:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401ea4:	75 50                	jne    401ef6 <npu_ioctrl+0x762>
					{
						ERR("linx_receive_w_tmo() failed");
  401ea6:	ba cc 01 00 00       	mov    $0x1cc,%edx
  401eab:	be 35 51 40 00       	mov    $0x405135,%esi
  401eb0:	bf 47 51 40 00       	mov    $0x405147,%edi
  401eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  401eba:	e8 e9 eb ff ff       	callq  400aa8 <printf@plt>
  401ebf:	e8 24 ed ff ff       	callq  400be8 <__errno_location@plt>
  401ec4:	8b 38                	mov    (%rax),%edi
  401ec6:	e8 dd ec ff ff       	callq  400ba8 <strerror@plt>
  401ecb:	48 89 c3             	mov    %rax,%rbx
  401ece:	e8 15 ed ff ff       	callq  400be8 <__errno_location@plt>
  401ed3:	8b 30                	mov    (%rax),%esi
  401ed5:	48 89 da             	mov    %rbx,%rdx
  401ed8:	bf 30 55 40 00       	mov    $0x405530,%edi
  401edd:	b8 00 00 00 00       	mov    $0x0,%eax
  401ee2:	e8 c1 eb ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_RCV_TMOUT;
  401ee7:	c7 85 8c fd ff ff fc 	movl   $0xfffffffc,-0x274(%rbp)
  401eee:	ff ff ff 
  401ef1:	e9 18 08 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					}

				}
				if (replysig == LINX_NIL) 
  401ef6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401efa:	48 85 c0             	test   %rax,%rax
  401efd:	75 19                	jne    401f18 <npu_ioctrl+0x784>
				{	
					PRINTF_INFO("ioctrl set receive from server timed out.\n" );		
  401eff:	bf 60 55 40 00       	mov    $0x405560,%edi
  401f04:	e8 ef eb ff ff       	callq  400af8 <puts@plt>
				
					return ERR_LINX_RSV_TMOUT;
  401f09:	c7 85 8c fd ff ff f2 	movl   $0xfffffff2,-0x274(%rbp)
  401f10:	ff ff ff 
  401f13:	e9 f6 07 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}
				else
				{
				
					int result = replysig->npu_set_request_ack.result;
  401f18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401f1c:	8b 40 04             	mov    0x4(%rax),%eax
  401f1f:	89 45 d8             	mov    %eax,-0x28(%rbp)
					if(result == STATUS_OK)
  401f22:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  401f26:	75 24                	jne    401f4c <npu_ioctrl+0x7b8>
					{
						PRINTF_INFO("set succsss!\n");
  401f28:	bf 8a 55 40 00       	mov    $0x40558a,%edi
  401f2d:	e8 c6 eb ff ff       	callq  400af8 <puts@plt>
							ERR("linx_free_buf() failed");
						}
						return result;
					}
					
					if(linx_free_buf(linx_info->linx,&replysig) == -1)
  401f32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401f36:	48 8b 38             	mov    (%rax),%rdi
  401f39:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  401f3d:	e8 fe 2a 00 00       	callq  404a40 <linx_free_buf>
  401f42:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401f45:	74 73                	je     401fba <npu_ioctrl+0x826>
  401f47:	e9 b8 07 00 00       	jmpq   402704 <npu_ioctrl+0xf70>
					{
						PRINTF_INFO("set succsss!\n");
					}
					else
					{
						PRINTF_INFO("set failed!\n");
  401f4c:	bf 97 55 40 00       	mov    $0x405597,%edi
  401f51:	e8 a2 eb ff ff       	callq  400af8 <puts@plt>
						if(linx_free_buf(linx_info->linx,&replysig) == -1)
  401f56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401f5a:	48 8b 38             	mov    (%rax),%rdi
  401f5d:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  401f61:	e8 da 2a 00 00       	callq  404a40 <linx_free_buf>
  401f66:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  401f69:	75 41                	jne    401fac <npu_ioctrl+0x818>
						{
							ERR("linx_free_buf() failed");
  401f6b:	ba e4 01 00 00       	mov    $0x1e4,%edx
  401f70:	be 35 51 40 00       	mov    $0x405135,%esi
  401f75:	bf 47 51 40 00       	mov    $0x405147,%edi
  401f7a:	b8 00 00 00 00       	mov    $0x0,%eax
  401f7f:	e8 24 eb ff ff       	callq  400aa8 <printf@plt>
  401f84:	e8 5f ec ff ff       	callq  400be8 <__errno_location@plt>
  401f89:	8b 38                	mov    (%rax),%edi
  401f8b:	e8 18 ec ff ff       	callq  400ba8 <strerror@plt>
  401f90:	48 89 c3             	mov    %rax,%rbx
  401f93:	e8 50 ec ff ff       	callq  400be8 <__errno_location@plt>
  401f98:	8b 30                	mov    (%rax),%esi
  401f9a:	48 89 da             	mov    %rbx,%rdx
  401f9d:	bf 90 53 40 00       	mov    $0x405390,%edi
  401fa2:	b8 00 00 00 00       	mov    $0x0,%eax
  401fa7:	e8 fc ea ff ff       	callq  400aa8 <printf@plt>
						}
						return result;
  401fac:	8b 45 d8             	mov    -0x28(%rbp),%eax
  401faf:	89 85 8c fd ff ff    	mov    %eax,-0x274(%rbp)
  401fb5:	e9 54 07 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					}
					
					if(linx_free_buf(linx_info->linx,&replysig) == -1)
					{
						ERR("linx_free_buf() failed");
  401fba:	ba eb 01 00 00       	mov    $0x1eb,%edx
  401fbf:	be 35 51 40 00       	mov    $0x405135,%esi
  401fc4:	bf 47 51 40 00       	mov    $0x405147,%edi
  401fc9:	b8 00 00 00 00       	mov    $0x0,%eax
  401fce:	e8 d5 ea ff ff       	callq  400aa8 <printf@plt>
  401fd3:	e8 10 ec ff ff       	callq  400be8 <__errno_location@plt>
  401fd8:	8b 38                	mov    (%rax),%edi
  401fda:	e8 c9 eb ff ff       	callq  400ba8 <strerror@plt>
  401fdf:	48 89 c3             	mov    %rax,%rbx
  401fe2:	e8 01 ec ff ff       	callq  400be8 <__errno_location@plt>
  401fe7:	8b 30                	mov    (%rax),%esi
  401fe9:	48 89 da             	mov    %rbx,%rdx
  401fec:	bf 90 53 40 00       	mov    $0x405390,%edi
  401ff1:	b8 00 00 00 00       	mov    $0x0,%eax
  401ff6:	e8 ad ea ff ff       	callq  400aa8 <printf@plt>
  401ffb:	e9 04 07 00 00       	jmpq   402704 <npu_ioctrl+0xf70>
				int Socketfd;
				union LINX_SIGNAL *sig;
				union LINX_SIGNAL *replysig;
				LINX_CLINET_INFO *linx_info;
				
				status = npu_creat_linx(&Socketfd);
  402000:	48 8d 7d ac          	lea    -0x54(%rbp),%rdi
  402004:	e8 56 08 00 00       	callq  40285f <npu_creat_linx>
  402009:	89 45 dc             	mov    %eax,-0x24(%rbp)
				if(status != STATUS_OK)
  40200c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  402010:	74 0e                	je     402020 <npu_ioctrl+0x88c>
				{
					return status;
  402012:	8b 45 dc             	mov    -0x24(%rbp),%eax
  402015:	89 85 8c fd ff ff    	mov    %eax,-0x274(%rbp)
  40201b:	e9 ee 06 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}
				linx_info = npu_get_client_linx_info(Socketfd);
  402020:	8b 7d ac             	mov    -0x54(%rbp),%edi
  402023:	e8 5c 0d 00 00       	callq  402d84 <npu_get_client_linx_info>
  402028:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                
                if(NPU_GET_ETH_STATICS == cmd)
  40202c:	83 bd 9c fd ff ff 00 	cmpl   $0x0,-0x264(%rbp)
  402033:	0f 85 b3 00 00 00    	jne    4020ec <npu_ioctrl+0x958>
                {
                
    				STRU_GET_ETH_STATICS stru_get_eth_statics;

					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(stru_get_eth_statics)-sizeof(STRU_ETH_STATICS), NPU_REQUEST_SIG);
  402039:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40203d:	48 8b 38             	mov    (%rax),%rdi
  402040:	ba 0c 84 00 00       	mov    $0x840c,%edx
  402045:	be 18 00 00 00       	mov    $0x18,%esi
  40204a:	e8 71 23 00 00       	callq  4043c0 <linx_alloc>
  40204f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					if (sig == NULL) 
  402053:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402057:	48 85 c0             	test   %rax,%rax
  40205a:	75 50                	jne    4020ac <npu_ioctrl+0x918>
					{
						ERR("linx_alloc() failed\n");
  40205c:	ba 0c 02 00 00       	mov    $0x20c,%edx
  402061:	be 35 51 40 00       	mov    $0x405135,%esi
  402066:	bf 47 51 40 00       	mov    $0x405147,%edi
  40206b:	b8 00 00 00 00       	mov    $0x0,%eax
  402070:	e8 33 ea ff ff       	callq  400aa8 <printf@plt>
  402075:	e8 6e eb ff ff       	callq  400be8 <__errno_location@plt>
  40207a:	8b 38                	mov    (%rax),%edi
  40207c:	e8 27 eb ff ff       	callq  400ba8 <strerror@plt>
  402081:	48 89 c3             	mov    %rax,%rbx
  402084:	e8 5f eb ff ff       	callq  400be8 <__errno_location@plt>
  402089:	8b 30                	mov    (%rax),%esi
  40208b:	48 89 da             	mov    %rbx,%rdx
  40208e:	bf 08 55 40 00       	mov    $0x405508,%edi
  402093:	b8 00 00 00 00       	mov    $0x0,%eax
  402098:	e8 0b ea ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  40209d:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  4020a4:	ff ff ff 
  4020a7:	e9 62 06 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					/*fill info struct*/
					stru_get_eth_statics.EthNumber = ((STRU_GET_ETH_STATICS *)arg)->EthNumber;
  4020ac:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4020b3:	8b 00                	mov    (%rax),%eax
  4020b5:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)
					sig->npu_request.cmdType = NPU_GET_REQUEST_TYPE;
  4020bb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4020bf:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
					sig->npu_request.cmd = cmd;
  4020c6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4020ca:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  4020d0:	89 42 04             	mov    %eax,0x4(%rdx)
					memcpy(sig->npu_request.pargv,(void *)&stru_get_eth_statics,sizeof(stru_get_eth_statics)-sizeof(STRU_ETH_STATICS));
  4020d3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4020d7:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  4020db:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
  4020e2:	ba 08 00 00 00       	mov    $0x8,%edx
  4020e7:	e8 dc ea ff ff       	callq  400bc8 <memcpy@plt>
				}
				
                if(NPU_GET_UPI_STATICS == cmd)
  4020ec:	83 bd 9c fd ff ff 02 	cmpl   $0x2,-0x264(%rbp)
  4020f3:	0f 85 b3 00 00 00    	jne    4021ac <npu_ioctrl+0xa18>
                {
					STRU_GET_UPI_STATICS stru_get_upi_statics;
					
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(stru_get_upi_statics)-sizeof(STRU_UPI_STATICS), NPU_REQUEST_SIG);
  4020f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4020fd:	48 8b 38             	mov    (%rax),%rdi
  402100:	ba 0c 84 00 00       	mov    $0x840c,%edx
  402105:	be 18 00 00 00       	mov    $0x18,%esi
  40210a:	e8 b1 22 00 00       	callq  4043c0 <linx_alloc>
  40210f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					if (sig == NULL) 
  402113:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402117:	48 85 c0             	test   %rax,%rax
  40211a:	75 50                	jne    40216c <npu_ioctrl+0x9d8>
					{
						ERR("linx_alloc() failed\n");
  40211c:	ba 1d 02 00 00       	mov    $0x21d,%edx
  402121:	be 35 51 40 00       	mov    $0x405135,%esi
  402126:	bf 47 51 40 00       	mov    $0x405147,%edi
  40212b:	b8 00 00 00 00       	mov    $0x0,%eax
  402130:	e8 73 e9 ff ff       	callq  400aa8 <printf@plt>
  402135:	e8 ae ea ff ff       	callq  400be8 <__errno_location@plt>
  40213a:	8b 38                	mov    (%rax),%edi
  40213c:	e8 67 ea ff ff       	callq  400ba8 <strerror@plt>
  402141:	48 89 c3             	mov    %rax,%rbx
  402144:	e8 9f ea ff ff       	callq  400be8 <__errno_location@plt>
  402149:	8b 30                	mov    (%rax),%esi
  40214b:	48 89 da             	mov    %rbx,%rdx
  40214e:	bf 08 55 40 00       	mov    $0x405508,%edi
  402153:	b8 00 00 00 00       	mov    $0x0,%eax
  402158:	e8 4b e9 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  40215d:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  402164:	ff ff ff 
  402167:	e9 a2 05 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					/*fill info struct*/
					stru_get_upi_statics.trunkid= ((STRU_GET_UPI_STATICS *)arg)->trunkid;
  40216c:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  402173:	8b 00                	mov    (%rax),%eax
  402175:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)
					sig->npu_request.cmdType = NPU_GET_REQUEST_TYPE;
  40217b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40217f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
					sig->npu_request.cmd = cmd;
  402186:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40218a:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  402190:	89 42 04             	mov    %eax,0x4(%rdx)
					memcpy(sig->npu_request.pargv,(void *)&stru_get_upi_statics,sizeof(stru_get_upi_statics)-sizeof(STRU_UPI_STATICS));
  402193:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402197:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  40219b:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
  4021a2:	ba 08 00 00 00       	mov    $0x8,%edx
  4021a7:	e8 1c ea ff ff       	callq  400bc8 <memcpy@plt>
				}
				
                if(NPU_GET_RXFR_STATICS == cmd)
  4021ac:	83 bd 9c fd ff ff 03 	cmpl   $0x3,-0x264(%rbp)
  4021b3:	0f 85 b3 00 00 00    	jne    40226c <npu_ioctrl+0xad8>
                {
					STRU_GET_RXFR_STATICS stru_get_rxfr_statics;
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(stru_get_rxfr_statics)-sizeof(STRU_RXFR_STATICS), NPU_REQUEST_SIG);
  4021b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4021bd:	48 8b 38             	mov    (%rax),%rdi
  4021c0:	ba 0c 84 00 00       	mov    $0x840c,%edx
  4021c5:	be 18 00 00 00       	mov    $0x18,%esi
  4021ca:	e8 f1 21 00 00       	callq  4043c0 <linx_alloc>
  4021cf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					if (sig == NULL) 
  4021d3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4021d7:	48 85 c0             	test   %rax,%rax
  4021da:	75 50                	jne    40222c <npu_ioctrl+0xa98>
					{
						ERR("linx_alloc() failed\n");
  4021dc:	ba 2d 02 00 00       	mov    $0x22d,%edx
  4021e1:	be 35 51 40 00       	mov    $0x405135,%esi
  4021e6:	bf 47 51 40 00       	mov    $0x405147,%edi
  4021eb:	b8 00 00 00 00       	mov    $0x0,%eax
  4021f0:	e8 b3 e8 ff ff       	callq  400aa8 <printf@plt>
  4021f5:	e8 ee e9 ff ff       	callq  400be8 <__errno_location@plt>
  4021fa:	8b 38                	mov    (%rax),%edi
  4021fc:	e8 a7 e9 ff ff       	callq  400ba8 <strerror@plt>
  402201:	48 89 c3             	mov    %rax,%rbx
  402204:	e8 df e9 ff ff       	callq  400be8 <__errno_location@plt>
  402209:	8b 30                	mov    (%rax),%esi
  40220b:	48 89 da             	mov    %rbx,%rdx
  40220e:	bf 08 55 40 00       	mov    $0x405508,%edi
  402213:	b8 00 00 00 00       	mov    $0x0,%eax
  402218:	e8 8b e8 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  40221d:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  402224:	ff ff ff 
  402227:	e9 e2 04 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					/*fill info struct*/
					stru_get_rxfr_statics.vfport = ((STRU_GET_RXFR_STATICS *)arg)->vfport;
  40222c:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  402233:	8b 00                	mov    (%rax),%eax
  402235:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)
					sig->npu_request.cmdType = NPU_GET_REQUEST_TYPE;
  40223b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40223f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
					sig->npu_request.cmd = cmd;
  402246:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40224a:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  402250:	89 42 04             	mov    %eax,0x4(%rdx)
					memcpy(sig->npu_request.pargv,(void *)&stru_get_rxfr_statics,sizeof(stru_get_rxfr_statics)-sizeof(STRU_RXFR_STATICS));
  402253:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402257:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  40225b:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
  402262:	ba 08 00 00 00       	mov    $0x8,%edx
  402267:	e8 5c e9 ff ff       	callq  400bc8 <memcpy@plt>
				}

				
                if(NPU_GET_TXFR_STATICS == cmd)
  40226c:	83 bd 9c fd ff ff 04 	cmpl   $0x4,-0x264(%rbp)
  402273:	0f 85 b3 00 00 00    	jne    40232c <npu_ioctrl+0xb98>
                {
					STRU_GET_TXFR_STATICS stru_get_txfr_statics;
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig) + sizeof(stru_get_txfr_statics)-sizeof(STRU_TXFR_STATICS), NPU_REQUEST_SIG);
  402279:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40227d:	48 8b 38             	mov    (%rax),%rdi
  402280:	ba 0c 84 00 00       	mov    $0x840c,%edx
  402285:	be 18 00 00 00       	mov    $0x18,%esi
  40228a:	e8 31 21 00 00       	callq  4043c0 <linx_alloc>
  40228f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					if (sig == NULL) 
  402293:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402297:	48 85 c0             	test   %rax,%rax
  40229a:	75 50                	jne    4022ec <npu_ioctrl+0xb58>
					{
						ERR("linx_alloc() failed\n");
  40229c:	ba 3e 02 00 00       	mov    $0x23e,%edx
  4022a1:	be 35 51 40 00       	mov    $0x405135,%esi
  4022a6:	bf 47 51 40 00       	mov    $0x405147,%edi
  4022ab:	b8 00 00 00 00       	mov    $0x0,%eax
  4022b0:	e8 f3 e7 ff ff       	callq  400aa8 <printf@plt>
  4022b5:	e8 2e e9 ff ff       	callq  400be8 <__errno_location@plt>
  4022ba:	8b 38                	mov    (%rax),%edi
  4022bc:	e8 e7 e8 ff ff       	callq  400ba8 <strerror@plt>
  4022c1:	48 89 c3             	mov    %rax,%rbx
  4022c4:	e8 1f e9 ff ff       	callq  400be8 <__errno_location@plt>
  4022c9:	8b 30                	mov    (%rax),%esi
  4022cb:	48 89 da             	mov    %rbx,%rdx
  4022ce:	bf 08 55 40 00       	mov    $0x405508,%edi
  4022d3:	b8 00 00 00 00       	mov    $0x0,%eax
  4022d8:	e8 cb e7 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  4022dd:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  4022e4:	ff ff ff 
  4022e7:	e9 22 04 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					/*fill info struct*/
					stru_get_txfr_statics.vfport = ((STRU_GET_TXFR_STATICS *)arg)->vfport;
  4022ec:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  4022f3:	8b 00                	mov    (%rax),%eax
  4022f5:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)
					sig->npu_request.cmdType = NPU_GET_REQUEST_TYPE;
  4022fb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4022ff:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
					sig->npu_request.cmd = cmd;
  402306:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40230a:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  402310:	89 42 04             	mov    %eax,0x4(%rdx)
					memcpy(sig->npu_request.pargv,(void *)&stru_get_txfr_statics,sizeof(stru_get_txfr_statics)-sizeof(STRU_TXFR_STATICS));
  402313:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402317:	48 8d 78 0c          	lea    0xc(%rax),%rdi
  40231b:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
  402322:	ba 08 00 00 00       	mov    $0x8,%edx
  402327:	e8 9c e8 ff ff       	callq  400bc8 <memcpy@plt>
				}
				
                if(NPU_GET_CPU_STATICS == cmd)
  40232c:	83 bd 9c fd ff ff 05 	cmpl   $0x5,-0x264(%rbp)
  402333:	0f 85 8b 00 00 00    	jne    4023c4 <npu_ioctrl+0xc30>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig), NPU_REQUEST_SIG);
  402339:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40233d:	48 8b 38             	mov    (%rax),%rdi
  402340:	ba 0c 84 00 00       	mov    $0x840c,%edx
  402345:	be 10 00 00 00       	mov    $0x10,%esi
  40234a:	e8 71 20 00 00       	callq  4043c0 <linx_alloc>
  40234f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					if (sig == NULL) 
  402353:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402357:	48 85 c0             	test   %rax,%rax
  40235a:	75 50                	jne    4023ac <npu_ioctrl+0xc18>
					{
						ERR("linx_alloc() failed\n");
  40235c:	ba 4d 02 00 00       	mov    $0x24d,%edx
  402361:	be 35 51 40 00       	mov    $0x405135,%esi
  402366:	bf 47 51 40 00       	mov    $0x405147,%edi
  40236b:	b8 00 00 00 00       	mov    $0x0,%eax
  402370:	e8 33 e7 ff ff       	callq  400aa8 <printf@plt>
  402375:	e8 6e e8 ff ff       	callq  400be8 <__errno_location@plt>
  40237a:	8b 38                	mov    (%rax),%edi
  40237c:	e8 27 e8 ff ff       	callq  400ba8 <strerror@plt>
  402381:	48 89 c3             	mov    %rax,%rbx
  402384:	e8 5f e8 ff ff       	callq  400be8 <__errno_location@plt>
  402389:	8b 30                	mov    (%rax),%esi
  40238b:	48 89 da             	mov    %rbx,%rdx
  40238e:	bf 08 55 40 00       	mov    $0x405508,%edi
  402393:	b8 00 00 00 00       	mov    $0x0,%eax
  402398:	e8 0b e7 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  40239d:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  4023a4:	ff ff ff 
  4023a7:	e9 62 03 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					/*fill info struct*/
					sig->npu_request.cmdType = NPU_GET_REQUEST_TYPE;
  4023ac:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4023b0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
					sig->npu_request.cmd = cmd;
  4023b7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4023bb:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  4023c1:	89 42 04             	mov    %eax,0x4(%rdx)
					/*memcpy(sig->npu_request.pargv,(void *)&stru_get_txfr_statics,sizeof(stru_get_txfr_statics)-sizeof(STRU_TXFR_STATICS));*/
				}
				
                if(NPU_GET_MEMORY_STATICS == cmd)
  4023c4:	83 bd 9c fd ff ff 06 	cmpl   $0x6,-0x264(%rbp)
  4023cb:	0f 85 8b 00 00 00    	jne    40245c <npu_ioctrl+0xcc8>
                {
					sig = linx_alloc(linx_info->linx, sizeof(struct stru_npu_request_sig), NPU_REQUEST_SIG);
  4023d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4023d5:	48 8b 38             	mov    (%rax),%rdi
  4023d8:	ba 0c 84 00 00       	mov    $0x840c,%edx
  4023dd:	be 10 00 00 00       	mov    $0x10,%esi
  4023e2:	e8 d9 1f 00 00       	callq  4043c0 <linx_alloc>
  4023e7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					if (sig == NULL) 
  4023eb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4023ef:	48 85 c0             	test   %rax,%rax
  4023f2:	75 50                	jne    402444 <npu_ioctrl+0xcb0>
					{
						ERR("linx_alloc() failed\n");
  4023f4:	ba 5b 02 00 00       	mov    $0x25b,%edx
  4023f9:	be 35 51 40 00       	mov    $0x405135,%esi
  4023fe:	bf 47 51 40 00       	mov    $0x405147,%edi
  402403:	b8 00 00 00 00       	mov    $0x0,%eax
  402408:	e8 9b e6 ff ff       	callq  400aa8 <printf@plt>
  40240d:	e8 d6 e7 ff ff       	callq  400be8 <__errno_location@plt>
  402412:	8b 38                	mov    (%rax),%edi
  402414:	e8 8f e7 ff ff       	callq  400ba8 <strerror@plt>
  402419:	48 89 c3             	mov    %rax,%rbx
  40241c:	e8 c7 e7 ff ff       	callq  400be8 <__errno_location@plt>
  402421:	8b 30                	mov    (%rax),%esi
  402423:	48 89 da             	mov    %rbx,%rdx
  402426:	bf 08 55 40 00       	mov    $0x405508,%edi
  40242b:	b8 00 00 00 00       	mov    $0x0,%eax
  402430:	e8 73 e6 ff ff       	callq  400aa8 <printf@plt>
						return ERR_LINX_ALLOC;
  402435:	c7 85 8c fd ff ff f7 	movl   $0xfffffff7,-0x274(%rbp)
  40243c:	ff ff ff 
  40243f:	e9 ca 02 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
					} 
					/*fill info struct*/
					sig->npu_request.cmdType = NPU_GET_REQUEST_TYPE;
  402444:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  402448:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
					sig->npu_request.cmd = cmd;
  40244f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  402453:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
  402459:	89 42 04             	mov    %eax,0x4(%rdx)
					/*memcpy(sig->npu_request.pargv,(void *)&stru_get_txfr_statics,sizeof(stru_get_txfr_statics)-sizeof(STRU_TXFR_STATICS));*/
				}
				
				if (linx_send(linx_info->linx, &sig, linx_info->server) == -1) 
  40245c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402460:	8b 50 14             	mov    0x14(%rax),%edx
  402463:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402467:	48 8b 38             	mov    (%rax),%rdi
  40246a:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  40246e:	e8 0d 25 00 00       	callq  404980 <linx_send>
  402473:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402476:	75 50                	jne    4024c8 <npu_ioctrl+0xd34>
				{
					ERR("linx_send() failed");
  402478:	ba 66 02 00 00       	mov    $0x266,%edx
  40247d:	be 35 51 40 00       	mov    $0x405135,%esi
  402482:	bf 47 51 40 00       	mov    $0x405147,%edi
  402487:	b8 00 00 00 00       	mov    $0x0,%eax
  40248c:	e8 17 e6 ff ff       	callq  400aa8 <printf@plt>
  402491:	e8 52 e7 ff ff       	callq  400be8 <__errno_location@plt>
  402496:	8b 38                	mov    (%rax),%edi
  402498:	e8 0b e7 ff ff       	callq  400ba8 <strerror@plt>
  40249d:	48 89 c3             	mov    %rax,%rbx
  4024a0:	e8 43 e7 ff ff       	callq  400be8 <__errno_location@plt>
  4024a5:	8b 30                	mov    (%rax),%esi
  4024a7:	48 89 da             	mov    %rbx,%rdx
  4024aa:	bf 80 51 40 00       	mov    $0x405180,%edi
  4024af:	b8 00 00 00 00       	mov    $0x0,%eax
  4024b4:	e8 ef e5 ff ff       	callq  400aa8 <printf@plt>
					return ERR_LINX_SEND;
  4024b9:	c7 85 8c fd ff ff f6 	movl   $0xfffffff6,-0x274(%rbp)
  4024c0:	ff ff ff 
  4024c3:	e9 46 02 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}
				/*only receive ioctrl type msg,otherwise it will free other message*/
				LINX_SIGSELECT sigsel_ack[] = {1,NPU_GET_REQUEST_ACK_SIG};
  4024c8:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%rbp)
  4024cf:	c7 45 94 0e 84 00 00 	movl   $0x840e,-0x6c(%rbp)

				if (linx_receive_w_tmo(linx_info->linx, &replysig, NPU_RECEIVE_IOCTL_TIMEOUT, sigsel_ack) == -1)
  4024d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4024da:	48 8b 38             	mov    (%rax),%rdi
  4024dd:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  4024e1:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
  4024e5:	ba 2c 01 00 00       	mov    $0x12c,%edx
  4024ea:	e8 81 27 00 00       	callq  404c70 <linx_receive_w_tmo>
  4024ef:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  4024f2:	75 50                	jne    402544 <npu_ioctrl+0xdb0>
				{
					ERR("linx_receive_w_tmo() failed");
  4024f4:	ba 6e 02 00 00       	mov    $0x26e,%edx
  4024f9:	be 35 51 40 00       	mov    $0x405135,%esi
  4024fe:	bf 47 51 40 00       	mov    $0x405147,%edi
  402503:	b8 00 00 00 00       	mov    $0x0,%eax
  402508:	e8 9b e5 ff ff       	callq  400aa8 <printf@plt>
  40250d:	e8 d6 e6 ff ff       	callq  400be8 <__errno_location@plt>
  402512:	8b 38                	mov    (%rax),%edi
  402514:	e8 8f e6 ff ff       	callq  400ba8 <strerror@plt>
  402519:	48 89 c3             	mov    %rax,%rbx
  40251c:	e8 c7 e6 ff ff       	callq  400be8 <__errno_location@plt>
  402521:	8b 30                	mov    (%rax),%esi
  402523:	48 89 da             	mov    %rbx,%rdx
  402526:	bf 30 55 40 00       	mov    $0x405530,%edi
  40252b:	b8 00 00 00 00       	mov    $0x0,%eax
  402530:	e8 73 e5 ff ff       	callq  400aa8 <printf@plt>
					return ERR_LINX_RCV_TMOUT;
  402535:	c7 85 8c fd ff ff fc 	movl   $0xfffffffc,-0x274(%rbp)
  40253c:	ff ff ff 
  40253f:	e9 ca 01 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}
				if (replysig == LINX_NIL) 
  402544:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402548:	48 85 c0             	test   %rax,%rax
  40254b:	75 19                	jne    402566 <npu_ioctrl+0xdd2>
				{	
					PRINTF_INFO("ioctrl get receive from server timed out.\n" );		
  40254d:	bf a8 55 40 00       	mov    $0x4055a8,%edi
  402552:	e8 a1 e5 ff ff       	callq  400af8 <puts@plt>
				
					return ERR_LINX_RSV_TMOUT;
  402557:	c7 85 8c fd ff ff f2 	movl   $0xfffffff2,-0x274(%rbp)
  40255e:	ff ff ff 
  402561:	e9 a8 01 00 00       	jmpq   40270e <npu_ioctrl+0xf7a>
				}
				else
				{
				    u32 reply_cmd;
					reply_cmd = replysig->npu_get_request_ack.cmd;
  402566:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40256a:	8b 40 04             	mov    0x4(%rax),%eax
  40256d:	89 45 e8             	mov    %eax,-0x18(%rbp)
					int result = replysig->npu_get_request_ack.result;
  402570:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402574:	8b 40 08             	mov    0x8(%rax),%eax
  402577:	89 45 ec             	mov    %eax,-0x14(%rbp)
				    if(STATUS_OK == result)
  40257a:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  40257e:	0f 85 d4 00 00 00    	jne    402658 <npu_ioctrl+0xec4>
				    {
                        switch(reply_cmd)
  402584:	83 7d e8 06          	cmpl   $0x6,-0x18(%rbp)
  402588:	0f 87 b0 00 00 00    	ja     40263e <npu_ioctrl+0xeaa>
  40258e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  402591:	48 8b 04 c5 e0 55 40 	mov    0x4055e0(,%rax,8),%rax
  402598:	00 
  402599:	ff e0                	jmpq   *%rax
                        {
                            case NPU_GET_ETH_STATICS:
							{  
								memcpy(arg,replysig->npu_get_request_ack.pdata,sizeof(STRU_GET_ETH_STATICS));
  40259b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40259f:	48 8d 70 0c          	lea    0xc(%rax),%rsi
  4025a3:	48 8b bd 90 fd ff ff 	mov    -0x270(%rbp),%rdi
  4025aa:	ba e8 01 00 00       	mov    $0x1e8,%edx
  4025af:	e8 14 e6 ff ff       	callq  400bc8 <memcpy@plt>
  4025b4:	e9 85 00 00 00       	jmpq   40263e <npu_ioctrl+0xeaa>
                                break;
							}
                            case NPU_GET_UPI_STATICS:
							{
								memcpy(arg,replysig->npu_get_request_ack.pdata,sizeof(STRU_GET_UPI_STATICS));
  4025b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4025bd:	48 8d 70 0c          	lea    0xc(%rax),%rsi
  4025c1:	48 8b bd 90 fd ff ff 	mov    -0x270(%rbp),%rdi
  4025c8:	ba 08 01 00 00       	mov    $0x108,%edx
  4025cd:	e8 f6 e5 ff ff       	callq  400bc8 <memcpy@plt>
  4025d2:	eb 6a                	jmp    40263e <npu_ioctrl+0xeaa>
                                break;
							}
                            case NPU_GET_RXFR_STATICS:
							{
								memcpy(arg,replysig->npu_get_request_ack.pdata,sizeof(STRU_GET_RXFR_STATICS));
  4025d4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4025d8:	48 8d 70 0c          	lea    0xc(%rax),%rsi
  4025dc:	48 8b bd 90 fd ff ff 	mov    -0x270(%rbp),%rdi
  4025e3:	ba 68 00 00 00       	mov    $0x68,%edx
  4025e8:	e8 db e5 ff ff       	callq  400bc8 <memcpy@plt>
  4025ed:	eb 4f                	jmp    40263e <npu_ioctrl+0xeaa>
                                break;
							}
                            case NPU_GET_TXFR_STATICS:
							{
								memcpy(arg,replysig->npu_get_request_ack.pdata,sizeof(STRU_GET_TXFR_STATICS));
  4025ef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4025f3:	48 8d 70 0c          	lea    0xc(%rax),%rsi
  4025f7:	48 8b bd 90 fd ff ff 	mov    -0x270(%rbp),%rdi
  4025fe:	ba 40 00 00 00       	mov    $0x40,%edx
  402603:	e8 c0 e5 ff ff       	callq  400bc8 <memcpy@plt>
  402608:	eb 34                	jmp    40263e <npu_ioctrl+0xeaa>
                                break;
							}
                            case NPU_GET_CPU_STATICS:
							{
								memcpy(arg,replysig->npu_get_request_ack.pdata,sizeof(STRU_CPU_STATICS));
  40260a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40260e:	48 8d 70 0c          	lea    0xc(%rax),%rsi
  402612:	48 8b bd 90 fd ff ff 	mov    -0x270(%rbp),%rdi
  402619:	ba 34 00 00 00       	mov    $0x34,%edx
  40261e:	e8 a5 e5 ff ff       	callq  400bc8 <memcpy@plt>
  402623:	eb 19                	jmp    40263e <npu_ioctrl+0xeaa>
                                break;
							}
                            case NPU_GET_MEMORY_STATICS:
							{
								memcpy(arg,replysig->npu_get_request_ack.pdata,sizeof(STRU_MEMORY_STATICS));
  402625:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402629:	48 8d 70 0c          	lea    0xc(%rax),%rsi
  40262d:	48 8b bd 90 fd ff ff 	mov    -0x270(%rbp),%rdi
  402634:	ba 0c 00 00 00       	mov    $0xc,%edx
  402639:	e8 8a e5 ff ff       	callq  400bc8 <memcpy@plt>
						{
							ERR("linx_free_buf() failed");
						}
						return result;
					}
					if(linx_free_buf(linx_info->linx,&replysig) == -1)
  40263e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402642:	48 8b 38             	mov    (%rax),%rdi
  402645:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
  402649:	e8 f2 23 00 00       	callq  404a40 <linx_free_buf>
  40264e:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402651:	74 70                	je     4026c3 <npu_ioctrl+0xf2f>
  402653:	e9 ac 00 00 00       	jmpq   402704 <npu_ioctrl+0xf70>
							}
						}
					}
					else
					{
						PRINTF_INFO("get failed!\n");
  402658:	bf d2 55 40 00       	mov    $0x4055d2,%edi
  40265d:	e8 96 e4 ff ff       	callq  400af8 <puts@plt>
						if(linx_free_buf(linx_info->linx,&replysig) == -1)
  402662:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402666:	48 8b 38             	mov    (%rax),%rdi
  402669:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
  40266d:	e8 ce 23 00 00       	callq  404a40 <linx_free_buf>
  402672:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402675:	75 41                	jne    4026b8 <npu_ioctrl+0xf24>
						{
							ERR("linx_free_buf() failed");
  402677:	ba a9 02 00 00       	mov    $0x2a9,%edx
  40267c:	be 35 51 40 00       	mov    $0x405135,%esi
  402681:	bf 47 51 40 00       	mov    $0x405147,%edi
  402686:	b8 00 00 00 00       	mov    $0x0,%eax
  40268b:	e8 18 e4 ff ff       	callq  400aa8 <printf@plt>
  402690:	e8 53 e5 ff ff       	callq  400be8 <__errno_location@plt>
  402695:	8b 38                	mov    (%rax),%edi
  402697:	e8 0c e5 ff ff       	callq  400ba8 <strerror@plt>
  40269c:	48 89 c3             	mov    %rax,%rbx
  40269f:	e8 44 e5 ff ff       	callq  400be8 <__errno_location@plt>
  4026a4:	8b 30                	mov    (%rax),%esi
  4026a6:	48 89 da             	mov    %rbx,%rdx
  4026a9:	bf 90 53 40 00       	mov    $0x405390,%edi
  4026ae:	b8 00 00 00 00       	mov    $0x0,%eax
  4026b3:	e8 f0 e3 ff ff       	callq  400aa8 <printf@plt>
						}
						return result;
  4026b8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4026bb:	89 85 8c fd ff ff    	mov    %eax,-0x274(%rbp)
  4026c1:	eb 4b                	jmp    40270e <npu_ioctrl+0xf7a>
					}
					if(linx_free_buf(linx_info->linx,&replysig) == -1)
					{
						ERR("linx_free_buf() failed");
  4026c3:	ba af 02 00 00       	mov    $0x2af,%edx
  4026c8:	be 35 51 40 00       	mov    $0x405135,%esi
  4026cd:	bf 47 51 40 00       	mov    $0x405147,%edi
  4026d2:	b8 00 00 00 00       	mov    $0x0,%eax
  4026d7:	e8 cc e3 ff ff       	callq  400aa8 <printf@plt>
  4026dc:	e8 07 e5 ff ff       	callq  400be8 <__errno_location@plt>
  4026e1:	8b 38                	mov    (%rax),%edi
  4026e3:	e8 c0 e4 ff ff       	callq  400ba8 <strerror@plt>
  4026e8:	48 89 c3             	mov    %rax,%rbx
  4026eb:	e8 f8 e4 ff ff       	callq  400be8 <__errno_location@plt>
  4026f0:	8b 30                	mov    (%rax),%esi
  4026f2:	48 89 da             	mov    %rbx,%rdx
  4026f5:	bf 90 53 40 00       	mov    $0x405390,%edi
  4026fa:	b8 00 00 00 00       	mov    $0x0,%eax
  4026ff:	e8 a4 e3 ff ff       	callq  400aa8 <printf@plt>
				}
				break;
			}
		}
	
	return STATUS_OK;
  402704:	c7 85 8c fd ff ff 00 	movl   $0x0,-0x274(%rbp)
  40270b:	00 00 00 
  40270e:	8b 85 8c fd ff ff    	mov    -0x274(%rbp),%eax

}
  402714:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
  40271b:	5b                   	pop    %rbx
  40271c:	c9                   	leaveq 
  40271d:	c3                   	retq   

000000000040271e <npu_close_linx>:

int npu_close_linx(int Socketfd)
{
  40271e:	55                   	push   %rbp
  40271f:	48 89 e5             	mov    %rsp,%rbp
  402722:	53                   	push   %rbx
  402723:	48 83 ec 08          	sub    $0x8,%rsp
  402727:	89 7d f4             	mov    %edi,-0xc(%rbp)
    if(g_StruClientLinxInfo.LinkStatus == SPP_NPU_LINX_CONNECTED 
  40272a:	8b 05 80 4a 20 00    	mov    0x204a80(%rip),%eax        # 6071b0 <g_StruClientLinxInfo+0x10>
  402730:	83 f8 01             	cmp    $0x1,%eax
  402733:	0f 85 d4 00 00 00    	jne    40280d <npu_close_linx+0xef>
  402739:	8b 05 6d 4a 20 00    	mov    0x204a6d(%rip),%eax        # 6071ac <g_StruClientLinxInfo+0xc>
  40273f:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  402742:	0f 85 c5 00 00 00    	jne    40280d <npu_close_linx+0xef>
		&& g_StruClientLinxInfo.Socketfd == Socketfd)
    {
         if(g_StruClientLinxInfo.LinkNumber == 1)
  402748:	8b 05 5a 4a 20 00    	mov    0x204a5a(%rip),%eax        # 6071a8 <g_StruClientLinxInfo+0x8>
  40274e:	83 f8 01             	cmp    $0x1,%eax
  402751:	0f 85 9e 00 00 00    	jne    4027f5 <npu_close_linx+0xd7>
         {
			 if (linx_close(g_StruClientLinxInfo.linx) == -1) 
  402757:	48 8b 3d 42 4a 20 00 	mov    0x204a42(%rip),%rdi        # 6071a0 <g_StruClientLinxInfo>
  40275e:	e8 cd 1f 00 00       	callq  404730 <linx_close>
  402763:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402766:	75 4d                	jne    4027b5 <npu_close_linx+0x97>
			 {
				ERR("linx_close() failed");
  402768:	ba c3 02 00 00       	mov    $0x2c3,%edx
  40276d:	be 35 51 40 00       	mov    $0x405135,%esi
  402772:	bf 47 51 40 00       	mov    $0x405147,%edi
  402777:	b8 00 00 00 00       	mov    $0x0,%eax
  40277c:	e8 27 e3 ff ff       	callq  400aa8 <printf@plt>
  402781:	e8 62 e4 ff ff       	callq  400be8 <__errno_location@plt>
  402786:	8b 38                	mov    (%rax),%edi
  402788:	e8 1b e4 ff ff       	callq  400ba8 <strerror@plt>
  40278d:	48 89 c3             	mov    %rax,%rbx
  402790:	e8 53 e4 ff ff       	callq  400be8 <__errno_location@plt>
  402795:	8b 30                	mov    (%rax),%esi
  402797:	48 89 da             	mov    %rbx,%rdx
  40279a:	bf 18 56 40 00       	mov    $0x405618,%edi
  40279f:	b8 00 00 00 00       	mov    $0x0,%eax
  4027a4:	e8 ff e2 ff ff       	callq  400aa8 <printf@plt>
				return ERR_LINX_CLOSE;
  4027a9:	c7 45 f0 fe ff ff ff 	movl   $0xfffffffe,-0x10(%rbp)
  4027b0:	e9 a0 00 00 00       	jmpq   402855 <npu_close_linx+0x137>
			 }
		    g_StruClientLinxInfo.LinkStatus = SPP_NPU_LINX_NOT_CREATED;
  4027b5:	c7 05 f1 49 20 00 00 	movl   $0x0,0x2049f1(%rip)        # 6071b0 <g_StruClientLinxInfo+0x10>
  4027bc:	00 00 00 
			g_StruClientLinxInfo.linx = NULL;	
  4027bf:	48 c7 05 d6 49 20 00 	movq   $0x0,0x2049d6(%rip)        # 6071a0 <g_StruClientLinxInfo>
  4027c6:	00 00 00 00 
			g_StruClientLinxInfo.Socketfd = 0;
  4027ca:	c7 05 d8 49 20 00 00 	movl   $0x0,0x2049d8(%rip)        # 6071ac <g_StruClientLinxInfo+0xc>
  4027d1:	00 00 00 
			g_StruClientLinxInfo.LinkNumber = 0;
  4027d4:	c7 05 ca 49 20 00 00 	movl   $0x0,0x2049ca(%rip)        # 6071a8 <g_StruClientLinxInfo+0x8>
  4027db:	00 00 00 
			PRINTF_INFO("Clean up the ClientlinxInfo.Socketfd = %d\n",g_StruClientLinxInfo.Socketfd);
  4027de:	8b 35 c8 49 20 00    	mov    0x2049c8(%rip),%esi        # 6071ac <g_StruClientLinxInfo+0xc>
  4027e4:	bf 40 56 40 00       	mov    $0x405640,%edi
  4027e9:	b8 00 00 00 00       	mov    $0x0,%eax
  4027ee:	e8 b5 e2 ff ff       	callq  400aa8 <printf@plt>
  4027f3:	eb 0f                	jmp    402804 <npu_close_linx+0xe6>
		 }
		 else
		 {
			 g_StruClientLinxInfo.LinkNumber--;
  4027f5:	8b 05 ad 49 20 00    	mov    0x2049ad(%rip),%eax        # 6071a8 <g_StruClientLinxInfo+0x8>
  4027fb:	83 e8 01             	sub    $0x1,%eax
  4027fe:	89 05 a4 49 20 00    	mov    %eax,0x2049a4(%rip)        # 6071a8 <g_StruClientLinxInfo+0x8>
	else
	{
        ERR("link hasn't been created or wrong Socketfd\n");
		return ERR_LINX_CLOSE;
	}
	return STATUS_OK;
  402804:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40280b:	eb 48                	jmp    402855 <npu_close_linx+0x137>
			 g_StruClientLinxInfo.LinkNumber--;
		 }
    }
	else
	{
        ERR("link hasn't been created or wrong Socketfd\n");
  40280d:	ba d3 02 00 00       	mov    $0x2d3,%edx
  402812:	be 35 51 40 00       	mov    $0x405135,%esi
  402817:	bf 47 51 40 00       	mov    $0x405147,%edi
  40281c:	b8 00 00 00 00       	mov    $0x0,%eax
  402821:	e8 82 e2 ff ff       	callq  400aa8 <printf@plt>
  402826:	e8 bd e3 ff ff       	callq  400be8 <__errno_location@plt>
  40282b:	8b 38                	mov    (%rax),%edi
  40282d:	e8 76 e3 ff ff       	callq  400ba8 <strerror@plt>
  402832:	48 89 c3             	mov    %rax,%rbx
  402835:	e8 ae e3 ff ff       	callq  400be8 <__errno_location@plt>
  40283a:	8b 30                	mov    (%rax),%esi
  40283c:	48 89 da             	mov    %rbx,%rdx
  40283f:	bf 70 56 40 00       	mov    $0x405670,%edi
  402844:	b8 00 00 00 00       	mov    $0x0,%eax
  402849:	e8 5a e2 ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_CLOSE;
  40284e:	c7 45 f0 fe ff ff ff 	movl   $0xfffffffe,-0x10(%rbp)
  402855:	8b 45 f0             	mov    -0x10(%rbp),%eax
	}
	return STATUS_OK;
}
  402858:	48 83 c4 08          	add    $0x8,%rsp
  40285c:	5b                   	pop    %rbx
  40285d:	c9                   	leaveq 
  40285e:	c3                   	retq   

000000000040285f <npu_creat_linx>:


u32 npu_creat_linx(int * Socketfd)
{
  40285f:	55                   	push   %rbp
  402860:	48 89 e5             	mov    %rsp,%rbp
  402863:	53                   	push   %rbx
  402864:	48 83 ec 58          	sub    $0x58,%rsp
  402868:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
	char client_linx_name[24];
	LINX *linx;
	union LINX_SIGNAL *sig;
	LINX_SPID server;
	LINX_OSATTREF att_ref;
	int status = 0;
  40286c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)


   if(g_StruClientLinxInfo.LinkStatus == SPP_NPU_LINX_NOT_CREATED)
  402873:	8b 05 37 49 20 00    	mov    0x204937(%rip),%eax        # 6071b0 <g_StruClientLinxInfo+0x10>
  402879:	85 c0                	test   %eax,%eax
  40287b:	0f 85 8e 00 00 00    	jne    40290f <npu_creat_linx+0xb0>
    {
        sprintf(client_linx_name,"%s%d", CLIENT_NAME,getpid());
  402881:	e8 e2 e2 ff ff       	callq  400b68 <getpid@plt>
  402886:	89 c1                	mov    %eax,%ecx
  402888:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  40288c:	ba ae 56 40 00       	mov    $0x4056ae,%edx
  402891:	be bb 56 40 00       	mov    $0x4056bb,%esi
  402896:	b8 00 00 00 00       	mov    $0x0,%eax
  40289b:	e8 f8 e2 ff ff       	callq  400b98 <sprintf@plt>
		
		linx = linx_open(client_linx_name, 0, NULL);
  4028a0:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  4028a4:	ba 00 00 00 00       	mov    $0x0,%edx
  4028a9:	be 00 00 00 00       	mov    $0x0,%esi
  4028ae:	e8 fd 1c 00 00       	callq  4045b0 <linx_open>
  4028b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		if (linx == NULL) 
  4028b7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4028bc:	0f 85 8c 00 00 00    	jne    40294e <npu_creat_linx+0xef>
		{
		    ERR("linx_open() failed");
  4028c2:	ba eb 02 00 00       	mov    $0x2eb,%edx
  4028c7:	be 35 51 40 00       	mov    $0x405135,%esi
  4028cc:	bf 47 51 40 00       	mov    $0x405147,%edi
  4028d1:	b8 00 00 00 00       	mov    $0x0,%eax
  4028d6:	e8 cd e1 ff ff       	callq  400aa8 <printf@plt>
  4028db:	e8 08 e3 ff ff       	callq  400be8 <__errno_location@plt>
  4028e0:	8b 38                	mov    (%rax),%edi
  4028e2:	e8 c1 e2 ff ff       	callq  400ba8 <strerror@plt>
  4028e7:	48 89 c3             	mov    %rax,%rbx
  4028ea:	e8 f9 e2 ff ff       	callq  400be8 <__errno_location@plt>
  4028ef:	8b 30                	mov    (%rax),%esi
  4028f1:	48 89 da             	mov    %rbx,%rdx
  4028f4:	bf c0 56 40 00       	mov    $0x4056c0,%edi
  4028f9:	b8 00 00 00 00       	mov    $0x0,%eax
  4028fe:	e8 a5 e1 ff ff       	callq  400aa8 <printf@plt>
			return ERR_LINX_OPEN;
  402903:	c7 45 a4 ff ff ff ff 	movl   $0xffffffff,-0x5c(%rbp)
  40290a:	e9 66 02 00 00       	jmpq   402b75 <npu_creat_linx+0x316>
		}
    }
	else if(g_StruClientLinxInfo.LinkStatus == SPP_NPU_LINX_DISCONNECTED)
  40290f:	8b 05 9b 48 20 00    	mov    0x20489b(%rip),%eax        # 6071b0 <g_StruClientLinxInfo+0x10>
  402915:	83 f8 02             	cmp    $0x2,%eax
  402918:	75 0d                	jne    402927 <npu_creat_linx+0xc8>
	{
        linx = g_StruClientLinxInfo.linx;
  40291a:	48 8b 05 7f 48 20 00 	mov    0x20487f(%rip),%rax        # 6071a0 <g_StruClientLinxInfo>
  402921:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  402925:	eb 27                	jmp    40294e <npu_creat_linx+0xef>
		goto FindServer;
	}
	/*if connected return*/
	else
	{
		*Socketfd = g_StruClientLinxInfo.Socketfd;
  402927:	8b 15 7f 48 20 00    	mov    0x20487f(%rip),%edx        # 6071ac <g_StruClientLinxInfo+0xc>
  40292d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402931:	89 10                	mov    %edx,(%rax)
		/* add new link map to same linx endpoint */
		g_StruClientLinxInfo.LinkNumber++;
  402933:	8b 05 6f 48 20 00    	mov    0x20486f(%rip),%eax        # 6071a8 <g_StruClientLinxInfo+0x8>
  402939:	83 c0 01             	add    $0x1,%eax
  40293c:	89 05 66 48 20 00    	mov    %eax,0x204866(%rip)        # 6071a8 <g_StruClientLinxInfo+0x8>
		return STATUS_OK;
  402942:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)
  402949:	e9 27 02 00 00       	jmpq   402b75 <npu_creat_linx+0x316>
	}
FindServer:	status = find_server(linx, SERVER_NAME,&server);
  40294e:	48 8d 55 b4          	lea    -0x4c(%rbp),%rdx
  402952:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402956:	be e5 56 40 00       	mov    $0x4056e5,%esi
  40295b:	e8 1f 02 00 00       	callq  402b7f <find_server>
  402960:	89 45 ec             	mov    %eax,-0x14(%rbp)
	if(status == STATUS_OK)
  402963:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  402967:	0f 85 5e 01 00 00    	jne    402acb <npu_creat_linx+0x26c>
	{
	   
	    sig = linx_alloc(linx, sizeof(union LINX_SIGNAL), ATTACH_SERVER_SIG);
  40296d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402971:	ba 0a 84 00 00       	mov    $0x840a,%edx
  402976:	be 20 00 00 00       	mov    $0x20,%esi
  40297b:	e8 40 1a 00 00       	callq  4043c0 <linx_alloc>
  402980:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		/* Attach to the server */
		att_ref = linx_attach(linx, &sig, server);
  402984:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  402987:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  40298b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40298f:	e8 8c 24 00 00       	callq  404e20 <linx_attach>
  402994:	89 45 e8             	mov    %eax,-0x18(%rbp)
		if (att_ref == LINX_ILLEGAL_ATTREF) 
  402997:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  40299b:	75 41                	jne    4029de <npu_creat_linx+0x17f>
		{
			ERR("linx_attach() failed");
  40299d:	ba 05 03 00 00       	mov    $0x305,%edx
  4029a2:	be 35 51 40 00       	mov    $0x405135,%esi
  4029a7:	bf 47 51 40 00       	mov    $0x405147,%edi
  4029ac:	b8 00 00 00 00       	mov    $0x0,%eax
  4029b1:	e8 f2 e0 ff ff       	callq  400aa8 <printf@plt>
  4029b6:	e8 2d e2 ff ff       	callq  400be8 <__errno_location@plt>
  4029bb:	8b 38                	mov    (%rax),%edi
  4029bd:	e8 e6 e1 ff ff       	callq  400ba8 <strerror@plt>
  4029c2:	48 89 c3             	mov    %rax,%rbx
  4029c5:	e8 1e e2 ff ff       	callq  400be8 <__errno_location@plt>
  4029ca:	8b 30                	mov    (%rax),%esi
  4029cc:	48 89 da             	mov    %rbx,%rdx
  4029cf:	bf f8 56 40 00       	mov    $0x4056f8,%edi
  4029d4:	b8 00 00 00 00       	mov    $0x0,%eax
  4029d9:	e8 ca e0 ff ff       	callq  400aa8 <printf@plt>
		}
		sig = linx_alloc(linx,sizeof(union LINX_SIGNAL), NPU_ECHO_SIG);
  4029de:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4029e2:	ba 01 84 00 00       	mov    $0x8401,%edx
  4029e7:	be 20 00 00 00       	mov    $0x20,%esi
  4029ec:	e8 cf 19 00 00       	callq  4043c0 <linx_alloc>
  4029f1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		/*send a ECHO Msg after find the server,let the server attach the client if necessary*/
		if (linx_send(linx, &sig, server) == -1) 
  4029f5:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  4029f8:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  4029fc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402a00:	e8 7b 1f 00 00       	callq  404980 <linx_send>
  402a05:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402a08:	75 41                	jne    402a4b <npu_creat_linx+0x1ec>
		{
			ERR("linx_send() failed");
  402a0a:	ba 0b 03 00 00       	mov    $0x30b,%edx
  402a0f:	be 35 51 40 00       	mov    $0x405135,%esi
  402a14:	bf 47 51 40 00       	mov    $0x405147,%edi
  402a19:	b8 00 00 00 00       	mov    $0x0,%eax
  402a1e:	e8 85 e0 ff ff       	callq  400aa8 <printf@plt>
  402a23:	e8 c0 e1 ff ff       	callq  400be8 <__errno_location@plt>
  402a28:	8b 38                	mov    (%rax),%edi
  402a2a:	e8 79 e1 ff ff       	callq  400ba8 <strerror@plt>
  402a2f:	48 89 c3             	mov    %rax,%rbx
  402a32:	e8 b1 e1 ff ff       	callq  400be8 <__errno_location@plt>
  402a37:	8b 30                	mov    (%rax),%esi
  402a39:	48 89 da             	mov    %rbx,%rdx
  402a3c:	bf 80 51 40 00       	mov    $0x405180,%edi
  402a41:	b8 00 00 00 00       	mov    $0x0,%eax
  402a46:	e8 5d e0 ff ff       	callq  400aa8 <printf@plt>
			//return ERR_LINX_SEND;
		}
		if(g_StruClientLinxInfo.LinkStatus == SPP_NPU_LINX_NOT_CREATED)
  402a4b:	8b 05 5f 47 20 00    	mov    0x20475f(%rip),%eax        # 6071b0 <g_StruClientLinxInfo+0x10>
  402a51:	85 c0                	test   %eax,%eax
  402a53:	75 4c                	jne    402aa1 <npu_creat_linx+0x242>
		{
			*Socketfd = linx_get_descriptor(linx);
  402a55:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402a59:	e8 22 14 00 00       	callq  403e80 <linx_get_descriptor>
  402a5e:	89 c2                	mov    %eax,%edx
  402a60:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402a64:	89 10                	mov    %edx,(%rax)
			g_StruClientLinxInfo.LinkStatus = SPP_NPU_LINX_CONNECTED;
  402a66:	c7 05 40 47 20 00 01 	movl   $0x1,0x204740(%rip)        # 6071b0 <g_StruClientLinxInfo+0x10>
  402a6d:	00 00 00 
			g_StruClientLinxInfo.Socketfd = *Socketfd;
  402a70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  402a74:	8b 00                	mov    (%rax),%eax
  402a76:	89 05 30 47 20 00    	mov    %eax,0x204730(%rip)        # 6071ac <g_StruClientLinxInfo+0xc>
			g_StruClientLinxInfo.linx = linx;
  402a7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402a80:	48 89 05 19 47 20 00 	mov    %rax,0x204719(%rip)        # 6071a0 <g_StruClientLinxInfo>
			g_StruClientLinxInfo.server =server;
  402a87:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  402a8a:	89 05 24 47 20 00    	mov    %eax,0x204724(%rip)        # 6071b4 <g_StruClientLinxInfo+0x14>
			g_StruClientLinxInfo.LinkNumber++;
  402a90:	8b 05 12 47 20 00    	mov    0x204712(%rip),%eax        # 6071a8 <g_StruClientLinxInfo+0x8>
  402a96:	83 c0 01             	add    $0x1,%eax
  402a99:	89 05 09 47 20 00    	mov    %eax,0x204709(%rip)        # 6071a8 <g_StruClientLinxInfo+0x8>
  402a9f:	eb 1e                	jmp    402abf <npu_creat_linx+0x260>
		}
		else if(g_StruClientLinxInfo.LinkStatus == SPP_NPU_LINX_DISCONNECTED)
  402aa1:	8b 05 09 47 20 00    	mov    0x204709(%rip),%eax        # 6071b0 <g_StruClientLinxInfo+0x10>
  402aa7:	83 f8 02             	cmp    $0x2,%eax
  402aaa:	75 13                	jne    402abf <npu_creat_linx+0x260>
		{
			g_StruClientLinxInfo.LinkStatus = SPP_NPU_LINX_CONNECTED;
  402aac:	c7 05 fa 46 20 00 01 	movl   $0x1,0x2046fa(%rip)        # 6071b0 <g_StruClientLinxInfo+0x10>
  402ab3:	00 00 00 
			/*update server*/
			g_StruClientLinxInfo.server =server;
  402ab6:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  402ab9:	89 05 f5 46 20 00    	mov    %eax,0x2046f5(%rip)        # 6071b4 <g_StruClientLinxInfo+0x14>
		return ERR_LINX_CLOSE;
	 }
	   ERR("npu_creat_linx error\n");
	   return ERR_LINX_FIND_SERVER;
	}
	return STATUS_OK;
  402abf:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)
  402ac6:	e9 aa 00 00 00       	jmpq   402b75 <npu_creat_linx+0x316>
		
		}
		

	}
	else if(status == ERR_LINX_HUNT_TMOUT)
  402acb:	83 7d ec fb          	cmpl   $0xfffffffffffffffb,-0x14(%rbp)
  402acf:	0f 84 79 fe ff ff    	je     40294e <npu_creat_linx+0xef>
		 goto FindServer;
	}
	else
	{
	   /*discuss with ericsson if we can continue hunt*/
	 if (linx_close(linx) == -1) 
  402ad5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  402ad9:	e8 52 1c 00 00       	callq  404730 <linx_close>
  402ade:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402ae1:	75 4a                	jne    402b2d <npu_creat_linx+0x2ce>
	 {
		ERR("linx_close() failed");
  402ae3:	ba 2d 03 00 00       	mov    $0x32d,%edx
  402ae8:	be 35 51 40 00       	mov    $0x405135,%esi
  402aed:	bf 47 51 40 00       	mov    $0x405147,%edi
  402af2:	b8 00 00 00 00       	mov    $0x0,%eax
  402af7:	e8 ac df ff ff       	callq  400aa8 <printf@plt>
  402afc:	e8 e7 e0 ff ff       	callq  400be8 <__errno_location@plt>
  402b01:	8b 38                	mov    (%rax),%edi
  402b03:	e8 a0 e0 ff ff       	callq  400ba8 <strerror@plt>
  402b08:	48 89 c3             	mov    %rax,%rbx
  402b0b:	e8 d8 e0 ff ff       	callq  400be8 <__errno_location@plt>
  402b10:	8b 30                	mov    (%rax),%esi
  402b12:	48 89 da             	mov    %rbx,%rdx
  402b15:	bf 18 56 40 00       	mov    $0x405618,%edi
  402b1a:	b8 00 00 00 00       	mov    $0x0,%eax
  402b1f:	e8 84 df ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_CLOSE;
  402b24:	c7 45 a4 fe ff ff ff 	movl   $0xfffffffe,-0x5c(%rbp)
  402b2b:	eb 48                	jmp    402b75 <npu_creat_linx+0x316>
	 }
	   ERR("npu_creat_linx error\n");
  402b2d:	ba 30 03 00 00       	mov    $0x330,%edx
  402b32:	be 35 51 40 00       	mov    $0x405135,%esi
  402b37:	bf 47 51 40 00       	mov    $0x405147,%edi
  402b3c:	b8 00 00 00 00       	mov    $0x0,%eax
  402b41:	e8 62 df ff ff       	callq  400aa8 <printf@plt>
  402b46:	e8 9d e0 ff ff       	callq  400be8 <__errno_location@plt>
  402b4b:	8b 38                	mov    (%rax),%edi
  402b4d:	e8 56 e0 ff ff       	callq  400ba8 <strerror@plt>
  402b52:	48 89 c3             	mov    %rax,%rbx
  402b55:	e8 8e e0 ff ff       	callq  400be8 <__errno_location@plt>
  402b5a:	8b 30                	mov    (%rax),%esi
  402b5c:	48 89 da             	mov    %rbx,%rdx
  402b5f:	bf 20 57 40 00       	mov    $0x405720,%edi
  402b64:	b8 00 00 00 00       	mov    $0x0,%eax
  402b69:	e8 3a df ff ff       	callq  400aa8 <printf@plt>
	   return ERR_LINX_FIND_SERVER;
  402b6e:	c7 45 a4 f8 ff ff ff 	movl   $0xfffffff8,-0x5c(%rbp)
  402b75:	8b 45 a4             	mov    -0x5c(%rbp),%eax
	}
	return STATUS_OK;
}
  402b78:	48 83 c4 58          	add    $0x58,%rsp
  402b7c:	5b                   	pop    %rbx
  402b7d:	c9                   	leaveq 
  402b7e:	c3                   	retq   

0000000000402b7f <find_server>:

static int find_server(LINX * linx,const char * server_name,LINX_SPID * server)
{
  402b7f:	55                   	push   %rbp
  402b80:	48 89 e5             	mov    %rsp,%rbp
  402b83:	53                   	push   %rbx
  402b84:	48 83 ec 48          	sub    $0x48,%rsp
  402b88:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402b8c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402b90:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)

	LINX_SIGSELECT sigsel_hunt[] = { 1,LINX_OS_HUNT_SIG };
  402b94:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  402b9b:	c7 45 e4 fb 00 00 00 	movl   $0xfb,-0x1c(%rbp)
	union LINX_SIGNAL *sig;
	
	if(linx_hunt(linx, server_name, NULL) == -1)
  402ba2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  402ba6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402baa:	ba 00 00 00 00       	mov    $0x0,%edx
  402baf:	e8 4c 22 00 00       	callq  404e00 <linx_hunt>
  402bb4:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402bb7:	75 4d                	jne    402c06 <find_server+0x87>
	{
		ERR("linx_hunt() failed");
  402bb9:	ba 3e 03 00 00       	mov    $0x33e,%edx
  402bbe:	be 35 51 40 00       	mov    $0x405135,%esi
  402bc3:	bf 47 51 40 00       	mov    $0x405147,%edi
  402bc8:	b8 00 00 00 00       	mov    $0x0,%eax
  402bcd:	e8 d6 de ff ff       	callq  400aa8 <printf@plt>
  402bd2:	e8 11 e0 ff ff       	callq  400be8 <__errno_location@plt>
  402bd7:	8b 38                	mov    (%rax),%edi
  402bd9:	e8 ca df ff ff       	callq  400ba8 <strerror@plt>
  402bde:	48 89 c3             	mov    %rax,%rbx
  402be1:	e8 02 e0 ff ff       	callq  400be8 <__errno_location@plt>
  402be6:	8b 30                	mov    (%rax),%esi
  402be8:	48 89 da             	mov    %rbx,%rdx
  402beb:	bf 48 57 40 00       	mov    $0x405748,%edi
  402bf0:	b8 00 00 00 00       	mov    $0x0,%eax
  402bf5:	e8 ae de ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_HUNT;
  402bfa:	c7 45 b4 fd ff ff ff 	movl   $0xfffffffd,-0x4c(%rbp)
  402c01:	e9 74 01 00 00       	jmpq   402d7a <find_server+0x1fb>
	}

	if (linx_receive_w_tmo(linx, &sig, NPU_RECEIVE_TIMEOUT, sigsel_hunt) == -1)
  402c06:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  402c0a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  402c0e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402c12:	ba b8 0b 00 00       	mov    $0xbb8,%edx
  402c17:	e8 54 20 00 00       	callq  404c70 <linx_receive_w_tmo>
  402c1c:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402c1f:	75 4d                	jne    402c6e <find_server+0xef>
	{
		ERR("linx_receive_w_tmo() failed");
  402c21:	ba 44 03 00 00       	mov    $0x344,%edx
  402c26:	be 35 51 40 00       	mov    $0x405135,%esi
  402c2b:	bf 47 51 40 00       	mov    $0x405147,%edi
  402c30:	b8 00 00 00 00       	mov    $0x0,%eax
  402c35:	e8 6e de ff ff       	callq  400aa8 <printf@plt>
  402c3a:	e8 a9 df ff ff       	callq  400be8 <__errno_location@plt>
  402c3f:	8b 38                	mov    (%rax),%edi
  402c41:	e8 62 df ff ff       	callq  400ba8 <strerror@plt>
  402c46:	48 89 c3             	mov    %rax,%rbx
  402c49:	e8 9a df ff ff       	callq  400be8 <__errno_location@plt>
  402c4e:	8b 30                	mov    (%rax),%esi
  402c50:	48 89 da             	mov    %rbx,%rdx
  402c53:	bf 30 55 40 00       	mov    $0x405530,%edi
  402c58:	b8 00 00 00 00       	mov    $0x0,%eax
  402c5d:	e8 46 de ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_RCV_TMOUT;
  402c62:	c7 45 b4 fc ff ff ff 	movl   $0xfffffffc,-0x4c(%rbp)
  402c69:	e9 0c 01 00 00       	jmpq   402d7a <find_server+0x1fb>
	}
	if (sig == LINX_NIL) 
  402c6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402c72:	48 85 c0             	test   %rax,%rax
  402c75:	75 1f                	jne    402c96 <find_server+0x117>
	{	
		PRINTF_INFO("Hunting for server on %s timed out."
  402c77:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  402c7b:	bf 70 57 40 00       	mov    $0x405770,%edi
  402c80:	b8 00 00 00 00       	mov    $0x0,%eax
  402c85:	e8 1e de ff ff       	callq  400aa8 <printf@plt>
		       "Check that server is started\n", server_name);		

		return ERR_LINX_HUNT_TMOUT;
  402c8a:	c7 45 b4 fb ff ff ff 	movl   $0xfffffffb,-0x4c(%rbp)
  402c91:	e9 e4 00 00 00       	jmpq   402d7a <find_server+0x1fb>
	}
	PRINTF_INFO("Client: Found server \"%s\". version :%s \n", server_name,NPU_VERSION_NUM);
  402c96:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  402c9a:	ba b1 57 40 00       	mov    $0x4057b1,%edx
  402c9f:	bf b8 57 40 00       	mov    $0x4057b8,%edi
  402ca4:	b8 00 00 00 00       	mov    $0x0,%eax
  402ca9:	e8 fa dd ff ff       	callq  400aa8 <printf@plt>
	*server = linx_sender(linx, &sig); 
  402cae:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  402cb2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402cb6:	e8 25 14 00 00       	callq  4040e0 <linx_sender>
  402cbb:	89 c2                	mov    %eax,%edx
  402cbd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402cc1:	89 10                	mov    %edx,(%rax)
	if (*server == LINX_ILLEGAL_SPID)
  402cc3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402cc7:	8b 00                	mov    (%rax),%eax
  402cc9:	85 c0                	test   %eax,%eax
  402ccb:	75 4a                	jne    402d17 <find_server+0x198>
	{
		ERR("linx_sender() failed");
  402ccd:	ba 52 03 00 00       	mov    $0x352,%edx
  402cd2:	be 35 51 40 00       	mov    $0x405135,%esi
  402cd7:	bf 47 51 40 00       	mov    $0x405147,%edi
  402cdc:	b8 00 00 00 00       	mov    $0x0,%eax
  402ce1:	e8 c2 dd ff ff       	callq  400aa8 <printf@plt>
  402ce6:	e8 fd de ff ff       	callq  400be8 <__errno_location@plt>
  402ceb:	8b 38                	mov    (%rax),%edi
  402ced:	e8 b6 de ff ff       	callq  400ba8 <strerror@plt>
  402cf2:	48 89 c3             	mov    %rax,%rbx
  402cf5:	e8 ee de ff ff       	callq  400be8 <__errno_location@plt>
  402cfa:	8b 30                	mov    (%rax),%esi
  402cfc:	48 89 da             	mov    %rbx,%rdx
  402cff:	bf 48 53 40 00       	mov    $0x405348,%edi
  402d04:	b8 00 00 00 00       	mov    $0x0,%eax
  402d09:	e8 9a dd ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_GET_SENDER;
  402d0e:	c7 45 b4 fa ff ff ff 	movl   $0xfffffffa,-0x4c(%rbp)
  402d15:	eb 63                	jmp    402d7a <find_server+0x1fb>
	}
	/* Free hunt  sig */
	if (linx_free_buf(linx, &sig) == -1)
  402d17:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  402d1b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  402d1f:	e8 1c 1d 00 00       	callq  404a40 <linx_free_buf>
  402d24:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  402d27:	75 4a                	jne    402d73 <find_server+0x1f4>
	{
		ERR("linx_free_buf() failed");
  402d29:	ba 58 03 00 00       	mov    $0x358,%edx
  402d2e:	be 35 51 40 00       	mov    $0x405135,%esi
  402d33:	bf 47 51 40 00       	mov    $0x405147,%edi
  402d38:	b8 00 00 00 00       	mov    $0x0,%eax
  402d3d:	e8 66 dd ff ff       	callq  400aa8 <printf@plt>
  402d42:	e8 a1 de ff ff       	callq  400be8 <__errno_location@plt>
  402d47:	8b 38                	mov    (%rax),%edi
  402d49:	e8 5a de ff ff       	callq  400ba8 <strerror@plt>
  402d4e:	48 89 c3             	mov    %rax,%rbx
  402d51:	e8 92 de ff ff       	callq  400be8 <__errno_location@plt>
  402d56:	8b 30                	mov    (%rax),%esi
  402d58:	48 89 da             	mov    %rbx,%rdx
  402d5b:	bf 90 53 40 00       	mov    $0x405390,%edi
  402d60:	b8 00 00 00 00       	mov    $0x0,%eax
  402d65:	e8 3e dd ff ff       	callq  400aa8 <printf@plt>
		return ERR_LINX_FREE_SIG;
  402d6a:	c7 45 b4 f9 ff ff ff 	movl   $0xfffffff9,-0x4c(%rbp)
  402d71:	eb 07                	jmp    402d7a <find_server+0x1fb>
	}
	return STATUS_OK;
  402d73:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  402d7a:	8b 45 b4             	mov    -0x4c(%rbp),%eax
}
  402d7d:	48 83 c4 48          	add    $0x48,%rsp
  402d81:	5b                   	pop    %rbx
  402d82:	c9                   	leaveq 
  402d83:	c3                   	retq   

0000000000402d84 <npu_get_client_linx_info>:

LINX_CLINET_INFO * npu_get_client_linx_info(int Socketfd)
{
  402d84:	55                   	push   %rbp
  402d85:	48 89 e5             	mov    %rsp,%rbp
  402d88:	53                   	push   %rbx
  402d89:	48 83 ec 18          	sub    $0x18,%rsp
  402d8d:	89 7d f4             	mov    %edi,-0xc(%rbp)
    if(Socketfd == g_StruClientLinxInfo.Socketfd)
  402d90:	8b 05 16 44 20 00    	mov    0x204416(%rip),%eax        # 6071ac <g_StruClientLinxInfo+0xc>
  402d96:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  402d99:	75 0a                	jne    402da5 <npu_get_client_linx_info+0x21>
    {
        return &g_StruClientLinxInfo;
  402d9b:	48 c7 45 e8 a0 71 60 	movq   $0x6071a0,-0x18(%rbp)
  402da2:	00 
  402da3:	eb 49                	jmp    402dee <npu_get_client_linx_info+0x6a>
	}
	else
	{
		ERR("npu_get_client_linx_info failed socketfd is wrong !");
  402da5:	ba 66 03 00 00       	mov    $0x366,%edx
  402daa:	be 35 51 40 00       	mov    $0x405135,%esi
  402daf:	bf 47 51 40 00       	mov    $0x405147,%edi
  402db4:	b8 00 00 00 00       	mov    $0x0,%eax
  402db9:	e8 ea dc ff ff       	callq  400aa8 <printf@plt>
  402dbe:	e8 25 de ff ff       	callq  400be8 <__errno_location@plt>
  402dc3:	8b 38                	mov    (%rax),%edi
  402dc5:	e8 de dd ff ff       	callq  400ba8 <strerror@plt>
  402dca:	48 89 c3             	mov    %rax,%rbx
  402dcd:	e8 16 de ff ff       	callq  400be8 <__errno_location@plt>
  402dd2:	8b 30                	mov    (%rax),%esi
  402dd4:	48 89 da             	mov    %rbx,%rdx
  402dd7:	bf e8 57 40 00       	mov    $0x4057e8,%edi
  402ddc:	b8 00 00 00 00       	mov    $0x0,%eax
  402de1:	e8 c2 dc ff ff       	callq  400aa8 <printf@plt>
		return NULL;
  402de6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  402ded:	00 
  402dee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
}
  402df2:	48 83 c4 18          	add    $0x18,%rsp
  402df6:	5b                   	pop    %rbx
  402df7:	c9                   	leaveq 
  402df8:	c3                   	retq   
  402df9:	90                   	nop
  402dfa:	90                   	nop
  402dfb:	90                   	nop

0000000000402dfc <get_time>:

#define MAX_FR_PORT 3000


long get_time(struct timeval *tv)
{
  402dfc:	55                   	push   %rbp
  402dfd:	48 89 e5             	mov    %rsp,%rbp
  402e00:	48 83 ec 20          	sub    $0x20,%rsp
  402e04:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/* NOTE: This code does not handle wrapping of the timer. */

	long sDiff = -tv->tv_sec;
  402e08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402e0c:	48 8b 00             	mov    (%rax),%rax
  402e0f:	48 f7 d8             	neg    %rax
  402e12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	long uDiff = -tv->tv_usec;
  402e16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402e1a:	48 8b 40 08          	mov    0x8(%rax),%rax
  402e1e:	48 f7 d8             	neg    %rax
  402e21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (gettimeofday(tv, 0))
  402e25:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  402e29:	be 00 00 00 00       	mov    $0x0,%esi
  402e2e:	e8 e5 dc ff ff       	callq  400b18 <gettimeofday@plt>
  402e33:	85 c0                	test   %eax,%eax
  402e35:	74 0f                	je     402e46 <get_time+0x4a>
		printf("gettimeofday() failed.");
  402e37:	bf 30 58 40 00       	mov    $0x405830,%edi
  402e3c:	b8 00 00 00 00       	mov    $0x0,%eax
  402e41:	e8 62 dc ff ff       	callq  400aa8 <printf@plt>

	sDiff += tv->tv_sec;
  402e46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402e4a:	48 8b 00             	mov    (%rax),%rax
  402e4d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
	uDiff += tv->tv_usec;
  402e51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402e55:	48 8b 40 08          	mov    0x8(%rax),%rax
  402e59:	48 01 45 f8          	add    %rax,-0x8(%rbp)

	return sDiff * 1000000 + uDiff;
  402e5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402e61:	48 69 c0 40 42 0f 00 	imul   $0xf4240,%rax,%rax
  402e68:	48 03 45 f8          	add    -0x8(%rbp),%rax
}
  402e6c:	c9                   	leaveq 
  402e6d:	c3                   	retq   

0000000000402e6e <io_fraddr_pack>:
        unsigned int tsgroup:6; 
        unsigned int dlci:16; 
} fraddr_t; 
u32 
io_fraddr_pack(u32 card, u32 trunk, u32 tsgroup, u32 dlci) 
{ 
  402e6e:	55                   	push   %rbp
  402e6f:	48 89 e5             	mov    %rsp,%rbp
  402e72:	89 7d ec             	mov    %edi,-0x14(%rbp)
  402e75:	89 75 e8             	mov    %esi,-0x18(%rbp)
  402e78:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  402e7b:	89 4d e0             	mov    %ecx,-0x20(%rbp)
        fraddr_t a = {0}; //Remember must cleanup memory at first! 
  402e7e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
        assert(sizeof(fraddr_t) == 4); 
        a.card = card-1; 
  402e85:	8b 45 ec             	mov    -0x14(%rbp),%eax
  402e88:	83 e8 01             	sub    $0x1,%eax
  402e8b:	83 e0 07             	and    $0x7,%eax
  402e8e:	89 c2                	mov    %eax,%edx
  402e90:	83 e2 07             	and    $0x7,%edx
  402e93:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  402e97:	83 e0 f8             	and    $0xfffffffffffffff8,%eax
  402e9a:	09 d0                	or     %edx,%eax
  402e9c:	88 45 f0             	mov    %al,-0x10(%rbp)
        a.trunk = trunk-1; 
  402e9f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  402ea2:	83 e8 01             	sub    $0x1,%eax
  402ea5:	83 e0 3f             	and    $0x3f,%eax
  402ea8:	0f b6 c0             	movzbl %al,%eax
  402eab:	83 e0 3f             	and    $0x3f,%eax
  402eae:	8d 14 c5 00 00 00 00 	lea    0x0(,%rax,8),%edx
  402eb5:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  402eb9:	66 25 07 fe          	and    $0xfe07,%ax
  402ebd:	09 d0                	or     %edx,%eax
  402ebf:	66 89 45 f0          	mov    %ax,-0x10(%rbp)
        a.tsgroup = tsgroup; 
  402ec3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  402ec6:	83 e0 3f             	and    $0x3f,%eax
  402ec9:	83 e0 3f             	and    $0x3f,%eax
  402ecc:	8d 14 00             	lea    (%rax,%rax,1),%edx
  402ecf:	0f b6 45 f1          	movzbl -0xf(%rbp),%eax
  402ed3:	83 e0 81             	and    $0xffffffffffffff81,%eax
  402ed6:	09 d0                	or     %edx,%eax
  402ed8:	88 45 f1             	mov    %al,-0xf(%rbp)
        a.dlci = dlci; 
  402edb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  402ede:	0f b7 c0             	movzwl %ax,%eax
  402ee1:	89 c2                	mov    %eax,%edx
  402ee3:	c1 e2 0f             	shl    $0xf,%edx
  402ee6:	8b 45 f0             	mov    -0x10(%rbp),%eax
  402ee9:	25 ff 7f 00 80       	and    $0x80007fff,%eax
  402eee:	09 d0                	or     %edx,%eax
  402ef0:	89 45 f0             	mov    %eax,-0x10(%rbp)
        return *(u32*)&a; 
  402ef3:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  402ef7:	8b 00                	mov    (%rax),%eax
} 
  402ef9:	c9                   	leaveq 
  402efa:	c3                   	retq   

0000000000402efb <io_fraddr_unpack>:
void 
io_fraddr_unpack(u32 frport, u32* card, u32* trunk, u32* tsgroup, u32* dlci) 
{ 
  402efb:	55                   	push   %rbp
  402efc:	48 89 e5             	mov    %rsp,%rbp
  402eff:	89 7d ec             	mov    %edi,-0x14(%rbp)
  402f02:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  402f06:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  402f0a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  402f0e:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
        fraddr_t* a; 
        assert(sizeof(fraddr_t) == 4); 
        a = (fraddr_t*)&frport; 
  402f12:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
  402f16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        *card = (u32)(a->card) + 1; 
  402f1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f1e:	0f b6 00             	movzbl (%rax),%eax
  402f21:	83 e0 07             	and    $0x7,%eax
  402f24:	0f b6 c0             	movzbl %al,%eax
  402f27:	8d 50 01             	lea    0x1(%rax),%edx
  402f2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402f2e:	89 10                	mov    %edx,(%rax)
        *trunk = (u32)(a->trunk) + 1; 
  402f30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f34:	0f b7 00             	movzwl (%rax),%eax
  402f37:	66 c1 e8 03          	shr    $0x3,%ax
  402f3b:	83 e0 3f             	and    $0x3f,%eax
  402f3e:	0f b6 c0             	movzbl %al,%eax
  402f41:	8d 50 01             	lea    0x1(%rax),%edx
  402f44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402f48:	89 10                	mov    %edx,(%rax)
        *tsgroup = a->tsgroup; 
  402f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f4e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  402f52:	d0 e8                	shr    %al
  402f54:	83 e0 3f             	and    $0x3f,%eax
  402f57:	0f b6 d0             	movzbl %al,%edx
  402f5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402f5e:	89 10                	mov    %edx,(%rax)
        *dlci = a->dlci; 
  402f60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402f64:	8b 00                	mov    (%rax),%eax
  402f66:	c1 e8 0f             	shr    $0xf,%eax
  402f69:	80 e4 ff             	and    $0xff,%ah
  402f6c:	0f b7 d0             	movzwl %ax,%edx
  402f6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402f73:	89 10                	mov    %edx,(%rax)
}
  402f75:	c9                   	leaveq 
  402f76:	c3                   	retq   

0000000000402f77 <np_inital_set_test>:
						  /*  NRI_bitLen,  MACsrc[6],  				 MACdst[6],                                    NS_header[4](bvci =99)*/
u8	fr_set_ul_unitdata[] = {0x06, 0x00,0x50,0x56,0xc0,0x00,0x08, 0x00,0x13,0x5E,0xE9,0xA4,0xAC, 0x00,0x00,0x00,0x63};
u8	fr_set_ul_reset[] = {0x06,  0x00,0x13,0x5E,0xE9,0xA4,0xAC, 0x00,0x50,0x56,0xc0,0x00,0x08,  0x02,0x00,0x00,0x63};

void np_inital_set_test(STRU_SET_INITAIL_CONFIG *p)
{	
  402f77:	55                   	push   %rbp
  402f78:	48 89 e5             	mov    %rsp,%rbp
  402f7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	/*gloab initial for test */
	p->ifIpaddr = 0x0aaa21c1;/*10.170.33.193*/
  402f7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402f83:	c7 40 14 c1 21 aa 0a 	movl   $0xaaa21c1,0x14(%rax)
	p->ifIpNetMask = 0xffffff80; /*255.255.255.128*/
  402f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402f8e:	c7 40 18 80 ff ff ff 	movl   $0xffffff80,0x18(%rax)
	//p->ifIpaddr = 0x0a88205d;/*10.136.32.93*/
	//p->ifIpNetMask = 0xfffffffff8; /*255.255.255.248*/
	
	p->VlanFlag = NPU_VLAN_ENABLE;
  402f95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402f99:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	p->ifMACsrc[0] = 0x00;
  402f9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fa3:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
	p->ifMACsrc[1] = 0x01;
  402fa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fab:	c6 40 0d 01          	movb   $0x1,0xd(%rax)
	p->ifMACsrc[2] = 0x02;
  402faf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fb3:	c6 40 0e 02          	movb   $0x2,0xe(%rax)
	p->ifMACsrc[3] = 0x03;
  402fb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fbb:	c6 40 0f 03          	movb   $0x3,0xf(%rax)
	p->ifMACsrc[4] = 0x04;
  402fbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fc3:	c6 40 10 04          	movb   $0x4,0x10(%rax)
	p->ifMACsrc[5] = 0x05;	
  402fc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fcb:	c6 40 11 05          	movb   $0x5,0x11(%rax)
	p->VlanTag =  133;
  402fcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fd3:	c7 40 04 85 00 00 00 	movl   $0x85,0x4(%rax)
	p->stm1_num = 1;
  402fda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fde:	c7 40 1c 01 00 00 00 	movl   $0x1,0x1c(%rax)
	p->stru_stm1_cfg_info[0].stm1Valid = NPU_VALID;
  402fe5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402fe9:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%rax)
	//p->stru_stm1_cfg_info[0].trunk_num = 5; //this num means how many trunks is avaliable in the E1 flow, for every trunk U should set it's ralatively info below!

	for(u32 trunk_num =0;trunk_num < 5; trunk_num++)
  402ff0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  402ff7:	eb 73                	jmp    40306c <np_inital_set_test+0xf5>
	{
		p->stru_stm1_cfg_info[0].trunk_info[trunk_num].trunkValid = NPU_VALID;
  402ff9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  402ffc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  403000:	89 c0                	mov    %eax,%eax
  403002:	48 c1 e0 02          	shl    $0x2,%rax
  403006:	48 89 c2             	mov    %rax,%rdx
  403009:	48 c1 e2 06          	shl    $0x6,%rdx
  40300d:	48 01 d0             	add    %rdx,%rax
  403010:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  403014:	48 83 c0 2c          	add    $0x2c,%rax
  403018:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		p->stru_stm1_cfg_info[0].trunk_info[trunk_num].group_info[0].groupValid = NPU_VALID;
  40301e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403021:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  403025:	89 c0                	mov    %eax,%eax
  403027:	48 c1 e0 02          	shl    $0x2,%rax
  40302b:	48 89 c2             	mov    %rax,%rdx
  40302e:	48 c1 e2 06          	shl    $0x6,%rdx
  403032:	48 01 d0             	add    %rdx,%rax
  403035:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  403039:	48 83 c0 30          	add    $0x30,%rax
  40303d:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		p->stru_stm1_cfg_info[0].trunk_info[trunk_num].group_info[0].slot_selection = 0xfffefffe;
  403043:	8b 45 fc             	mov    -0x4(%rbp),%eax
  403046:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40304a:	89 c0                	mov    %eax,%eax
  40304c:	48 c1 e0 02          	shl    $0x2,%rax
  403050:	48 89 c2             	mov    %rax,%rdx
  403053:	48 c1 e2 06          	shl    $0x6,%rdx
  403057:	48 01 d0             	add    %rdx,%rax
  40305a:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  40305e:	48 83 c0 34          	add    $0x34,%rax
  403062:	c7 00 fe ff fe ff    	movl   $0xfffefffe,(%rax)
	p->VlanTag =  133;
	p->stm1_num = 1;
	p->stru_stm1_cfg_info[0].stm1Valid = NPU_VALID;
	//p->stru_stm1_cfg_info[0].trunk_num = 5; //this num means how many trunks is avaliable in the E1 flow, for every trunk U should set it's ralatively info below!

	for(u32 trunk_num =0;trunk_num < 5; trunk_num++)
  403068:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  40306c:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  403070:	76 87                	jbe    402ff9 <np_inital_set_test+0x82>
		p->stru_stm1_cfg_info[0].trunk_info[trunk_num].trunkValid = NPU_VALID;
		p->stru_stm1_cfg_info[0].trunk_info[trunk_num].group_info[0].groupValid = NPU_VALID;
		p->stru_stm1_cfg_info[0].trunk_info[trunk_num].group_info[0].slot_selection = 0xfffefffe;
	}
	
	p->routeInfo[0].IpDst = ipaddr_dst;
  403072:	8b 15 6c 40 20 00    	mov    0x20406c(%rip),%edx        # 6070e4 <ipaddr_dst>
  403078:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40307c:	89 90 40 80 00 00    	mov    %edx,0x8040(%rax)
	p->routeInfo[0].GatewayIP = ipaddr_dst;
  403082:	8b 15 5c 40 20 00    	mov    0x20405c(%rip),%edx        # 6070e4 <ipaddr_dst>
  403088:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40308c:	89 90 44 80 00 00    	mov    %edx,0x8044(%rax)
}
  403092:	c9                   	leaveq 
  403093:	c3                   	retq   

0000000000403094 <ioctl_set_rule>:
	unsigned int NS_BVCI:16;
}update_bvci_t;


int ioctl_set_rule(u32 cmd, u32 vfport, u32 * value)
{
  403094:	55                   	push   %rbp
  403095:	48 89 e5             	mov    %rsp,%rbp
  403098:	48 81 ec e0 82 00 00 	sub    $0x82e0,%rsp
  40309f:	89 bd 3c 7d ff ff    	mov    %edi,-0x82c4(%rbp)
  4030a5:	89 b5 38 7d ff ff    	mov    %esi,-0x82c8(%rbp)
  4030ab:	48 89 95 30 7d ff ff 	mov    %rdx,-0x82d0(%rbp)
	int status;
	void * p_set;
	union set_value * rule_set;

	rule_set = malloc(10);
  4030b2:	bf 0a 00 00 00       	mov    $0xa,%edi
  4030b7:	e8 8c da ff ff       	callq  400b48 <malloc@plt>
  4030bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	switch(cmd)
  4030c0:	8b 85 3c 7d ff ff    	mov    -0x82c4(%rbp),%eax
  4030c6:	83 e8 64             	sub    $0x64,%eax
  4030c9:	89 85 28 7d ff ff    	mov    %eax,-0x82d8(%rbp)
  4030cf:	83 bd 28 7d ff ff 08 	cmpl   $0x8,-0x82d8(%rbp)
  4030d6:	0f 87 77 02 00 00    	ja     403353 <ioctl_set_rule+0x2bf>
  4030dc:	8b 85 28 7d ff ff    	mov    -0x82d8(%rbp),%eax
  4030e2:	48 8b 04 c5 68 58 40 	mov    0x405868(,%rax,8),%rax
  4030e9:	00 
  4030ea:	ff e0                	jmpq   *%rax
		case NPU_SET_INITIAL_CONFIG:
		{
			//printf("\nNPU_SET_INITIAL_CONFIG in###\n");
			STRU_SET_INITAIL_CONFIG stru_set_initial_cfg;

			np_inital_set_test(&stru_set_initial_cfg);
  4030ec:	48 8d bd 40 7d ff ff 	lea    -0x82c0(%rbp),%rdi
  4030f3:	e8 7f fe ff ff       	callq  402f77 <np_inital_set_test>
			
			p_set =&stru_set_initial_cfg;
  4030f8:	48 8d 85 40 7d ff ff 	lea    -0x82c0(%rbp),%rax
  4030ff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403103:	e9 61 02 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>
		}
		
		case NPU_SET_FR_UPLINK_PATH_RULE:
		{
			//printf("\nNPU_SET_FR_UPLINK_PATH_RULE in###\n");
			rule_set->NRIValue = *value;
  403108:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  40310f:	8b 10                	mov    (%rax),%edx
  403111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403115:	89 10                	mov    %edx,(%rax)
			STRU_SET_FR_UPLINK_PATH_RULE stru_set_uplink_path_rule;
			stru_set_uplink_path_rule.OptMode = SET_RULE_TABLE;
  403117:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
			stru_set_uplink_path_rule.vfport = vfport;
  40311e:	8b 85 38 7d ff ff    	mov    -0x82c8(%rbp),%eax
  403124:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			stru_set_uplink_path_rule.NRIValue = rule_set->NRIValue;
  403127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40312b:	8b 00                	mov    (%rax),%eax
  40312d:	89 45 d8             	mov    %eax,-0x28(%rbp)
			stru_set_uplink_path_rule.PortSrc = udp_port_src;
  403130:	0f b7 05 b1 3f 20 00 	movzwl 0x203fb1(%rip),%eax        # 6070e8 <udp_port_src>
  403137:	0f b7 c0             	movzwl %ax,%eax
  40313a:	89 45 dc             	mov    %eax,-0x24(%rbp)
			p_set = &stru_set_uplink_path_rule;
  40313d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  403141:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403145:	e9 1f 02 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>

		}
		case NPU_SET_FR_UPLINK_PATH_LINK_TABLE:
		{
			//printf("\nNPU_SET_FR_UPLINK_PATH_RULE in###\n");
			rule_set->NRIValue = *value;
  40314a:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  403151:	8b 10                	mov    (%rax),%edx
  403153:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403157:	89 10                	mov    %edx,(%rax)
			STRU_SET_FR_UPLINK_PATH_LINK_TABLE stru_set_uplink_path_rule;
			stru_set_uplink_path_rule.PortSrc = udp_port_src;
  403159:	0f b7 05 88 3f 20 00 	movzwl 0x203f88(%rip),%eax        # 6070e8 <udp_port_src>
  403160:	0f b7 c0             	movzwl %ax,%eax
  403163:	89 85 40 7d ff ff    	mov    %eax,-0x82c0(%rbp)
			
			stru_set_uplink_path_rule.IpEpAcitveNum =2;
  403169:	c7 85 44 7d ff ff 02 	movl   $0x2,-0x82bc(%rbp)
  403170:	00 00 00 
			stru_set_uplink_path_rule.IpEp[0].IpDst = ipaddr_dst;
  403173:	8b 05 6b 3f 20 00    	mov    0x203f6b(%rip),%eax        # 6070e4 <ipaddr_dst>
  403179:	89 85 48 7d ff ff    	mov    %eax,-0x82b8(%rbp)
			stru_set_uplink_path_rule.IpEp[0].PortDst = udp_port_dst;
  40317f:	8b 05 67 3f 20 00    	mov    0x203f67(%rip),%eax        # 6070ec <udp_port_dst>
  403185:	66 89 85 4e 7d ff ff 	mov    %ax,-0x82b2(%rbp)
			stru_set_uplink_path_rule.IpEp[0].Flag = LOCAL_FLAG;	
  40318c:	66 c7 85 4c 7d ff ff 	movw   $0x0,-0x82b4(%rbp)
  403193:	00 00 
			
		    stru_set_uplink_path_rule.IpEp[1].IpDst = ipaddr_dst;			
  403195:	8b 05 49 3f 20 00    	mov    0x203f49(%rip),%eax        # 6070e4 <ipaddr_dst>
  40319b:	89 85 50 7d ff ff    	mov    %eax,-0x82b0(%rbp)
			stru_set_uplink_path_rule.IpEp[1].PortDst = udp_port_dst+1;
  4031a1:	8b 05 45 3f 20 00    	mov    0x203f45(%rip),%eax        # 6070ec <udp_port_dst>
  4031a7:	83 c0 01             	add    $0x1,%eax
  4031aa:	66 89 85 56 7d ff ff 	mov    %ax,-0x82aa(%rbp)
			stru_set_uplink_path_rule.IpEp[1].Flag = LOCAL_FLAG;	
  4031b1:	66 c7 85 54 7d ff ff 	movw   $0x0,-0x82ac(%rbp)
  4031b8:	00 00 
			p_set = &stru_set_uplink_path_rule;
  4031ba:	48 8d 85 40 7d ff ff 	lea    -0x82c0(%rbp),%rax
  4031c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4031c5:	e9 9f 01 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>
		}

		case NPU_DELETE_FR_UPLINK_PATH_RULE:
		{
			//printf("\nNPU_DELETE_FR_UPLINK_PATH_RULE in###\n");
			rule_set->NRIValue = *value;
  4031ca:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  4031d1:	8b 10                	mov    (%rax),%edx
  4031d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4031d7:	89 10                	mov    %edx,(%rax)
			STRU_DELETE_FR_UPLINK_PATH_RULE stru_delete_fr_uplink_path_rule;
			stru_delete_fr_uplink_path_rule.DeleteMode = DEL_UL_RULE_TALBE_BASED_ON_VPORT_NRI;
  4031d9:	c7 45 c0 03 00 00 00 	movl   $0x3,-0x40(%rbp)
			stru_delete_fr_uplink_path_rule.vfport = vfport;
  4031e0:	8b 85 38 7d ff ff    	mov    -0x82c8(%rbp),%eax
  4031e6:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			stru_delete_fr_uplink_path_rule.NRIValue = rule_set->NRIValue;
  4031e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4031ed:	8b 00                	mov    (%rax),%eax
  4031ef:	89 45 c8             	mov    %eax,-0x38(%rbp)
			
			p_set = &stru_delete_fr_uplink_path_rule;
  4031f2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4031f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4031fa:	e9 6a 01 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>

		case NPU_SET_FR_DOWNLINK_PATH_RULE:
		{
			//printf("\nNPU_SET_FR_DOWNLINK_PATH_RULE in###\n");
			STRU_SET_FR_DOWNLINK_PATH_RULE stru_set_fr_downlink_path_rule;
			rule_set->NS_BVCI = *(u16 *)value;  /* Note : error here, need get value from union update_bvci_t */
  4031ff:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  403206:	0f b7 10             	movzwl (%rax),%edx
  403209:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40320d:	66 89 10             	mov    %dx,(%rax)
			//printf("Get NS_BVCI = %x! \n", rule_set->NS_BVCI);
			stru_set_fr_downlink_path_rule.OptMode  = SET_RULE_TABLE;
  403210:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			stru_set_fr_downlink_path_rule.DportStartValue = udp_port_src;
  403217:	0f b7 05 ca 3e 20 00 	movzwl 0x203eca(%rip),%eax        # 6070e8 <udp_port_src>
  40321e:	66 89 45 b4          	mov    %ax,-0x4c(%rbp)
			stru_set_fr_downlink_path_rule.BVCI = rule_set->NS_BVCI;
  403222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403226:	0f b7 00             	movzwl (%rax),%eax
  403229:	66 89 45 b6          	mov    %ax,-0x4a(%rbp)
			stru_set_fr_downlink_path_rule.BVCInew= 0x5a6a;
  40322d:	66 c7 45 b8 6a 5a    	movw   $0x5a6a,-0x48(%rbp)
			stru_set_fr_downlink_path_rule.NSEI = 10000;
  403233:	66 c7 45 ba 10 27    	movw   $0x2710,-0x46(%rbp)

			p_set = &stru_set_fr_downlink_path_rule;
  403239:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40323d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403241:	e9 23 01 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>
		}

		case NPU_DELETE_FR_DOWNLINK_PATH_RULE:
		{
			//printf("\nSTRU_DELETE_FR_DOWNLINK_PATH_RULE in###\n");
			rule_set->NS_BVCI = *(u16 *)value;
  403246:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  40324d:	0f b7 10             	movzwl (%rax),%edx
  403250:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403254:	66 89 10             	mov    %dx,(%rax)
			//printf("Get NS_BVCI = %x! \n", rule_set->NS_BVCI);
			STRU_DELETE_FR_DOWNLINK_PATH_RULE stru_delete_fr_downlink_path_rule;
			stru_delete_fr_downlink_path_rule.BVCI = rule_set->NS_BVCI;
  403257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40325b:	0f b7 00             	movzwl (%rax),%eax
  40325e:	66 89 45 a6          	mov    %ax,-0x5a(%rbp)
			stru_delete_fr_downlink_path_rule.DportStartValue = udp_port_src;
  403262:	0f b7 05 7f 3e 20 00 	movzwl 0x203e7f(%rip),%eax        # 6070e8 <udp_port_src>
  403269:	66 89 45 a4          	mov    %ax,-0x5c(%rbp)
			p_set = &stru_delete_fr_downlink_path_rule;
  40326d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  403271:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403275:	e9 ef 00 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>
		}		

		case NPU_SET_FR_DOWNLINK_PATH_LINK_TABLE:
		{
			//printf("\nSTRU_DELETE_FR_DOWNLINK_PATH_RULE in###\n");
			rule_set->NS_BVCI = *(u16 *)value;
  40327a:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  403281:	0f b7 10             	movzwl (%rax),%edx
  403284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403288:	66 89 10             	mov    %dx,(%rax)
			//printf("Get NS_BVCI = %x! \n", rule_set->NS_BVCI);
			STRU_SET_FR_DOWNLINK_PATH_LINK_TABLE stru_set_fr_downlink_path_link_table;
			stru_set_fr_downlink_path_link_table.FrVportAcitveNum = 1;
  40328b:	c7 85 44 7d ff ff 01 	movl   $0x1,-0x82bc(%rbp)
  403292:	00 00 00 
			stru_set_fr_downlink_path_link_table.NSEI = 10000;
  403295:	66 c7 85 40 7d ff ff 	movw   $0x2710,-0x82c0(%rbp)
  40329c:	10 27 
			stru_set_fr_downlink_path_link_table.NsvcGrp[0].Flag = LOCAL_FLAG;
  40329e:	66 c7 85 48 7d ff ff 	movw   $0x0,-0x82b8(%rbp)
  4032a5:	00 00 
			stru_set_fr_downlink_path_link_table.NsvcGrp[0].vfort = vfport;
  4032a7:	8b 85 38 7d ff ff    	mov    -0x82c8(%rbp),%eax
  4032ad:	89 85 4c 7d ff ff    	mov    %eax,-0x82b4(%rbp)
			p_set = &stru_set_fr_downlink_path_link_table;
  4032b3:	48 8d 85 40 7d ff ff 	lea    -0x82c0(%rbp),%rax
  4032ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4032be:	e9 a6 00 00 00       	jmpq   403369 <ioctl_set_rule+0x2d5>

				
		case NPU_SET_UPDATE_BVCI_PATH_RULE:
        {
			//printf("\nNPU_SET_UPDATE_BVCI_PATH_RULE in###\n");
			rule_set->update_NS_BVCI = *(u16 *)value;
  4032c3:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  4032ca:	0f b7 10             	movzwl (%rax),%edx
  4032cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4032d1:	66 89 10             	mov    %dx,(%rax)

			//printf("Get update_NS_BVCI = %x! \n", rule_set->NS_BVCI);
			STRU_SET_UPDATE_BVCI_PATH_RULE stru_set_update_vuci_path_rule;
			stru_set_update_vuci_path_rule.OptMode = SET_RULE_TABLE;
  4032d4:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
			stru_set_update_vuci_path_rule.NS_BVCI = rule_set->update_NS_BVCI;
  4032db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4032df:	0f b7 00             	movzwl (%rax),%eax
  4032e2:	66 89 45 9a          	mov    %ax,-0x66(%rbp)
			
			rule_set->NS_BVCI = *((u16 *)value+1);
  4032e6:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  4032ed:	48 83 c0 02          	add    $0x2,%rax
  4032f1:	0f b7 10             	movzwl (%rax),%edx
  4032f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4032f8:	66 89 10             	mov    %dx,(%rax)

			//printf("Get NS_BVCI = %x! \n", rule_set->NS_BVCI);
			stru_set_update_vuci_path_rule.NS_BVCI_old = rule_set->NS_BVCI;
  4032fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4032ff:	0f b7 00             	movzwl (%rax),%eax
  403302:	66 89 45 98          	mov    %ax,-0x68(%rbp)
			stru_set_update_vuci_path_rule.vfport = vfport;
  403306:	8b 85 38 7d ff ff    	mov    -0x82c8(%rbp),%eax
  40330c:	89 45 94             	mov    %eax,-0x6c(%rbp)

			p_set = &stru_set_update_vuci_path_rule;
  40330f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  403313:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403317:	eb 50                	jmp    403369 <ioctl_set_rule+0x2d5>
		}
		case NPU_DELETE_UPDATE_BVCI_PATH_RULE:
		{
			//printf("\nNPU_DELETE_UPDATE_BVCI_PATH_RULE in###\n");
			//rule_set->NS_BVCI = (update_bvci_t)*value.NS_BVCI;
			rule_set->NS_BVCI = *((u16 *)value+1);
  403319:	48 8b 85 30 7d ff ff 	mov    -0x82d0(%rbp),%rax
  403320:	48 83 c0 02          	add    $0x2,%rax
  403324:	0f b7 10             	movzwl (%rax),%edx
  403327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40332b:	66 89 10             	mov    %dx,(%rax)
			//printf("Get NS_BVCI = %x! \n", rule_set->NS_BVCI);
			STRU_DELETE_UPDATE_BVCI_PATH_RULE stru_delete_upgrade_bvci_path_rule;
            stru_delete_upgrade_bvci_path_rule.OptMode = DEL_UL_UPDATE_BVCI_TALBE_BASED_ON_VPORT_BVCI;			
  40332e:	c7 45 80 07 00 00 00 	movl   $0x7,-0x80(%rbp)
			stru_delete_upgrade_bvci_path_rule.NS_BVCI_old = rule_set->NS_BVCI;
  403335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403339:	0f b7 00             	movzwl (%rax),%eax
  40333c:	66 89 45 88          	mov    %ax,-0x78(%rbp)
			stru_delete_upgrade_bvci_path_rule.vfport = vfport;
  403340:	8b 85 38 7d ff ff    	mov    -0x82c8(%rbp),%eax
  403346:	89 45 84             	mov    %eax,-0x7c(%rbp)

			p_set = &stru_delete_upgrade_bvci_path_rule;
  403349:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40334d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403351:	eb 16                	jmp    403369 <ioctl_set_rule+0x2d5>

            break;
		}
		
		default:
			printf("Error for link.\n");
  403353:	bf 47 58 40 00       	mov    $0x405847,%edi
  403358:	e8 9b d7 ff ff       	callq  400af8 <puts@plt>
			return -1;
  40335d:	c7 85 2c 7d ff ff ff 	movl   $0xffffffff,-0x82d4(%rbp)
  403364:	ff ff ff 
  403367:	eb 34                	jmp    40339d <ioctl_set_rule+0x309>
						
	}
	

	status = npu_ioctrl(cmd, p_set);
  403369:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  40336d:	8b bd 3c 7d ff ff    	mov    -0x82c4(%rbp),%edi
  403373:	e8 1c e4 ff ff       	callq  401794 <npu_ioctrl>
  403378:	89 45 ec             	mov    %eax,-0x14(%rbp)

	free(rule_set);
  40337b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  40337f:	e8 f4 d7 ff ff       	callq  400b78 <free@plt>
	
	if(0 != status)
  403384:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  403388:	74 0a                	je     403394 <ioctl_set_rule+0x300>
	{
		printf("set failed\n");
  40338a:	bf 57 58 40 00       	mov    $0x405857,%edi
  40338f:	e8 64 d7 ff ff       	callq  400af8 <puts@plt>
	}			
	return status;
  403394:	8b 45 ec             	mov    -0x14(%rbp),%eax
  403397:	89 85 2c 7d ff ff    	mov    %eax,-0x82d4(%rbp)
  40339d:	8b 85 2c 7d ff ff    	mov    -0x82d4(%rbp),%eax
}
  4033a3:	c9                   	leaveq 
  4033a4:	c3                   	retq   

00000000004033a5 <main>:
#define DLCI_MANU 1

u16 DL_set_num = 0;

int main(int argc, char *argv[])
{
  4033a5:	55                   	push   %rbp
  4033a6:	48 89 e5             	mov    %rsp,%rbp
  4033a9:	53                   	push   %rbx
  4033aa:	48 81 ec c8 02 00 00 	sub    $0x2c8,%rsp
  4033b1:	89 bd 7c fd ff ff    	mov    %edi,-0x284(%rbp)
  4033b7:	48 89 b5 70 fd ff ff 	mov    %rsi,-0x290(%rbp)
	int Socketfd[100];
    int send_status,ioctl_status;
	int length = 0;
  4033be:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
	u8 vp_type,a_type, dlci_type= DLCI_AUTO;
  4033c5:	c6 45 99 00          	movb   $0x0,-0x67(%rbp)
	u32 udp_rsv_port,NRI_value;
	u16 udp_rsv_port_src,multi_port_cnt =1,DL_opt = 0,NRI_opt = 0;
  4033c9:	66 c7 45 9a 01 00    	movw   $0x1,-0x66(%rbp)
  4033cf:	66 c7 45 9c 00 00    	movw   $0x0,-0x64(%rbp)
  4033d5:	66 c7 45 9e 00 00    	movw   $0x0,-0x62(%rbp)
	u32 udp_rsv_ipaddr_src;
	u32 udp_rsv_ipaddr_dst;	
	u32 fr_a;
	/*u32 io_cmd = 0;*/
	u16 dlci = 820;
  4033db:	66 c7 45 a6 34 03    	movw   $0x334,-0x5a(%rbp)
	FR_PACKET *fr_pack;

	float ack = 0; int loop_cnt = 0,opt;
  4033e1:	b8 00 00 00 00       	mov    $0x0,%eax
  4033e6:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  4033e9:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
	long max = 0, min = LONG_MAX;
  4033f0:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  4033f7:	00 
  4033f8:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%rbp)
  4033ff:	c7 45 cc ff ff ff 7f 	movl   $0x7fffffff,-0x34(%rbp)

	struct timeval tv;
	long clk;

	if(argc < 2){
  403406:	83 bd 7c fd ff ff 01 	cmpl   $0x1,-0x284(%rbp)
  40340d:	0f 8f 11 01 00 00    	jg     403524 <main+0x17f>
	printf("Error:Too few arguments.\n");
  403413:	bf b0 58 40 00       	mov    $0x4058b0,%edi
  403418:	e8 db d6 ff ff       	callq  400af8 <puts@plt>
	exit(0);
  40341d:	bf 00 00 00 00       	mov    $0x0,%edi
  403422:	e8 e1 d6 ff ff       	callq  400b08 <exit@plt>
	}

	while((opt = getopt(argc, argv, "n:p:td:u:"))!= -1) {
		switch(opt){
  403427:	8b 45 bc             	mov    -0x44(%rbp),%eax
  40342a:	83 e8 64             	sub    $0x64,%eax
  40342d:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
  403433:	83 bd 68 fd ff ff 11 	cmpl   $0x11,-0x298(%rbp)
  40343a:	0f 87 b8 00 00 00    	ja     4034f8 <main+0x153>
  403440:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
  403446:	48 8b 04 c5 e8 5b 40 	mov    0x405be8(,%rax,8),%rax
  40344d:	00 
  40344e:	ff e0                	jmpq   *%rax
		/* Loop count times. */	
		case 'n':
			loop_cnt = atoi(optarg);
  403450:	48 8b 3d 29 3d 20 00 	mov    0x203d29(%rip),%rdi        # 607180 <optarg@@GLIBC_2.2.5>
  403457:	e8 5c d7 ff ff       	callq  400bb8 <atoi@plt>
  40345c:	89 45 b8             	mov    %eax,-0x48(%rbp)
			printf("The loop count: %d\n",loop_cnt);
  40345f:	8b 75 b8             	mov    -0x48(%rbp),%esi
  403462:	bf c9 58 40 00       	mov    $0x4058c9,%edi
  403467:	b8 00 00 00 00       	mov    $0x0,%eax
  40346c:	e8 37 d6 ff ff       	callq  400aa8 <printf@plt>
  403471:	e9 ae 00 00 00       	jmpq   403524 <main+0x17f>
			break;
		/* Open port numbers. */
		case 'p':
			multi_port_cnt = atoi(optarg);
  403476:	48 8b 3d 03 3d 20 00 	mov    0x203d03(%rip),%rdi        # 607180 <optarg@@GLIBC_2.2.5>
  40347d:	e8 36 d7 ff ff       	callq  400bb8 <atoi@plt>
  403482:	66 89 45 9a          	mov    %ax,-0x66(%rbp)
			printf("The multi port count: %d\n",multi_port_cnt);
  403486:	0f b7 75 9a          	movzwl -0x66(%rbp),%esi
  40348a:	bf dd 58 40 00       	mov    $0x4058dd,%edi
  40348f:	b8 00 00 00 00       	mov    $0x0,%eax
  403494:	e8 0f d6 ff ff       	callq  400aa8 <printf@plt>
  403499:	e9 86 00 00 00       	jmpq   403524 <main+0x17f>
			}
			else{
			printf("The vp_type is: %s\n", (a_type == VP_TYPE_UDP)? "VP_TYPE_UDP":"VP_TYPE_FR");
			}
		#endif 	
			a_type = VP_TYPE_FR;
  40349e:	c6 45 98 02          	movb   $0x2,-0x68(%rbp)
			printf("The default vp_type in this TC is: VP_TYPE_FR. \n");
  4034a2:	bf f8 58 40 00       	mov    $0x4058f8,%edi
  4034a7:	e8 4c d6 ff ff       	callq  400af8 <puts@plt>
  4034ac:	eb 76                	jmp    403524 <main+0x17f>
			break;
		/* Enable NR packet manual set. */
		case 'd':
			DL_opt = atoi(optarg);  //modify 'd' symbol for downlink flow id. 20100520
  4034ae:	48 8b 3d cb 3c 20 00 	mov    0x203ccb(%rip),%rdi        # 607180 <optarg@@GLIBC_2.2.5>
  4034b5:	e8 fe d6 ff ff       	callq  400bb8 <atoi@plt>
  4034ba:	66 89 45 9c          	mov    %ax,-0x64(%rbp)
			printf("The down link flow value = %d.\n",DL_opt);
  4034be:	0f b7 75 9c          	movzwl -0x64(%rbp),%esi
  4034c2:	bf 28 59 40 00       	mov    $0x405928,%edi
  4034c7:	b8 00 00 00 00       	mov    $0x0,%eax
  4034cc:	e8 d7 d5 ff ff       	callq  400aa8 <printf@plt>
  4034d1:	eb 51                	jmp    403524 <main+0x17f>
			break;

		case 'u':
			NRI_opt = atoi(optarg);
  4034d3:	48 8b 3d a6 3c 20 00 	mov    0x203ca6(%rip),%rdi        # 607180 <optarg@@GLIBC_2.2.5>
  4034da:	e8 d9 d6 ff ff       	callq  400bb8 <atoi@plt>
  4034df:	66 89 45 9e          	mov    %ax,-0x62(%rbp)
			printf("The up link flow value(NRI_num) = %d.\n",NRI_opt);
  4034e3:	0f b7 75 9e          	movzwl -0x62(%rbp),%esi
  4034e7:	bf 48 59 40 00       	mov    $0x405948,%edi
  4034ec:	b8 00 00 00 00       	mov    $0x0,%eax
  4034f1:	e8 b2 d5 ff ff       	callq  400aa8 <printf@plt>
  4034f6:	eb 2c                	jmp    403524 <main+0x17f>
			break;
		
		default:
			printf("Unknown option matter: %s\n",argv[1]);
  4034f8:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
  4034ff:	48 83 c0 08          	add    $0x8,%rax
  403503:	48 8b 30             	mov    (%rax),%rsi
  403506:	bf 6f 59 40 00       	mov    $0x40596f,%edi
  40350b:	b8 00 00 00 00       	mov    $0x0,%eax
  403510:	e8 93 d5 ff ff       	callq  400aa8 <printf@plt>
			return -1;
  403515:	c7 85 6c fd ff ff ff 	movl   $0xffffffff,-0x294(%rbp)
  40351c:	ff ff ff 
  40351f:	e9 47 09 00 00       	jmpq   403e6b <main+0xac6>
	if(argc < 2){
	printf("Error:Too few arguments.\n");
	exit(0);
	}

	while((opt = getopt(argc, argv, "n:p:td:u:"))!= -1) {
  403524:	48 8b b5 70 fd ff ff 	mov    -0x290(%rbp),%rsi
  40352b:	8b bd 7c fd ff ff    	mov    -0x284(%rbp),%edi
  403531:	ba 8a 59 40 00       	mov    $0x40598a,%edx
  403536:	e8 fd d5 ff ff       	callq  400b38 <getopt@plt>
  40353b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  40353e:	83 7d bc ff          	cmpl   $0xffffffffffffffff,-0x44(%rbp)
  403542:	0f 85 df fe ff ff    	jne    403427 <main+0x82>
			return -1;
		}

	}

u16 port_cnt = 0;
  403548:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
int socket_num=0;
  40354e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
u16 dlci_tmp = dlci;
  403555:	0f b7 45 a6          	movzwl -0x5a(%rbp),%eax
  403559:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
  40355d:	e9 cc 02 00 00       	jmpq   40382e <main+0x489>
#endif	 

     /* ring loop to open different ports */
while(port_cnt < multi_port_cnt){

		fr_a = io_fraddr_pack(1,2,0,dlci_tmp++);
  403562:	0f b7 4d e2          	movzwl -0x1e(%rbp),%ecx
  403566:	66 83 45 e2 01       	addw   $0x1,-0x1e(%rbp)
  40356b:	ba 00 00 00 00       	mov    $0x0,%edx
  403570:	be 02 00 00 00       	mov    $0x2,%esi
  403575:	bf 01 00 00 00       	mov    $0x1,%edi
  40357a:	e8 ef f8 ff ff       	callq  402e6e <io_fraddr_pack>
  40357f:	89 45 a0             	mov    %eax,-0x60(%rbp)
		printf("fr_a = %d \n",fr_a);
  403582:	8b 75 a0             	mov    -0x60(%rbp),%esi
  403585:	bf 94 59 40 00       	mov    $0x405994,%edi
  40358a:	b8 00 00 00 00       	mov    $0x0,%eax
  40358f:	e8 14 d5 ff ff       	callq  400aa8 <printf@plt>
	
		if(dlci_type == DLCI_AUTO)
  403594:	80 7d 99 00          	cmpb   $0x0,-0x67(%rbp)
  403598:	75 2c                	jne    4035c6 <main+0x221>
		{	
			printf("Run as normal FR channel.\n");
  40359a:	bf a0 59 40 00       	mov    $0x4059a0,%edi
  40359f:	e8 54 d5 ff ff       	callq  400af8 <puts@plt>
			Socketfd[socket_num] = npu_vport_open(a_type, 0, fr_a);
  4035a4:	8b 5d dc             	mov    -0x24(%rbp),%ebx
  4035a7:	0f b6 7d 98          	movzbl -0x68(%rbp),%edi
  4035ab:	8b 55 a0             	mov    -0x60(%rbp),%edx
  4035ae:	be 00 00 00 00       	mov    $0x0,%esi
  4035b3:	e8 84 d7 ff ff       	callq  400d3c <npu_vport_open>
  4035b8:	89 c2                	mov    %eax,%edx
  4035ba:	48 63 c3             	movslq %ebx,%rax
  4035bd:	89 94 85 f0 fd ff ff 	mov    %edx,-0x210(%rbp,%rax,4)
  4035c4:	eb 6c                	jmp    403632 <main+0x28d>
		}
		/* add new data channel, Shawn 20110428 */
		else if( dlci_type==DLCI_MANU)
  4035c6:	80 7d 99 01          	cmpb   $0x1,-0x67(%rbp)
  4035ca:	75 4d                	jne    403619 <main+0x274>
		{
			printf("Run as mannul FR channel.\n");
  4035cc:	bf ba 59 40 00       	mov    $0x4059ba,%edi
  4035d1:	e8 22 d5 ff ff       	callq  400af8 <puts@plt>
			//fr_pack = malloc(sizeof(FR_PACKET)+sizeof(bssgp_send_header)+sizeof(bssgp_send_data));
			fr_pack = malloc(sizeof(FR_PACKET)+ sizeof(bssgp_send_header)+sizeof(bssgp_send_data));
  4035d6:	bf 3a 00 00 00       	mov    $0x3a,%edi
  4035db:	e8 68 d5 ff ff       	callq  400b48 <malloc@plt>
  4035e0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			memset(fr_pack,0,sizeof(FR_PACKET));
  4035e4:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  4035e8:	ba 10 00 00 00       	mov    $0x10,%edx
  4035ed:	be 00 00 00 00       	mov    $0x0,%esi
  4035f2:	e8 c1 d4 ff ff       	callq  400ab8 <memset@plt>
			Socketfd[socket_num] = npu_vport_open(a_type, 0, fr_a);
  4035f7:	8b 5d dc             	mov    -0x24(%rbp),%ebx
  4035fa:	0f b6 7d 98          	movzbl -0x68(%rbp),%edi
  4035fe:	8b 55 a0             	mov    -0x60(%rbp),%edx
  403601:	be 00 00 00 00       	mov    $0x0,%esi
  403606:	e8 31 d7 ff ff       	callq  400d3c <npu_vport_open>
  40360b:	89 c2                	mov    %eax,%edx
  40360d:	48 63 c3             	movslq %ebx,%rax
  403610:	89 94 85 f0 fd ff ff 	mov    %edx,-0x210(%rbp,%rax,4)
  403617:	eb 19                	jmp    403632 <main+0x28d>
		}
		else 
		{
			printf("Error, Unknown dlci set or unknown FR pack mem.\n");
  403619:	bf d8 59 40 00       	mov    $0x4059d8,%edi
  40361e:	e8 d5 d4 ff ff       	callq  400af8 <puts@plt>
			return -1;
  403623:	c7 85 6c fd ff ff ff 	movl   $0xffffffff,-0x294(%rbp)
  40362a:	ff ff ff 
  40362d:	e9 39 08 00 00       	jmpq   403e6b <main+0xac6>
		}
	
	 if(Socketfd[socket_num] > 0)
  403632:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403635:	48 98                	cltq   
  403637:	8b 84 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%eax
  40363e:	85 c0                	test   %eax,%eax
  403640:	7e 21                	jle    403663 <main+0x2be>
	 {
		 printf("client: open vport success! The Socketfd = %d\n",Socketfd[socket_num]);
  403642:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403645:	48 98                	cltq   
  403647:	8b b4 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%esi
  40364e:	bf 08 5a 40 00       	mov    $0x405a08,%edi
  403653:	b8 00 00 00 00       	mov    $0x0,%eax
  403658:	e8 4b d4 ff ff       	callq  400aa8 <printf@plt>
		 socket_num++;
  40365d:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  403661:	eb 1b                	jmp    40367e <main+0x2d9>
	 }
	 else
	 {
		 printf("open vport fail! ret = %d \n",Socketfd[socket_num]);
  403663:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403666:	48 98                	cltq   
  403668:	8b b4 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%esi
  40366f:	bf 37 5a 40 00       	mov    $0x405a37,%edi
  403674:	b8 00 00 00 00       	mov    $0x0,%eax
  403679:	e8 2a d4 ff ff       	callq  400aa8 <printf@plt>
	 }

		NRI_value = 0;
  40367e:	c7 85 e4 fd ff ff 00 	movl   $0x0,-0x21c(%rbp)
  403685:	00 00 00 
  403688:	eb 37                	jmp    4036c1 <main+0x31c>
	 	while(NRI_value< NRI_opt)
	 	{

		    ioctl_set_rule(NPU_SET_FR_UPLINK_PATH_LINK_TABLE,fr_a,&NRI_value);
  40368a:	48 8d 95 e4 fd ff ff 	lea    -0x21c(%rbp),%rdx
  403691:	8b 75 a0             	mov    -0x60(%rbp),%esi
  403694:	bf 67 00 00 00       	mov    $0x67,%edi
  403699:	e8 f6 f9 ff ff       	callq  403094 <ioctl_set_rule>
	 		ioctl_set_rule(NPU_SET_FR_UPLINK_PATH_RULE,fr_a,&NRI_value);
  40369e:	48 8d 95 e4 fd ff ff 	lea    -0x21c(%rbp),%rdx
  4036a5:	8b 75 a0             	mov    -0x60(%rbp),%esi
  4036a8:	bf 65 00 00 00       	mov    $0x65,%edi
  4036ad:	e8 e2 f9 ff ff       	callq  403094 <ioctl_set_rule>
			NRI_value++;
  4036b2:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  4036b8:	83 c0 01             	add    $0x1,%eax
  4036bb:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
	 {
		 printf("open vport fail! ret = %d \n",Socketfd[socket_num]);
	 }

		NRI_value = 0;
	 	while(NRI_value< NRI_opt)
  4036c1:	0f b7 55 9e          	movzwl -0x62(%rbp),%edx
  4036c5:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  4036cb:	39 c2                	cmp    %eax,%edx
  4036cd:	77 bb                	ja     40368a <main+0x2e5>
	 	}

		/* Add this because the "set update new bvci" value should be equal with "set down link" bvci old value!*/
		//wrong! The WP_IwFlowAdd rule of updateBVCI only stand by vport & orginal bvci value!
		/* Yes, new modify to add multi update-bvci flow, need test in fact! (20110523) */
		u16 DL_Num = 0;
  4036cf:	66 c7 45 e8 00 00    	movw   $0x0,-0x18(%rbp)
		
		/* Specify here: set update-bvci flow & DL flow together, two point note: 
		1. update-new = dl-old; 
		2. send-data bvci = update-old,so should make balance with vport_send & flow_del(in the end)*/
		update_bvci_t bvci_value = {0};
  4036d5:	c7 85 b0 fd ff ff 00 	movl   $0x0,-0x250(%rbp)
  4036dc:	00 00 00 
		assert(sizeof(bvci_value)==4);
		bvci_value.update_NS_BVCI = 0x0708 + (port_cnt*(DL_opt/multi_port_cnt));
  4036df:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  4036e3:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  4036ea:	00 00 
  4036ec:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  4036f3:	66 f7 75 9a          	divw   -0x66(%rbp)
  4036f7:	66 0f af 45 da       	imul   -0x26(%rbp),%ax
  4036fc:	66 05 08 07          	add    $0x708,%ax
  403700:	66 89 85 b0 fd ff ff 	mov    %ax,-0x250(%rbp)
		
		//memcpy(&NS_BVCI_old_temp,&fr_send_data[2],2);  /* Stupid error, Directed memcpy will reverse the data order! */
		bvci_value.NS_BVCI |= fr_send_data[3];
  403707:	0f b7 95 b2 fd ff ff 	movzwl -0x24e(%rbp),%edx
  40370e:	0f b6 05 e8 39 20 00 	movzbl 0x2039e8(%rip),%eax        # 6070fd <fr_send_data+0x3>
  403715:	0f b6 c0             	movzbl %al,%eax
  403718:	09 d0                	or     %edx,%eax
  40371a:	66 89 85 b2 fd ff ff 	mov    %ax,-0x24e(%rbp)
		bvci_value.NS_BVCI |= fr_send_data[2]<<8;
  403721:	0f b7 85 b2 fd ff ff 	movzwl -0x24e(%rbp),%eax
  403728:	89 c2                	mov    %eax,%edx
  40372a:	0f b6 05 cb 39 20 00 	movzbl 0x2039cb(%rip),%eax        # 6070fc <fr_send_data+0x2>
  403731:	0f b6 c0             	movzbl %al,%eax
  403734:	c1 e0 08             	shl    $0x8,%eax
  403737:	09 d0                	or     %edx,%eax
  403739:	66 89 85 b2 fd ff ff 	mov    %ax,-0x24e(%rbp)
		bvci_value.NS_BVCI += port_cnt*(DL_opt/multi_port_cnt);
  403740:	0f b7 8d b2 fd ff ff 	movzwl -0x24e(%rbp),%ecx
  403747:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  40374b:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403752:	00 00 
  403754:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  40375b:	66 f7 75 9a          	divw   -0x66(%rbp)
  40375f:	66 0f af 45 da       	imul   -0x26(%rbp),%ax
  403764:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403767:	66 89 85 b2 fd ff ff 	mov    %ax,-0x24e(%rbp)

		
		printf("The real NS_BVCI = 0x(%X), update_NS_BVCI = 0x(%X) \n",bvci_value.NS_BVCI, bvci_value.update_NS_BVCI);
  40376e:	0f b7 85 b0 fd ff ff 	movzwl -0x250(%rbp),%eax
  403775:	0f b7 d0             	movzwl %ax,%edx
  403778:	0f b7 85 b2 fd ff ff 	movzwl -0x24e(%rbp),%eax
  40377f:	0f b7 f0             	movzwl %ax,%esi
  403782:	bf 58 5a 40 00       	mov    $0x405a58,%edi
  403787:	b8 00 00 00 00       	mov    $0x0,%eax
  40378c:	e8 17 d3 ff ff       	callq  400aa8 <printf@plt>
  403791:	eb 74                	jmp    403807 <main+0x462>
		
		while(DL_Num < (DL_opt/multi_port_cnt))
		{
			ioctl_set_rule(NPU_SET_UPDATE_BVCI_PATH_RULE,fr_a,(u32 *)&bvci_value);
  403793:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  40379a:	8b 75 a0             	mov    -0x60(%rbp),%esi
  40379d:	bf 68 00 00 00       	mov    $0x68,%edi
  4037a2:	e8 ed f8 ff ff       	callq  403094 <ioctl_set_rule>
			//ioctl_set_rule(NPU_SET_FR_DOWNLINK_PATH_RULE,fr_a,&bvci_value.update_NS_BVCI);
			ioctl_set_rule(NPU_SET_FR_DOWNLINK_PATH_LINK_TABLE,fr_a,(u32 *)&bvci_value);
  4037a7:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  4037ae:	8b 75 a0             	mov    -0x60(%rbp),%esi
  4037b1:	bf 6c 00 00 00       	mov    $0x6c,%edi
  4037b6:	e8 d9 f8 ff ff       	callq  403094 <ioctl_set_rule>
			ioctl_set_rule(NPU_SET_FR_DOWNLINK_PATH_RULE,fr_a,(u32 *)&bvci_value);
  4037bb:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
  4037c2:	8b 75 a0             	mov    -0x60(%rbp),%esi
  4037c5:	bf 6a 00 00 00       	mov    $0x6a,%edi
  4037ca:	e8 c5 f8 ff ff       	callq  403094 <ioctl_set_rule>
			bvci_value.NS_BVCI++;
  4037cf:	0f b7 85 b2 fd ff ff 	movzwl -0x24e(%rbp),%eax
  4037d6:	83 c0 01             	add    $0x1,%eax
  4037d9:	66 89 85 b2 fd ff ff 	mov    %ax,-0x24e(%rbp)
			bvci_value.update_NS_BVCI++;
  4037e0:	0f b7 85 b0 fd ff ff 	movzwl -0x250(%rbp),%eax
  4037e7:	83 c0 01             	add    $0x1,%eax
  4037ea:	66 89 85 b0 fd ff ff 	mov    %ax,-0x250(%rbp)
			DL_set_num++;
  4037f1:	0f b7 05 c0 39 20 00 	movzwl 0x2039c0(%rip),%eax        # 6071b8 <DL_set_num>
  4037f8:	83 c0 01             	add    $0x1,%eax
  4037fb:	66 89 05 b6 39 20 00 	mov    %ax,0x2039b6(%rip)        # 6071b8 <DL_set_num>
			DL_Num++;			
  403802:	66 83 45 e8 01       	addw   $0x1,-0x18(%rbp)
		bvci_value.NS_BVCI += port_cnt*(DL_opt/multi_port_cnt);

		
		printf("The real NS_BVCI = 0x(%X), update_NS_BVCI = 0x(%X) \n",bvci_value.NS_BVCI, bvci_value.update_NS_BVCI);
		
		while(DL_Num < (DL_opt/multi_port_cnt))
  403807:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  40380b:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403812:	00 00 
  403814:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  40381b:	66 f7 75 9a          	divw   -0x66(%rbp)
  40381f:	66 3b 45 e8          	cmp    -0x18(%rbp),%ax
  403823:	0f 87 6a ff ff ff    	ja     403793 <main+0x3ee>
			DL_set_num++;
			DL_Num++;			
		}

		/* finally add the port_cont num while rule set ok once.*/
		port_cnt++;
  403829:	66 83 45 da 01       	addw   $0x1,-0x26(%rbp)
	     return -1;
	 }
#endif	 

     /* ring loop to open different ports */
while(port_cnt < multi_port_cnt){
  40382e:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
  403832:	66 3b 45 9a          	cmp    -0x66(%rbp),%ax
  403836:	0f 82 26 fd ff ff    	jb     403562 <main+0x1bd>
		port_cnt++;
	
}

 
 int cnt = loop_cnt;
  40383c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  40383f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  403842:	e9 6f 03 00 00       	jmpq   403bb6 <main+0x811>
 while(cnt--)
    {
    /* clean up port paramaters */
	port_cnt = 0;
  403847:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
	socket_num =0;
  40384d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
	udp_port_src-= multi_port_cnt;
  403854:	0f b7 05 8d 38 20 00 	movzwl 0x20388d(%rip),%eax        # 6070e8 <udp_port_src>
  40385b:	66 2b 45 9a          	sub    -0x66(%rbp),%ax
  40385f:	66 89 05 82 38 20 00 	mov    %ax,0x203882(%rip)        # 6070e8 <udp_port_src>
	dlci_tmp = dlci;
  403866:	0f b7 45 a6          	movzwl -0x5a(%rbp),%eax
  40386a:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
  40386e:	e9 35 03 00 00       	jmpq   403ba8 <main+0x803>
	/* ring loop to send and receive, note now just send & recv together, may separate send & recv futher */
   	while(port_cnt < multi_port_cnt){

			assert(a_type == VP_TYPE_FR);
			//Note:call fucation again to get new fr_a.
			fr_a = io_fraddr_pack(1,2,0,dlci_tmp++);
  403873:	0f b7 4d e2          	movzwl -0x1e(%rbp),%ecx
  403877:	66 83 45 e2 01       	addw   $0x1,-0x1e(%rbp)
  40387c:	ba 00 00 00 00       	mov    $0x0,%edx
  403881:	be 02 00 00 00       	mov    $0x2,%esi
  403886:	bf 01 00 00 00       	mov    $0x1,%edi
  40388b:	e8 de f5 ff ff       	callq  402e6e <io_fraddr_pack>
  403890:	89 45 a0             	mov    %eax,-0x60(%rbp)
			
			if(dlci_type == DLCI_AUTO)  
  403893:	80 7d 99 00          	cmpb   $0x0,-0x67(%rbp)
  403897:	0f 85 6b 01 00 00    	jne    403a08 <main+0x663>
			{
				//printf("Set dlci value = %d\n", (*(fraddr_t *)&fr_a).dlci);
				
				u8 send_data_buf[12];
				memcpy(send_data_buf, fr_send_data,sizeof(fr_send_data));
  40389d:	48 8d bd a0 fd ff ff 	lea    -0x260(%rbp),%rdi
  4038a4:	ba 0c 00 00 00       	mov    $0xc,%edx
  4038a9:	be fa 70 60 00       	mov    $0x6070fa,%esi
  4038ae:	e8 15 d3 ff ff       	callq  400bc8 <memcpy@plt>
				
				NRI_value = 0;
  4038b3:	c7 85 e4 fd ff ff 00 	movl   $0x0,-0x21c(%rbp)
  4038ba:	00 00 00 
  4038bd:	e9 34 01 00 00       	jmpq   4039f6 <main+0x651>
				while(NRI_value < NRI_opt)
				{
					send_data_buf[6] = NRI_value<<2; // set NRI_value in sending data. 20100521				
  4038c2:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  4038c8:	c1 e0 02             	shl    $0x2,%eax
  4038cb:	88 85 a6 fd ff ff    	mov    %al,-0x25a(%rbp)
					NRI_value++;
  4038d1:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  4038d7:	83 c0 01             	add    $0x1,%eax
  4038da:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
					
					u16 DL_Num = 0, bvci_value_temp = 0;
  4038e0:	66 c7 45 ec 00 00    	movw   $0x0,-0x14(%rbp)
  4038e6:	66 c7 85 9e fd ff ff 	movw   $0x0,-0x262(%rbp)
  4038ed:	00 00 
					bvci_value_temp |= fr_send_data[3];
  4038ef:	0f b6 05 07 38 20 00 	movzbl 0x203807(%rip),%eax        # 6070fd <fr_send_data+0x3>
  4038f6:	0f b6 d0             	movzbl %al,%edx
  4038f9:	0f b7 85 9e fd ff ff 	movzwl -0x262(%rbp),%eax
  403900:	09 d0                	or     %edx,%eax
  403902:	66 89 85 9e fd ff ff 	mov    %ax,-0x262(%rbp)
					bvci_value_temp |= fr_send_data[2]<<8;
  403909:	0f b6 05 ec 37 20 00 	movzbl 0x2037ec(%rip),%eax        # 6070fc <fr_send_data+0x2>
  403910:	0f b6 c0             	movzbl %al,%eax
  403913:	c1 e0 08             	shl    $0x8,%eax
  403916:	89 c2                	mov    %eax,%edx
  403918:	0f b7 85 9e fd ff ff 	movzwl -0x262(%rbp),%eax
  40391f:	09 d0                	or     %edx,%eax
  403921:	66 89 85 9e fd ff ff 	mov    %ax,-0x262(%rbp)
					bvci_value_temp += port_cnt*(DL_opt/multi_port_cnt);
  403928:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  40392c:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403933:	00 00 
  403935:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  40393c:	66 f7 75 9a          	divw   -0x66(%rbp)
  403940:	89 c2                	mov    %eax,%edx
  403942:	66 0f af 55 da       	imul   -0x26(%rbp),%dx
  403947:	0f b7 85 9e fd ff ff 	movzwl -0x262(%rbp),%eax
  40394e:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  403951:	66 89 85 9e fd ff ff 	mov    %ax,-0x262(%rbp)
  403958:	eb 7a                	jmp    4039d4 <main+0x62f>
					
					/* This means how many UL flows add, so there while be how many packs each one DL flow get! (20110526) */
					while(DL_Num < (DL_opt/multi_port_cnt))
					{	
						//printf("The old send_data bvci here is: 0x(%x)!\n", bvci_value_temp);
						send_data_buf[2] = *((u8 *)&bvci_value_temp+1);
  40395a:	48 8d 85 9e fd ff ff 	lea    -0x262(%rbp),%rax
  403961:	48 83 c0 01          	add    $0x1,%rax
  403965:	0f b6 00             	movzbl (%rax),%eax
  403968:	88 85 a2 fd ff ff    	mov    %al,-0x25e(%rbp)
						send_data_buf[3] = *(u8 *)&bvci_value_temp;
  40396e:	48 8d 85 9e fd ff ff 	lea    -0x262(%rbp),%rax
  403975:	0f b6 00             	movzbl (%rax),%eax
  403978:	88 85 a3 fd ff ff    	mov    %al,-0x25d(%rbp)
						send_status = npu_vport_send(Socketfd[socket_num],VP_TYPE_FR,send_data_buf, sizeof(send_data_buf),0,fr_a, 0,0);
  40397e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403981:	48 98                	cltq   
  403983:	8b bc 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%edi
  40398a:	8b 45 a0             	mov    -0x60(%rbp),%eax
  40398d:	48 8d 95 a0 fd ff ff 	lea    -0x260(%rbp),%rdx
  403994:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  40399b:	00 
  40399c:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  4039a3:	41 89 c1             	mov    %eax,%r9d
  4039a6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  4039ac:	b9 0c 00 00 00       	mov    $0xc,%ecx
  4039b1:	be 02 00 00 00       	mov    $0x2,%esi
  4039b6:	e8 8b d7 ff ff       	callq  401146 <npu_vport_send>
  4039bb:	89 45 8c             	mov    %eax,-0x74(%rbp)
						bvci_value_temp++;
  4039be:	0f b7 85 9e fd ff ff 	movzwl -0x262(%rbp),%eax
  4039c5:	83 c0 01             	add    $0x1,%eax
  4039c8:	66 89 85 9e fd ff ff 	mov    %ax,-0x262(%rbp)
						DL_Num++;
  4039cf:	66 83 45 ec 01       	addw   $0x1,-0x14(%rbp)
					bvci_value_temp |= fr_send_data[3];
					bvci_value_temp |= fr_send_data[2]<<8;
					bvci_value_temp += port_cnt*(DL_opt/multi_port_cnt);
					
					/* This means how many UL flows add, so there while be how many packs each one DL flow get! (20110526) */
					while(DL_Num < (DL_opt/multi_port_cnt))
  4039d4:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  4039d8:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  4039df:	00 00 
  4039e1:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  4039e8:	66 f7 75 9a          	divw   -0x66(%rbp)
  4039ec:	66 3b 45 ec          	cmp    -0x14(%rbp),%ax
  4039f0:	0f 87 64 ff ff ff    	ja     40395a <main+0x5b5>
				
				u8 send_data_buf[12];
				memcpy(send_data_buf, fr_send_data,sizeof(fr_send_data));
				
				NRI_value = 0;
				while(NRI_value < NRI_opt)
  4039f6:	0f b7 55 9e          	movzwl -0x62(%rbp),%edx
  4039fa:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  403a00:	39 c2                	cmp    %eax,%edx
  403a02:	0f 87 ba fe ff ff    	ja     4038c2 <main+0x51d>
				}
				
				//send_status = npu_vport_send(Socketfd[socket_num],VP_TYPE_FR,send_data_buf, sizeof(send_data_buf),0,fr_a, 0,0);				
			}
		
		if(send_status < 0)
  403a08:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
  403a0c:	79 12                	jns    403a20 <main+0x67b>
		{
			printf("npu_vport_send! ret = %d \n",send_status);
  403a0e:	8b 75 8c             	mov    -0x74(%rbp),%esi
  403a11:	bf 8d 5a 40 00       	mov    $0x405a8d,%edi
  403a16:	b8 00 00 00 00       	mov    $0x0,%eax
  403a1b:	e8 88 d0 ff ff       	callq  400aa8 <printf@plt>

        npu_ioctrl(NPU_GET_MEMORY_STATICS, &stru_mem_statics);
	printf("######%x\n",stru_mem_statics.InterMemLeftByte);
#endif
		/* Add loop control to receive all the down link data from each one port , 20110525*/
		u16 recv_num = 0;	
  403a20:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  403a26:	e9 46 01 00 00       	jmpq   403b71 <main+0x7cc>
		while(recv_num < NRI_opt*(DL_opt/(multi_port_cnt)))
		{
				/* Start measuring */
				get_time(&tv);
  403a2b:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403a32:	e8 c5 f3 ff ff       	callq  402dfc <get_time>
		  
		      receive_again:		length = npu_vport_recv(Socketfd[socket_num],udp_rsv_data,sizeof(udp_rsv_data),&vp_type,&udp_rsv_ipaddr_dst,&udp_rsv_port,&udp_rsv_ipaddr_src,&udp_rsv_port_src);	
  403a37:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403a3a:	48 98                	cltq   
  403a3c:	8b bc 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%edi
  403a43:	48 8d 95 e8 fd ff ff 	lea    -0x218(%rbp),%rdx
  403a4a:	48 8d 8d d8 fd ff ff 	lea    -0x228(%rbp),%rcx
  403a51:	48 8d b5 ef fd ff ff 	lea    -0x211(%rbp),%rsi
  403a58:	48 8d 85 e2 fd ff ff 	lea    -0x21e(%rbp),%rax
  403a5f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  403a64:	48 8d 85 dc fd ff ff 	lea    -0x224(%rbp),%rax
  403a6b:	48 89 04 24          	mov    %rax,(%rsp)
  403a6f:	49 89 d1             	mov    %rdx,%r9
  403a72:	49 89 c8             	mov    %rcx,%r8
  403a75:	48 89 f1             	mov    %rsi,%rcx
  403a78:	ba f4 01 00 00       	mov    $0x1f4,%edx
  403a7d:	be c0 71 60 00       	mov    $0x6071c0,%esi
  403a82:	e8 49 d8 ff ff       	callq  4012d0 <npu_vport_recv>
  403a87:	89 45 94             	mov    %eax,-0x6c(%rbp)
				if(length == 0)
  403a8a:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
  403a8e:	75 0c                	jne    403a9c <main+0x6f7>
				{
					printf("npu_vport_recv linx other msg! \n");
  403a90:	bf a8 5a 40 00       	mov    $0x405aa8,%edi
  403a95:	e8 5e d0 ff ff       	callq  400af8 <puts@plt>
  403a9a:	eb 9b                	jmp    403a37 <main+0x692>
		                        goto receive_again;
				}
				else if(length > 0)
  403a9c:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
  403aa0:	0f 8e b4 00 00 00    	jle    403b5a <main+0x7b5>
				{
				    //printf("npu_vport_recv success! receive len = %d \n",length);
					if(vp_type == VP_TYPE_FR){
  403aa6:	0f b6 85 ef fd ff ff 	movzbl -0x211(%rbp),%eax
  403aad:	3c 02                	cmp    $0x2,%al
  403aaf:	75 31                	jne    403ae2 <main+0x73d>
					u32 card,trunk,tsgroup,dlci;				
					io_fraddr_unpack(udp_rsv_port,&card,&trunk,&tsgroup,&dlci);
  403ab1:	8b bd e8 fd ff ff    	mov    -0x218(%rbp),%edi
  403ab7:	48 8d 85 8c fd ff ff 	lea    -0x274(%rbp),%rax
  403abe:	48 8d 8d 90 fd ff ff 	lea    -0x270(%rbp),%rcx
  403ac5:	48 8d 95 94 fd ff ff 	lea    -0x26c(%rbp),%rdx
  403acc:	48 8d b5 98 fd ff ff 	lea    -0x268(%rbp),%rsi
  403ad3:	49 89 c0             	mov    %rax,%r8
  403ad6:	e8 20 f4 ff ff       	callq  402efb <io_fraddr_unpack>
					//printf("The received FR info: frport=%d, card = %d, trunk = %d, tsgroup = %d, dlci = %d. \n",udp_rsv_port, card, trunk, tsgroup, dlci);
					recv_num++;
  403adb:	66 83 45 ea 01       	addw   $0x1,-0x16(%rbp)
  403ae0:	eb 2e                	jmp    403b10 <main+0x76b>
					}
					else
					{
						printf("The received UDP info: ipaddr_dst=0x%x, ipaddr_src = 0x%x, udp_dst = %d, udp_src = %d,  \n",udp_rsv_ipaddr_dst, udp_rsv_ipaddr_src, udp_rsv_port, udp_rsv_port_src);
  403ae2:	0f b7 85 e2 fd ff ff 	movzwl -0x21e(%rbp),%eax
  403ae9:	0f b7 c0             	movzwl %ax,%eax
  403aec:	8b 8d e8 fd ff ff    	mov    -0x218(%rbp),%ecx
  403af2:	8b 95 dc fd ff ff    	mov    -0x224(%rbp),%edx
  403af8:	8b b5 d8 fd ff ff    	mov    -0x228(%rbp),%esi
  403afe:	41 89 c0             	mov    %eax,%r8d
  403b01:	bf c8 5a 40 00       	mov    $0x405ac8,%edi
  403b06:	b8 00 00 00 00       	mov    $0x0,%eax
  403b0b:	e8 98 cf ff ff       	callq  400aa8 <printf@plt>

					}
				/* Stop measuring */
				clk = get_time(&tv);	
  403b10:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403b17:	e8 e0 f2 ff ff       	callq  402dfc <get_time>
  403b1c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			
				if(clk > max)
  403b20:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b24:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  403b28:	7e 08                	jle    403b32 <main+0x78d>
					max = clk;
  403b2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b2e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
				if(clk < min)
  403b32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b36:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  403b3a:	7d 08                	jge    403b44 <main+0x79f>
					min = clk;
  403b3c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b40:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
				ack += clk;
  403b44:	f3 48 0f 2a 45 d0    	cvtsi2ssq -0x30(%rbp),%xmm0
  403b4a:	f3 0f 10 4d b4       	movss  -0x4c(%rbp),%xmm1
  403b4f:	f3 0f 58 c1          	addss  %xmm1,%xmm0
  403b53:	f3 0f 11 45 b4       	movss  %xmm0,-0x4c(%rbp)
  403b58:	eb 17                	jmp    403b71 <main+0x7cc>
				}
				else
				{
				printf("npu_vport_recv fail! ret = %d \n",length);
  403b5a:	8b 75 94             	mov    -0x6c(%rbp),%esi
  403b5d:	bf 28 5b 40 00       	mov    $0x405b28,%edi
  403b62:	b8 00 00 00 00       	mov    $0x0,%eax
  403b67:	e8 3c cf ff ff       	callq  400aa8 <printf@plt>
  403b6c:	e9 c6 fe ff ff       	jmpq   403a37 <main+0x692>
        npu_ioctrl(NPU_GET_MEMORY_STATICS, &stru_mem_statics);
	printf("######%x\n",stru_mem_statics.InterMemLeftByte);
#endif
		/* Add loop control to receive all the down link data from each one port , 20110525*/
		u16 recv_num = 0;	
		while(recv_num < NRI_opt*(DL_opt/(multi_port_cnt)))
  403b71:	0f b7 4d ea          	movzwl -0x16(%rbp),%ecx
  403b75:	0f b7 75 9e          	movzwl -0x62(%rbp),%esi
  403b79:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  403b7d:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403b84:	00 00 
  403b86:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  403b8d:	66 f7 75 9a          	divw   -0x66(%rbp)
  403b91:	0f b7 c0             	movzwl %ax,%eax
  403b94:	0f af c6             	imul   %esi,%eax
  403b97:	39 c1                	cmp    %eax,%ecx
  403b99:	0f 8c 8c fe ff ff    	jl     403a2b <main+0x686>
				printf("npu_vport_recv fail! ret = %d \n",length);
				goto receive_again;
				}
		}

		socket_num++;
  403b9f:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)

	/* finally add the port_cont num while UL/DL ok once*/
		port_cnt++;
  403ba3:	66 83 45 da 01       	addw   $0x1,-0x26(%rbp)
	socket_num =0;
	udp_port_src-= multi_port_cnt;
	dlci_tmp = dlci;

	/* ring loop to send and receive, note now just send & recv together, may separate send & recv futher */
   	while(port_cnt < multi_port_cnt){
  403ba8:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
  403bac:	66 3b 45 9a          	cmp    -0x66(%rbp),%ax
  403bb0:	0f 82 bd fc ff ff    	jb     403873 <main+0x4ce>
	
}

 
 int cnt = loop_cnt;
 while(cnt--)
  403bb6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  403bba:	0f 95 c0             	setne  %al
  403bbd:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  403bc1:	84 c0                	test   %al,%al
  403bc3:	0f 85 7e fc ff ff    	jne    403847 <main+0x4a2>
	/* finally add the port_cont num while UL/DL ok once*/
		port_cnt++;
		
	 }
   	 }
 		printf("Result:\n");
  403bc9:	bf 48 5b 40 00       	mov    $0x405b48,%edi
  403bce:	e8 25 cf ff ff       	callq  400af8 <puts@plt>
		printf("The loop count: %d\n",loop_cnt);
  403bd3:	8b 75 b8             	mov    -0x48(%rbp),%esi
  403bd6:	bf c9 58 40 00       	mov    $0x4058c9,%edi
  403bdb:	b8 00 00 00 00       	mov    $0x0,%eax
  403be0:	e8 c3 ce ff ff       	callq  400aa8 <printf@plt>
		printf("  Average : %.1f us\n", ack/loop_cnt );
  403be5:	f3 0f 2a 4d b8       	cvtsi2ssl -0x48(%rbp),%xmm1
  403bea:	f3 0f 10 45 b4       	movss  -0x4c(%rbp),%xmm0
  403bef:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  403bf3:	0f 14 c0             	unpcklps %xmm0,%xmm0
  403bf6:	0f 5a c0             	cvtps2pd %xmm0,%xmm0
  403bf9:	bf 50 5b 40 00       	mov    $0x405b50,%edi
  403bfe:	b8 01 00 00 00       	mov    $0x1,%eax
  403c03:	e8 a0 ce ff ff       	callq  400aa8 <printf@plt>
		printf("  Min     : %ld us\n", min);
  403c08:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  403c0c:	bf 65 5b 40 00       	mov    $0x405b65,%edi
  403c11:	b8 00 00 00 00       	mov    $0x0,%eax
  403c16:	e8 8d ce ff ff       	callq  400aa8 <printf@plt>
		printf("  Max     : %ld us\n", max);
  403c1b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  403c1f:	bf 79 5b 40 00       	mov    $0x405b79,%edi
  403c24:	b8 00 00 00 00       	mov    $0x0,%eax
  403c29:	e8 7a ce ff ff       	callq  400aa8 <printf@plt>
		printf("  Diff    : %ld us\n", max - min);
  403c2e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  403c32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  403c36:	48 89 c6             	mov    %rax,%rsi
  403c39:	48 29 d6             	sub    %rdx,%rsi
  403c3c:	bf 8d 5b 40 00       	mov    $0x405b8d,%edi
  403c41:	b8 00 00 00 00       	mov    $0x0,%eax
  403c46:	e8 5d ce ff ff       	callq  400aa8 <printf@plt>

	/* clean up port paramaters */
	port_cnt = 0;
  403c4b:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
	socket_num = 0;
  403c51:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
	udp_port_src-= multi_port_cnt;
  403c58:	0f b7 05 89 34 20 00 	movzwl 0x203489(%rip),%eax        # 6070e8 <udp_port_src>
  403c5f:	66 2b 45 9a          	sub    -0x66(%rbp),%ax
  403c63:	66 89 05 7e 34 20 00 	mov    %ax,0x20347e(%rip)        # 6070e8 <udp_port_src>
	dlci_tmp = dlci;
  403c6a:	0f b7 45 a6          	movzwl -0x5a(%rbp),%eax
  403c6e:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
  403c72:	e9 dc 01 00 00       	jmpq   403e53 <main+0xaae>
		DL_Num++;
	}
	#endif
	
	while(port_cnt < multi_port_cnt){
	printf("Port = %d and Socketfd = %d\n", udp_port_src, Socketfd[socket_num]);
  403c77:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403c7a:	48 98                	cltq   
  403c7c:	8b 94 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%edx
  403c83:	0f b7 05 5e 34 20 00 	movzwl 0x20345e(%rip),%eax        # 6070e8 <udp_port_src>
  403c8a:	0f b7 f0             	movzwl %ax,%esi
  403c8d:	bf a1 5b 40 00       	mov    $0x405ba1,%edi
  403c92:	b8 00 00 00 00       	mov    $0x0,%eax
  403c97:	e8 0c ce ff ff       	callq  400aa8 <printf@plt>

	assert (a_type == VP_TYPE_FR);
	//Note:Must call this function at first to correct the vport-> NPU_DELETE_UPDATE_BVCI_PATH_RULE! 20110530
	fr_a = io_fraddr_pack(1,2,0,dlci_tmp++);
  403c9c:	0f b7 4d e2          	movzwl -0x1e(%rbp),%ecx
  403ca0:	66 83 45 e2 01       	addw   $0x1,-0x1e(%rbp)
  403ca5:	ba 00 00 00 00       	mov    $0x0,%edx
  403caa:	be 02 00 00 00       	mov    $0x2,%esi
  403caf:	bf 01 00 00 00       	mov    $0x1,%edi
  403cb4:	e8 b5 f1 ff ff       	callq  402e6e <io_fraddr_pack>
  403cb9:	89 45 a0             	mov    %eax,-0x60(%rbp)

	NRI_value = 0;
  403cbc:	c7 85 e4 fd ff ff 00 	movl   $0x0,-0x21c(%rbp)
  403cc3:	00 00 00 
  403cc6:	eb 23                	jmp    403ceb <main+0x946>
	while(NRI_value<NRI_opt)
	{
		ioctl_set_rule(NPU_DELETE_FR_UPLINK_PATH_RULE,fr_a,&NRI_value);
  403cc8:	48 8d 95 e4 fd ff ff 	lea    -0x21c(%rbp),%rdx
  403ccf:	8b 75 a0             	mov    -0x60(%rbp),%esi
  403cd2:	bf 66 00 00 00       	mov    $0x66,%edi
  403cd7:	e8 b8 f3 ff ff       	callq  403094 <ioctl_set_rule>
		NRI_value++;
  403cdc:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  403ce2:	83 c0 01             	add    $0x1,%eax
  403ce5:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
	assert (a_type == VP_TYPE_FR);
	//Note:Must call this function at first to correct the vport-> NPU_DELETE_UPDATE_BVCI_PATH_RULE! 20110530
	fr_a = io_fraddr_pack(1,2,0,dlci_tmp++);

	NRI_value = 0;
	while(NRI_value<NRI_opt)
  403ceb:	0f b7 55 9e          	movzwl -0x62(%rbp),%edx
  403cef:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
  403cf5:	39 c2                	cmp    %eax,%edx
  403cf7:	77 cf                	ja     403cc8 <main+0x923>
	{
		ioctl_set_rule(NPU_DELETE_FR_UPLINK_PATH_RULE,fr_a,&NRI_value);
		NRI_value++;
	}
	
	 ioctl_set_rule(NPU_DELETE_UPDATE_BVCI_PATH_RULE,fr_a,0);
  403cf9:	8b 75 a0             	mov    -0x60(%rbp),%esi
  403cfc:	ba 00 00 00 00       	mov    $0x0,%edx
  403d01:	bf 69 00 00 00       	mov    $0x69,%edi
  403d06:	e8 89 f3 ff ff       	callq  403094 <ioctl_set_rule>

		u16 DL_Num = 0;
  403d0b:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
		update_bvci_t bvci_value = {0};
  403d11:	c7 85 80 fd ff ff 00 	movl   $0x0,-0x280(%rbp)
  403d18:	00 00 00 
		bvci_value.update_NS_BVCI = 0x0708 + (port_cnt*(DL_opt/multi_port_cnt));
  403d1b:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  403d1f:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403d26:	00 00 
  403d28:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  403d2f:	66 f7 75 9a          	divw   -0x66(%rbp)
  403d33:	66 0f af 45 da       	imul   -0x26(%rbp),%ax
  403d38:	66 05 08 07          	add    $0x708,%ax
  403d3c:	66 89 85 80 fd ff ff 	mov    %ax,-0x280(%rbp)
		
		bvci_value.NS_BVCI |= fr_send_data[3];
  403d43:	0f b7 95 82 fd ff ff 	movzwl -0x27e(%rbp),%edx
  403d4a:	0f b6 05 ac 33 20 00 	movzbl 0x2033ac(%rip),%eax        # 6070fd <fr_send_data+0x3>
  403d51:	0f b6 c0             	movzbl %al,%eax
  403d54:	09 d0                	or     %edx,%eax
  403d56:	66 89 85 82 fd ff ff 	mov    %ax,-0x27e(%rbp)
		bvci_value.NS_BVCI |= fr_send_data[2]<<8;
  403d5d:	0f b7 85 82 fd ff ff 	movzwl -0x27e(%rbp),%eax
  403d64:	89 c2                	mov    %eax,%edx
  403d66:	0f b6 05 8f 33 20 00 	movzbl 0x20338f(%rip),%eax        # 6070fc <fr_send_data+0x2>
  403d6d:	0f b6 c0             	movzbl %al,%eax
  403d70:	c1 e0 08             	shl    $0x8,%eax
  403d73:	09 d0                	or     %edx,%eax
  403d75:	66 89 85 82 fd ff ff 	mov    %ax,-0x27e(%rbp)
		bvci_value.NS_BVCI += port_cnt*(DL_opt/multi_port_cnt); 
  403d7c:	0f b7 8d 82 fd ff ff 	movzwl -0x27e(%rbp),%ecx
  403d83:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  403d87:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403d8e:	00 00 
  403d90:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  403d97:	66 f7 75 9a          	divw   -0x66(%rbp)
  403d9b:	66 0f af 45 da       	imul   -0x26(%rbp),%ax
  403da0:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  403da3:	66 89 85 82 fd ff ff 	mov    %ax,-0x27e(%rbp)
  403daa:	eb 4f                	jmp    403dfb <main+0xa56>
		
		while(DL_Num < (DL_opt/multi_port_cnt))
		{
			ioctl_set_rule(NPU_DELETE_FR_DOWNLINK_PATH_RULE,fr_a,(u32 *)&bvci_value);
  403dac:	48 8d 95 80 fd ff ff 	lea    -0x280(%rbp),%rdx
  403db3:	8b 75 a0             	mov    -0x60(%rbp),%esi
  403db6:	bf 6b 00 00 00       	mov    $0x6b,%edi
  403dbb:	e8 d4 f2 ff ff       	callq  403094 <ioctl_set_rule>
			ioctl_set_rule(NPU_DELETE_UPDATE_BVCI_PATH_RULE,fr_a,(u32 *)&bvci_value);
  403dc0:	48 8d 95 80 fd ff ff 	lea    -0x280(%rbp),%rdx
  403dc7:	8b 75 a0             	mov    -0x60(%rbp),%esi
  403dca:	bf 69 00 00 00       	mov    $0x69,%edi
  403dcf:	e8 c0 f2 ff ff       	callq  403094 <ioctl_set_rule>
			bvci_value.NS_BVCI++;
  403dd4:	0f b7 85 82 fd ff ff 	movzwl -0x27e(%rbp),%eax
  403ddb:	83 c0 01             	add    $0x1,%eax
  403dde:	66 89 85 82 fd ff ff 	mov    %ax,-0x27e(%rbp)
			bvci_value.update_NS_BVCI++;
  403de5:	0f b7 85 80 fd ff ff 	movzwl -0x280(%rbp),%eax
  403dec:	83 c0 01             	add    $0x1,%eax
  403def:	66 89 85 80 fd ff ff 	mov    %ax,-0x280(%rbp)
			DL_Num++;			
  403df6:	66 83 45 ee 01       	addw   $0x1,-0x12(%rbp)
		
		bvci_value.NS_BVCI |= fr_send_data[3];
		bvci_value.NS_BVCI |= fr_send_data[2]<<8;
		bvci_value.NS_BVCI += port_cnt*(DL_opt/multi_port_cnt); 
		
		while(DL_Num < (DL_opt/multi_port_cnt))
  403dfb:	0f b7 45 9c          	movzwl -0x64(%rbp),%eax
  403dff:	66 c7 85 4e fd ff ff 	movw   $0x0,-0x2b2(%rbp)
  403e06:	00 00 
  403e08:	0f b7 95 4e fd ff ff 	movzwl -0x2b2(%rbp),%edx
  403e0f:	66 f7 75 9a          	divw   -0x66(%rbp)
  403e13:	66 3b 45 ee          	cmp    -0x12(%rbp),%ax
  403e17:	77 93                	ja     403dac <main+0xa07>
			bvci_value.update_NS_BVCI++;
			DL_Num++;			
		}	
		
		//fr_a = io_fraddr_pack(1,2,0,dlci_tmp++);
		npu_vport_close(Socketfd[socket_num++],a_type,fr_a);
  403e19:	0f b6 75 98          	movzbl -0x68(%rbp),%esi
  403e1d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  403e20:	48 98                	cltq   
  403e22:	8b bc 85 f0 fd ff ff 	mov    -0x210(%rbp,%rax,4),%edi
  403e29:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  403e2d:	8b 55 a0             	mov    -0x60(%rbp),%edx
  403e30:	e8 11 d1 ff ff       	callq  400f46 <npu_vport_close>

		printf("The final set rule call time is : %d! \n", DL_set_num);
  403e35:	0f b7 05 7c 33 20 00 	movzwl 0x20337c(%rip),%eax        # 6071b8 <DL_set_num>
  403e3c:	0f b7 f0             	movzwl %ax,%esi
  403e3f:	bf c0 5b 40 00       	mov    $0x405bc0,%edi
  403e44:	b8 00 00 00 00       	mov    $0x0,%eax
  403e49:	e8 5a cc ff ff       	callq  400aa8 <printf@plt>

	/* finally add the port_cont num while UL/DL delete ok once*/
		port_cnt++;		
  403e4e:	66 83 45 da 01       	addw   $0x1,-0x26(%rbp)
		NS_BVCI += 0x01; 
		DL_Num++;
	}
	#endif
	
	while(port_cnt < multi_port_cnt){
  403e53:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
  403e57:	66 3b 45 9a          	cmp    -0x66(%rbp),%ax
  403e5b:	0f 82 16 fe ff ff    	jb     403c77 <main+0x8d2>
		printf("The final set rule call time is : %d! \n", DL_set_num);

	/* finally add the port_cont num while UL/DL delete ok once*/
		port_cnt++;		
	}
	return 0;
  403e61:	c7 85 6c fd ff ff 00 	movl   $0x0,-0x294(%rbp)
  403e68:	00 00 00 
  403e6b:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
}
  403e71:	48 81 c4 c8 02 00 00 	add    $0x2c8,%rsp
  403e78:	5b                   	pop    %rbx
  403e79:	c9                   	leaveq 
  403e7a:	c3                   	retq   
  403e7b:	90                   	nop
  403e7c:	90                   	nop
  403e7d:	90                   	nop
  403e7e:	90                   	nop
  403e7f:	90                   	nop

0000000000403e80 <linx_get_descriptor>:
  403e80:	8b 47 10             	mov    0x10(%rdi),%eax
  403e83:	c3                   	retq   
  403e84:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
  403e8b:	00 00 00 00 00 

0000000000403e90 <linx_get_spid>:
  403e90:	8b 47 14             	mov    0x14(%rdi),%eax
  403e93:	c3                   	retq   
  403e94:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
  403e9b:	00 00 00 00 00 

0000000000403ea0 <linx_cancel_new_link>:
  403ea0:	48 83 ec 18          	sub    $0x18,%rsp
  403ea4:	8b 06                	mov    (%rsi),%eax
  403ea6:	48 89 e2             	mov    %rsp,%rdx
  403ea9:	89 44 24 04          	mov    %eax,0x4(%rsp)
  403ead:	c7 06 00 00 00 00    	movl   $0x0,(%rsi)
  403eb3:	31 c0                	xor    %eax,%eax
  403eb5:	8b 7f 10             	mov    0x10(%rdi),%edi
  403eb8:	be 13 f4 08 80       	mov    $0x8008f413,%esi
  403ebd:	e8 16 cc ff ff       	callq  400ad8 <ioctl@plt>
  403ec2:	48 83 c4 18          	add    $0x18,%rsp
  403ec6:	c3                   	retq   
  403ec7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  403ece:	00 00 

0000000000403ed0 <linx_request_new_link>:
  403ed0:	48 83 ec 18          	sub    $0x18,%rsp
  403ed4:	31 c0                	xor    %eax,%eax
  403ed6:	89 34 24             	mov    %esi,(%rsp)
  403ed9:	8b 7f 10             	mov    0x10(%rdi),%edi
  403edc:	48 89 e2             	mov    %rsp,%rdx
  403edf:	be 12 f4 08 80       	mov    $0x8008f412,%esi
  403ee4:	e8 ef cb ff ff       	callq  400ad8 <ioctl@plt>
  403ee9:	31 d2                	xor    %edx,%edx
  403eeb:	83 c0 01             	add    $0x1,%eax
  403eee:	74 04                	je     403ef4 <linx_request_new_link+0x24>
  403ef0:	8b 54 24 04          	mov    0x4(%rsp),%edx
  403ef4:	89 d0                	mov    %edx,%eax
  403ef6:	48 83 c4 18          	add    $0x18,%rsp
  403efa:	c3                   	retq   
  403efb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000403f00 <linx_modify_tmo>:
  403f00:	53                   	push   %rbx
  403f01:	48 89 f3             	mov    %rsi,%rbx
  403f04:	48 83 ec 20          	sub    $0x20,%rsp
  403f08:	8b 06                	mov    (%rsi),%eax
  403f0a:	be 11 f4 18 80       	mov    $0x8018f411,%esi
  403f0f:	89 14 24             	mov    %edx,(%rsp)
  403f12:	48 89 e2             	mov    %rsp,%rdx
  403f15:	89 44 24 10          	mov    %eax,0x10(%rsp)
  403f19:	8b 7f 10             	mov    0x10(%rdi),%edi
  403f1c:	31 c0                	xor    %eax,%eax
  403f1e:	e8 b5 cb ff ff       	callq  400ad8 <ioctl@plt>
  403f23:	89 c2                	mov    %eax,%edx
  403f25:	31 c0                	xor    %eax,%eax
  403f27:	83 fa ff             	cmp    $0xffffffffffffffff,%edx
  403f2a:	74 0c                	je     403f38 <linx_modify_tmo+0x38>
  403f2c:	48 83 c4 20          	add    $0x20,%rsp
  403f30:	5b                   	pop    %rbx
  403f31:	c3                   	retq   
  403f32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403f38:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  403f3e:	89 d0                	mov    %edx,%eax
  403f40:	eb ea                	jmp    403f2c <linx_modify_tmo+0x2c>
  403f42:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  403f49:	1f 84 00 00 00 00 00 

0000000000403f50 <linx_cancel_tmo>:
  403f50:	48 83 ec 28          	sub    $0x28,%rsp
  403f54:	8b 06                	mov    (%rsi),%eax
  403f56:	48 89 e2             	mov    %rsp,%rdx
  403f59:	89 44 24 10          	mov    %eax,0x10(%rsp)
  403f5d:	c7 06 00 00 00 00    	movl   $0x0,(%rsi)
  403f63:	31 c0                	xor    %eax,%eax
  403f65:	8b 7f 10             	mov    0x10(%rdi),%edi
  403f68:	be 10 f4 18 80       	mov    $0x8018f410,%esi
  403f6d:	e8 66 cb ff ff       	callq  400ad8 <ioctl@plt>
  403f72:	89 c2                	mov    %eax,%edx
  403f74:	31 c0                	xor    %eax,%eax
  403f76:	83 fa ff             	cmp    $0xffffffffffffffff,%edx
  403f79:	0f 44 c2             	cmove  %edx,%eax
  403f7c:	48 83 c4 28          	add    $0x28,%rsp
  403f80:	c3                   	retq   
  403f81:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  403f88:	0f 1f 84 00 00 00 00 
  403f8f:	00 

0000000000403f90 <linx_detach>:
  403f90:	48 83 ec 18          	sub    $0x18,%rsp
  403f94:	8b 06                	mov    (%rsi),%eax
  403f96:	48 89 e2             	mov    %rsp,%rdx
  403f99:	89 04 24             	mov    %eax,(%rsp)
  403f9c:	c7 06 00 00 00 00    	movl   $0x0,(%rsi)
  403fa2:	31 c0                	xor    %eax,%eax
  403fa4:	8b 7f 10             	mov    0x10(%rdi),%edi
  403fa7:	be 04 f4 04 40       	mov    $0x4004f404,%esi
  403fac:	e8 27 cb ff ff       	callq  400ad8 <ioctl@plt>
  403fb1:	89 c2                	mov    %eax,%edx
  403fb3:	31 c0                	xor    %eax,%eax
  403fb5:	83 fa ff             	cmp    $0xffffffffffffffff,%edx
  403fb8:	0f 44 c2             	cmove  %edx,%eax
  403fbb:	48 83 c4 18          	add    $0x18,%rsp
  403fbf:	c3                   	retq   

0000000000403fc0 <linx_get_owner>:
  403fc0:	48 83 ec 28          	sub    $0x28,%rsp
  403fc4:	89 74 24 10          	mov    %esi,0x10(%rsp)
  403fc8:	c7 04 24 0a 00 00 00 	movl   $0xa,(%rsp)
  403fcf:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  403fd4:	8b 7f 10             	mov    0x10(%rdi),%edi
  403fd7:	48 89 e2             	mov    %rsp,%rdx
  403fda:	be 07 f4 10 c0       	mov    $0xc010f407,%esi
  403fdf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  403fe4:	31 c0                	xor    %eax,%eax
  403fe6:	e8 ed ca ff ff       	callq  400ad8 <ioctl@plt>
  403feb:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  403fee:	74 04                	je     403ff4 <linx_get_owner+0x34>
  403ff0:	8b 44 24 14          	mov    0x14(%rsp),%eax
  403ff4:	48 83 c4 28          	add    $0x28,%rsp
  403ff8:	c3                   	retq   
  403ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000404000 <linx_get_version>:
  404000:	48 89 5c 24 e8       	mov    %rbx,-0x18(%rsp)
  404005:	4c 89 64 24 f8       	mov    %r12,-0x8(%rsp)
  40400a:	31 d2                	xor    %edx,%edx
  40400c:	48 89 6c 24 f0       	mov    %rbp,-0x10(%rsp)
  404011:	49 89 fc             	mov    %rdi,%r12
  404014:	48 83 ec 28          	sub    $0x28,%rsp
  404018:	be 02 00 00 00       	mov    $0x2,%esi
  40401d:	bf 1d 00 00 00       	mov    $0x1d,%edi
  404022:	e8 b1 cb ff ff       	callq  400bd8 <socket@plt>
  404027:	89 c3                	mov    %eax,%ebx
  404029:	83 fb ff             	cmp    $0xffffffffffffffff,%ebx
  40402c:	74 54                	je     404082 <linx_get_version+0x82>
  40402e:	48 8d 54 24 0c       	lea    0xc(%rsp),%rdx
  404033:	31 c0                	xor    %eax,%eax
  404035:	be 0e f4 04 80       	mov    $0x8004f40e,%esi
  40403a:	89 df                	mov    %ebx,%edi
  40403c:	e8 97 ca ff ff       	callq  400ad8 <ioctl@plt>
  404041:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  404044:	89 c5                	mov    %eax,%ebp
  404046:	74 4e                	je     404096 <linx_get_version+0x96>
  404048:	89 df                	mov    %ebx,%edi
  40404a:	e8 79 ca ff ff       	callq  400ac8 <close@plt>
  40404f:	4d 85 e4             	test   %r12,%r12
  404052:	74 2a                	je     40407e <linx_get_version+0x7e>
  404054:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  404059:	be 78 5c 40 00       	mov    $0x405c78,%esi
  40405e:	4c 89 e7             	mov    %r12,%rdi
  404061:	31 c0                	xor    %eax,%eax
  404063:	44 89 c1             	mov    %r8d,%ecx
  404066:	44 89 c2             	mov    %r8d,%edx
  404069:	45 0f b6 c0          	movzbl %r8b,%r8d
  40406d:	c1 e9 08             	shr    $0x8,%ecx
  404070:	c1 ea 18             	shr    $0x18,%edx
  404073:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
  404079:	e8 1a cb ff ff       	callq  400b98 <sprintf@plt>
  40407e:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  404082:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  404087:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40408c:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
  404091:	48 83 c4 28          	add    $0x28,%rsp
  404095:	c3                   	retq   
  404096:	89 df                	mov    %ebx,%edi
  404098:	e8 2b ca ff ff       	callq  400ac8 <close@plt>
  40409d:	89 e8                	mov    %ebp,%eax
  40409f:	eb e1                	jmp    404082 <linx_get_version+0x82>
  4040a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  4040a8:	0f 1f 84 00 00 00 00 
  4040af:	00 

00000000004040b0 <check_endmark>:
  4040b0:	48 83 ec 08          	sub    $0x8,%rsp
  4040b4:	48 8b 17             	mov    (%rdi),%rdx
  4040b7:	8b 42 e0             	mov    -0x20(%rdx),%eax
  4040ba:	80 3c 02 ee          	cmpb   $0xee,(%rdx,%rax,1)
  4040be:	75 05                	jne    4040c5 <check_endmark+0x15>
  4040c0:	48 83 c4 08          	add    $0x8,%rsp
  4040c4:	c3                   	retq   
  4040c5:	48 8b 3d bc 30 20 00 	mov    0x2030bc(%rip),%rdi        # 607188 <stderr@@GLIBC_2.2.5>
  4040cc:	be a8 5c 40 00       	mov    $0x405ca8,%esi
  4040d1:	31 c0                	xor    %eax,%eax
  4040d3:	e8 50 cb ff ff       	callq  400c28 <fprintf@plt>
  4040d8:	e8 0b ca ff ff       	callq  400ae8 <abort@plt>
  4040dd:	0f 1f 00             	nopl   (%rax)

00000000004040e0 <linx_sender>:
  4040e0:	53                   	push   %rbx
  4040e1:	48 8b 1e             	mov    (%rsi),%rbx
  4040e4:	48 89 f7             	mov    %rsi,%rdi
  4040e7:	e8 c4 ff ff ff       	callq  4040b0 <check_endmark>
  4040ec:	8b 43 d8             	mov    -0x28(%rbx),%eax
  4040ef:	5b                   	pop    %rbx
  4040f0:	c3                   	retq   
  4040f1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  4040f8:	0f 1f 84 00 00 00 00 
  4040ff:	00 

0000000000404100 <linx_sigsize>:
  404100:	53                   	push   %rbx
  404101:	48 8b 1e             	mov    (%rsi),%rbx
  404104:	48 89 f7             	mov    %rsi,%rdi
  404107:	e8 a4 ff ff ff       	callq  4040b0 <check_endmark>
  40410c:	8b 43 e0             	mov    -0x20(%rbx),%eax
  40410f:	5b                   	pop    %rbx
  404110:	c3                   	retq   
  404111:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  404118:	0f 1f 84 00 00 00 00 
  40411f:	00 

0000000000404120 <linx_free_stat>:
  404120:	48 85 f6             	test   %rsi,%rsi
  404123:	53                   	push   %rbx
  404124:	48 89 f3             	mov    %rsi,%rbx
  404127:	74 18                	je     404141 <linx_free_stat+0x21>
  404129:	48 8b 3e             	mov    (%rsi),%rdi
  40412c:	48 85 ff             	test   %rdi,%rdi
  40412f:	74 05                	je     404136 <linx_free_stat+0x16>
  404131:	e8 42 ca ff ff       	callq  400b78 <free@plt>
  404136:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  40413d:	31 c0                	xor    %eax,%eax
  40413f:	5b                   	pop    %rbx
  404140:	c3                   	retq   
  404141:	e8 a2 ca ff ff       	callq  400be8 <__errno_location@plt>
  404146:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  40414c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  404151:	5b                   	pop    %rbx
  404152:	c3                   	retq   
  404153:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  40415a:	84 00 00 00 00 00 

0000000000404160 <linx_free_name>:
  404160:	48 85 f6             	test   %rsi,%rsi
  404163:	53                   	push   %rbx
  404164:	48 89 f3             	mov    %rsi,%rbx
  404167:	74 18                	je     404181 <linx_free_name+0x21>
  404169:	48 8b 3e             	mov    (%rsi),%rdi
  40416c:	48 85 ff             	test   %rdi,%rdi
  40416f:	74 05                	je     404176 <linx_free_name+0x16>
  404171:	e8 02 ca ff ff       	callq  400b78 <free@plt>
  404176:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  40417d:	31 c0                	xor    %eax,%eax
  40417f:	5b                   	pop    %rbx
  404180:	c3                   	retq   
  404181:	e8 62 ca ff ff       	callq  400be8 <__errno_location@plt>
  404186:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  40418c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  404191:	5b                   	pop    %rbx
  404192:	c3                   	retq   
  404193:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  40419a:	84 00 00 00 00 00 

00000000004041a0 <linx_sigattr>:
  4041a0:	48 89 5c 24 e8       	mov    %rbx,-0x18(%rsp)
  4041a5:	48 89 6c 24 f0       	mov    %rbp,-0x10(%rsp)
  4041aa:	89 d3                	mov    %edx,%ebx
  4041ac:	4c 89 64 24 f8       	mov    %r12,-0x8(%rsp)
  4041b1:	48 89 f7             	mov    %rsi,%rdi
  4041b4:	48 83 ec 18          	sub    $0x18,%rsp
  4041b8:	49 89 cc             	mov    %rcx,%r12
  4041bb:	48 8b 2e             	mov    (%rsi),%rbp
  4041be:	e8 ed fe ff ff       	callq  4040b0 <check_endmark>
  4041c3:	83 eb 01             	sub    $0x1,%ebx
  4041c6:	74 30                	je     4041f8 <linx_sigattr+0x58>
  4041c8:	e8 1b ca ff ff       	callq  400be8 <__errno_location@plt>
  4041cd:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  4041d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4041d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4041df:	00 
  4041e0:	48 8b 1c 24          	mov    (%rsp),%rbx
  4041e4:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  4041e9:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  4041ee:	48 83 c4 18          	add    $0x18,%rsp
  4041f2:	c3                   	retq   
  4041f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4041f8:	f6 45 e4 01          	testb  $0x1,-0x1c(%rbp)
  4041fc:	74 12                	je     404210 <linx_sigattr+0x70>
  4041fe:	41 c6 04 24 01       	movb   $0x1,(%r12)
  404203:	31 c0                	xor    %eax,%eax
  404205:	eb d9                	jmp    4041e0 <linx_sigattr+0x40>
  404207:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40420e:	00 00 
  404210:	41 c6 04 24 ff       	movb   $0xff,(%r12)
  404215:	31 c0                	xor    %eax,%eax
  404217:	eb c7                	jmp    4041e0 <linx_sigattr+0x40>
  404219:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000404220 <linx_get_stat>:
  404220:	48 89 5c 24 e0       	mov    %rbx,-0x20(%rsp)
  404225:	48 89 6c 24 e8       	mov    %rbp,-0x18(%rsp)
  40422a:	89 f5                	mov    %esi,%ebp
  40422c:	4c 89 64 24 f0       	mov    %r12,-0x10(%rsp)
  404231:	4c 89 6c 24 f8       	mov    %r13,-0x8(%rsp)
  404236:	48 83 ec 38          	sub    $0x38,%rsp
  40423a:	49 89 fd             	mov    %rdi,%r13
  40423d:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
  404244:	bf 78 00 00 00       	mov    $0x78,%edi
  404249:	49 89 d4             	mov    %rdx,%r12
  40424c:	e8 f7 c8 ff ff       	callq  400b48 <malloc@plt>
  404251:	48 89 c3             	mov    %rax,%rbx
  404254:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  404259:	48 85 db             	test   %rbx,%rbx
  40425c:	74 2e                	je     40428c <linx_get_stat+0x6c>
  40425e:	41 8b 7d 10          	mov    0x10(%r13),%edi
  404262:	31 c0                	xor    %eax,%eax
  404264:	48 89 e2             	mov    %rsp,%rdx
  404267:	be 07 f4 10 c0       	mov    $0xc010f407,%esi
  40426c:	89 2b                	mov    %ebp,(%rbx)
  40426e:	c7 04 24 0b 00 00 00 	movl   $0xb,(%rsp)
  404275:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  40427a:	e8 59 c8 ff ff       	callq  400ad8 <ioctl@plt>
  40427f:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  404282:	89 c5                	mov    %eax,%ebp
  404284:	74 1f                	je     4042a5 <linx_get_stat+0x85>
  404286:	49 89 1c 24          	mov    %rbx,(%r12)
  40428a:	31 c0                	xor    %eax,%eax
  40428c:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  404291:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
  404296:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
  40429b:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
  4042a0:	48 83 c4 38          	add    $0x38,%rsp
  4042a4:	c3                   	retq   
  4042a5:	48 89 df             	mov    %rbx,%rdi
  4042a8:	e8 cb c8 ff ff       	callq  400b78 <free@plt>
  4042ad:	89 e8                	mov    %ebp,%eax
  4042af:	eb db                	jmp    40428c <linx_get_stat+0x6c>
  4042b1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  4042b8:	0f 1f 84 00 00 00 00 
  4042bf:	00 

00000000004042c0 <linx_get_name>:
  4042c0:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  4042c5:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  4042ca:	31 c0                	xor    %eax,%eax
  4042cc:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  4042d1:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  4042d6:	49 89 fd             	mov    %rdi,%r13
  4042d9:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  4042de:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  4042e3:	48 83 ec 58          	sub    $0x58,%rsp
  4042e7:	89 34 24             	mov    %esi,(%rsp)
  4042ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  4042f1:	00 
  4042f2:	49 89 d6             	mov    %rdx,%r14
  4042f5:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%rsp)
  4042fc:	00 
  4042fd:	8b 7f 10             	mov    0x10(%rdi),%edi
  404300:	41 89 f4             	mov    %esi,%r12d
  404303:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
  40430a:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  40430f:	be 07 f4 10 c0       	mov    $0xc010f407,%esi
  404314:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  40431b:	00 00 
  40431d:	48 89 64 24 18       	mov    %rsp,0x18(%rsp)
  404322:	e8 b1 c7 ff ff       	callq  400ad8 <ioctl@plt>
  404327:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  40432a:	89 c3                	mov    %eax,%ebx
  40432c:	74 72                	je     4043a0 <linx_get_name+0xe0>
  40432e:	48 63 f8             	movslq %eax,%rdi
  404331:	e8 12 c8 ff ff       	callq  400b48 <malloc@plt>
  404336:	48 85 c0             	test   %rax,%rax
  404339:	48 89 c5             	mov    %rax,%rbp
  40433c:	74 62                	je     4043a0 <linx_get_name+0xe0>
  40433e:	41 8b 7d 10          	mov    0x10(%r13),%edi
  404342:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  404347:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40434c:	be 07 f4 10 c0       	mov    $0xc010f407,%esi
  404351:	31 c0                	xor    %eax,%eax
  404353:	89 5c 24 04          	mov    %ebx,0x4(%rsp)
  404357:	44 89 24 24          	mov    %r12d,(%rsp)
  40435b:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%rsp)
  404362:	00 
  404363:	48 89 64 24 18       	mov    %rsp,0x18(%rsp)
  404368:	e8 6b c7 ff ff       	callq  400ad8 <ioctl@plt>
  40436d:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  404370:	89 c3                	mov    %eax,%ebx
  404372:	74 33                	je     4043a7 <linx_get_name+0xe7>
  404374:	49 89 2e             	mov    %rbp,(%r14)
  404377:	31 c0                	xor    %eax,%eax
  404379:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
  40437e:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
  404383:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  404388:	4c 8b 6c 24 40       	mov    0x40(%rsp),%r13
  40438d:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  404392:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  404397:	48 83 c4 58          	add    $0x58,%rsp
  40439b:	c3                   	retq   
  40439c:	0f 1f 40 00          	nopl   0x0(%rax)
  4043a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4043a5:	eb d2                	jmp    404379 <linx_get_name+0xb9>
  4043a7:	48 89 ef             	mov    %rbp,%rdi
  4043aa:	e8 c9 c7 ff ff       	callq  400b78 <free@plt>
  4043af:	89 d8                	mov    %ebx,%eax
  4043b1:	eb c6                	jmp    404379 <linx_get_name+0xb9>
  4043b3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  4043ba:	84 00 00 00 00 00 

00000000004043c0 <linx_alloc>:
  4043c0:	48 89 5c 24 e0       	mov    %rbx,-0x20(%rsp)
  4043c5:	48 89 6c 24 e8       	mov    %rbp,-0x18(%rsp)
  4043ca:	48 89 fb             	mov    %rdi,%rbx
  4043cd:	4c 89 6c 24 f8       	mov    %r13,-0x8(%rsp)
  4043d2:	4c 89 64 24 f0       	mov    %r12,-0x10(%rsp)
  4043d7:	48 83 ec 28          	sub    $0x28,%rsp
  4043db:	83 fe 03             	cmp    $0x3,%esi
  4043de:	89 f5                	mov    %esi,%ebp
  4043e0:	41 89 d5             	mov    %edx,%r13d
  4043e3:	0f 86 94 00 00 00    	jbe    40447d <linx_alloc+0xbd>
  4043e9:	48 8b 57 18          	mov    0x18(%rdi),%rdx
  4043ed:	48 85 d2             	test   %rdx,%rdx
  4043f0:	74 05                	je     4043f7 <linx_alloc+0x37>
  4043f2:	3b 72 10             	cmp    0x10(%rdx),%esi
  4043f5:	7e 79                	jle    404470 <linx_alloc+0xb0>
  4043f7:	4c 63 e5             	movslq %ebp,%r12
  4043fa:	49 8d 7c 24 41       	lea    0x41(%r12),%rdi
  4043ff:	e8 44 c7 ff ff       	callq  400b48 <malloc@plt>
  404404:	31 c9                	xor    %ecx,%ecx
  404406:	48 85 c0             	test   %rax,%rax
  404409:	48 89 c2             	mov    %rax,%rdx
  40440c:	74 43                	je     404451 <linx_alloc+0x91>
  40440e:	89 68 10             	mov    %ebp,0x10(%rax)
  404411:	89 6a 20             	mov    %ebp,0x20(%rdx)
  404414:	8b 43 14             	mov    0x14(%rbx),%eax
  404417:	48 8d 4a 40          	lea    0x40(%rdx),%rcx
  40441b:	89 42 18             	mov    %eax,0x18(%rdx)
  40441e:	8b 43 14             	mov    0x14(%rbx),%eax
  404421:	44 89 6a 40          	mov    %r13d,0x40(%rdx)
  404425:	c7 42 24 00 00 00 00 	movl   $0x0,0x24(%rdx)
  40442c:	c7 42 2c ff ff ff ff 	movl   $0xffffffff,0x2c(%rdx)
  404433:	89 42 1c             	mov    %eax,0x1c(%rdx)
  404436:	42 c6 44 22 40 ee    	movb   $0xee,0x40(%rdx,%r12,1)
  40443c:	48 8b 03             	mov    (%rbx),%rax
  40443f:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
  404443:	48 89 4a 38          	mov    %rcx,0x38(%rdx)
  404447:	48 89 02             	mov    %rax,(%rdx)
  40444a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40444e:	48 89 13             	mov    %rdx,(%rbx)
  404451:	48 89 c8             	mov    %rcx,%rax
  404454:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  404459:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40445e:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  404463:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  404468:	48 83 c4 28          	add    $0x28,%rsp
  40446c:	c3                   	retq   
  40446d:	0f 1f 00             	nopl   (%rax)
  404470:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
  404477:	00 
  404478:	4c 63 e6             	movslq %esi,%r12
  40447b:	eb 94                	jmp    404411 <linx_alloc+0x51>
  40447d:	e8 66 c7 ff ff       	callq  400be8 <__errno_location@plt>
  404482:	31 c9                	xor    %ecx,%ecx
  404484:	c7 00 5a 00 00 00    	movl   $0x5a,(%rax)
  40448a:	eb c5                	jmp    404451 <linx_alloc+0x91>
  40448c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404490 <resize_signal>:
  404490:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  404495:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  40449a:	41 89 d4             	mov    %edx,%r12d
  40449d:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  4044a2:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  4044a7:	49 89 f5             	mov    %rsi,%r13
  4044aa:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  4044af:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  4044b4:	48 83 ec 38          	sub    $0x38,%rsp
  4044b8:	48 8b 1e             	mov    (%rsi),%rbx
  4044bb:	49 89 ff             	mov    %rdi,%r15
  4044be:	48 89 f7             	mov    %rsi,%rdi
  4044c1:	e8 ea fb ff ff       	callq  4040b0 <check_endmark>
  4044c6:	4d 63 f4             	movslq %r12d,%r14
  4044c9:	44 39 63 d0          	cmp    %r12d,-0x30(%rbx)
  4044cd:	48 8d 6b c0          	lea    -0x40(%rbx),%rbp
  4044d1:	7c 35                	jl     404508 <resize_signal+0x78>
  4044d3:	49 8b 45 00          	mov    0x0(%r13),%rax
  4044d7:	44 89 65 20          	mov    %r12d,0x20(%rbp)
  4044db:	42 c6 04 30 ee       	movb   $0xee,(%rax,%r14,1)
  4044e0:	31 c0                	xor    %eax,%eax
  4044e2:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  4044e7:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  4044ec:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  4044f1:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  4044f6:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  4044fb:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  404500:	48 83 c4 38          	add    $0x38,%rsp
  404504:	c3                   	retq   
  404505:	0f 1f 00             	nopl   (%rax)
  404508:	48 8b 53 c0          	mov    -0x40(%rbx),%rdx
  40450c:	48 8b 43 c8          	mov    -0x38(%rbx),%rax
  404510:	4d 63 f4             	movslq %r12d,%r14
  404513:	49 8d 76 41          	lea    0x41(%r14),%rsi
  404517:	48 89 ef             	mov    %rbp,%rdi
  40451a:	48 89 42 08          	mov    %rax,0x8(%rdx)
  40451e:	48 89 10             	mov    %rdx,(%rax)
  404521:	e8 f2 c6 ff ff       	callq  400c18 <realloc@plt>
  404526:	48 85 c0             	test   %rax,%rax
  404529:	48 89 c5             	mov    %rax,%rbp
  40452c:	74 24                	je     404552 <resize_signal+0xc2>
  40452e:	44 89 60 10          	mov    %r12d,0x10(%rax)
  404532:	48 8d 40 40          	lea    0x40(%rax),%rax
  404536:	4c 89 7d 08          	mov    %r15,0x8(%rbp)
  40453a:	49 89 45 00          	mov    %rax,0x0(%r13)
  40453e:	48 89 45 38          	mov    %rax,0x38(%rbp)
  404542:	49 8b 07             	mov    (%r15),%rax
  404545:	48 89 45 00          	mov    %rax,0x0(%rbp)
  404549:	48 89 68 08          	mov    %rbp,0x8(%rax)
  40454d:	49 89 2f             	mov    %rbp,(%r15)
  404550:	eb 81                	jmp    4044d3 <resize_signal+0x43>
  404552:	49 8b 45 00          	mov    0x0(%r13),%rax
  404556:	49 8b 17             	mov    (%r15),%rdx
  404559:	48 8d 48 c0          	lea    -0x40(%rax),%rcx
  40455d:	48 89 50 c0          	mov    %rdx,-0x40(%rax)
  404561:	4c 89 78 c8          	mov    %r15,-0x38(%rax)
  404565:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40456a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  40456e:	49 89 0f             	mov    %rcx,(%r15)
  404571:	e9 6c ff ff ff       	jmpq   4044e2 <resize_signal+0x52>
  404576:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40457d:	00 00 00 

0000000000404580 <linx_set_sigsize>:
  404580:	48 83 ec 08          	sub    $0x8,%rsp
  404584:	83 fa 03             	cmp    $0x3,%edx
  404587:	7e 0f                	jle    404598 <linx_set_sigsize+0x18>
  404589:	48 83 c4 08          	add    $0x8,%rsp
  40458d:	e9 fe fe ff ff       	jmpq   404490 <resize_signal>
  404592:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  404598:	e8 4b c6 ff ff       	callq  400be8 <__errno_location@plt>
  40459d:	c7 00 5a 00 00 00    	movl   $0x5a,(%rax)
  4045a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4045a8:	48 83 c4 08          	add    $0x8,%rsp
  4045ac:	c3                   	retq   
  4045ad:	0f 1f 00             	nopl   (%rax)

00000000004045b0 <linx_open>:
  4045b0:	48 89 6c 24 e0       	mov    %rbp,-0x20(%rsp)
  4045b5:	4c 89 6c 24 f0       	mov    %r13,-0x10(%rsp)
  4045ba:	49 89 fd             	mov    %rdi,%r13
  4045bd:	4c 89 74 24 f8       	mov    %r14,-0x8(%rsp)
  4045c2:	48 89 5c 24 d8       	mov    %rbx,-0x28(%rsp)
  4045c7:	bf 20 00 00 00       	mov    $0x20,%edi
  4045cc:	4c 89 64 24 e8       	mov    %r12,-0x18(%rsp)
  4045d1:	48 83 ec 38          	sub    $0x38,%rsp
  4045d5:	e8 6e c5 ff ff       	callq  400b48 <malloc@plt>
  4045da:	48 85 c0             	test   %rax,%rax
  4045dd:	48 89 c5             	mov    %rax,%rbp
  4045e0:	49 89 c6             	mov    %rax,%r14
  4045e3:	0f 84 98 00 00 00    	je     404681 <linx_open+0xd1>
  4045e9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4045f0:	00 
  4045f1:	31 d2                	xor    %edx,%edx
  4045f3:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  4045fa:	00 
  4045fb:	be 02 00 00 00       	mov    $0x2,%esi
  404600:	bf 1d 00 00 00       	mov    $0x1d,%edi
  404605:	48 89 45 00          	mov    %rax,0x0(%rbp)
  404609:	48 89 45 08          	mov    %rax,0x8(%rbp)
  40460d:	e8 c6 c5 ff ff       	callq  400bd8 <socket@plt>
  404612:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  404615:	89 45 10             	mov    %eax,0x10(%rbp)
  404618:	74 5c                	je     404676 <linx_open+0xc6>
  40461a:	48 8d 54 24 0c       	lea    0xc(%rsp),%rdx
  40461f:	89 c7                	mov    %eax,%edi
  404621:	be 0e f4 04 80       	mov    $0x8004f40e,%esi
  404626:	31 c0                	xor    %eax,%eax
  404628:	e8 ab c4 ff ff       	callq  400ad8 <ioctl@plt>
  40462d:	85 c0                	test   %eax,%eax
  40462f:	78 3d                	js     40466e <linx_open+0xbe>
  404631:	31 d2                	xor    %edx,%edx
  404633:	31 f6                	xor    %esi,%esi
  404635:	bf 81 5c 40 00       	mov    $0x405c81,%edi
  40463a:	e8 f9 c5 ff ff       	callq  400c38 <strtoul@plt>
  40463f:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  404644:	39 c2                	cmp    %eax,%edx
  404646:	74 60                	je     4046a8 <linx_open+0xf8>
  404648:	48 8b 0d 39 2b 20 00 	mov    0x202b39(%rip),%rcx        # 607188 <stderr@@GLIBC_2.2.5>
  40464f:	ba 1d 00 00 00       	mov    $0x1d,%edx
  404654:	be 01 00 00 00       	mov    $0x1,%esi
  404659:	bf 87 5c 40 00       	mov    $0x405c87,%edi
  40465e:	e8 a5 c5 ff ff       	callq  400c08 <fwrite@plt>
  404663:	e8 80 c5 ff ff       	callq  400be8 <__errno_location@plt>
  404668:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  40466e:	8b 7d 10             	mov    0x10(%rbp),%edi
  404671:	e8 52 c4 ff ff       	callq  400ac8 <close@plt>
  404676:	48 89 ef             	mov    %rbp,%rdi
  404679:	45 31 f6             	xor    %r14d,%r14d
  40467c:	e8 f7 c4 ff ff       	callq  400b78 <free@plt>
  404681:	4c 89 f0             	mov    %r14,%rax
  404684:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  404689:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40468e:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
  404693:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
  404698:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
  40469d:	48 83 c4 38          	add    $0x38,%rsp
  4046a1:	c3                   	retq   
  4046a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4046a8:	4c 89 ef             	mov    %r13,%rdi
  4046ab:	e8 d8 c4 ff ff       	callq  400b88 <strlen@plt>
  4046b0:	48 8d 78 19          	lea    0x19(%rax),%rdi
  4046b4:	e8 8f c4 ff ff       	callq  400b48 <malloc@plt>
  4046b9:	48 85 c0             	test   %rax,%rax
  4046bc:	49 89 c4             	mov    %rax,%r12
  4046bf:	74 ad                	je     40466e <linx_open+0xbe>
  4046c1:	48 8d 58 18          	lea    0x18(%rax),%rbx
  4046c5:	4c 89 ef             	mov    %r13,%rdi
  4046c8:	48 89 58 10          	mov    %rbx,0x10(%rax)
  4046cc:	e8 b7 c4 ff ff       	callq  400b88 <strlen@plt>
  4046d1:	4c 89 ee             	mov    %r13,%rsi
  4046d4:	48 89 df             	mov    %rbx,%rdi
  4046d7:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  4046dc:	41 c7 04 24 00 00 00 	movl   $0x0,(%r12)
  4046e3:	00 
  4046e4:	e8 0f c5 ff ff       	callq  400bf8 <strcpy@plt>
  4046e9:	8b 7d 10             	mov    0x10(%rbp),%edi
  4046ec:	31 c0                	xor    %eax,%eax
  4046ee:	4c 89 e2             	mov    %r12,%rdx
  4046f1:	be 08 f4 18 c0       	mov    $0xc018f408,%esi
  4046f6:	e8 dd c3 ff ff       	callq  400ad8 <ioctl@plt>
  4046fb:	85 c0                	test   %eax,%eax
  4046fd:	78 19                	js     404718 <linx_open+0x168>
  4046ff:	41 8b 04 24          	mov    (%r12),%eax
  404703:	4c 89 e7             	mov    %r12,%rdi
  404706:	89 45 14             	mov    %eax,0x14(%rbp)
  404709:	e8 6a c4 ff ff       	callq  400b78 <free@plt>
  40470e:	e9 6e ff ff ff       	jmpq   404681 <linx_open+0xd1>
  404713:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  404718:	4c 89 e7             	mov    %r12,%rdi
  40471b:	e8 58 c4 ff ff       	callq  400b78 <free@plt>
  404720:	e9 49 ff ff ff       	jmpq   40466e <linx_open+0xbe>
  404725:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  40472c:	00 00 00 00 

0000000000404730 <linx_close>:
  404730:	53                   	push   %rbx
  404731:	48 89 fb             	mov    %rdi,%rbx
  404734:	eb 2c                	jmp    404762 <linx_close+0x32>
  404736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40473d:	00 00 00 
  404740:	81 7f 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%rdi)
  404747:	48 8b 17             	mov    (%rdi),%rdx
  40474a:	48 8b 47 08          	mov    0x8(%rdi),%rax
  40474e:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404752:	48 89 10             	mov    %rdx,(%rax)
  404755:	7e 39                	jle    404790 <linx_close+0x60>
  404757:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  40475c:	75 32                	jne    404790 <linx_close+0x60>
  40475e:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
  404762:	48 8b 3b             	mov    (%rbx),%rdi
  404765:	48 39 fb             	cmp    %rdi,%rbx
  404768:	75 d6                	jne    404740 <linx_close+0x10>
  40476a:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  40476e:	48 85 ff             	test   %rdi,%rdi
  404771:	74 05                	je     404778 <linx_close+0x48>
  404773:	e8 00 c4 ff ff       	callq  400b78 <free@plt>
  404778:	8b 7b 10             	mov    0x10(%rbx),%edi
  40477b:	e8 48 c3 ff ff       	callq  400ac8 <close@plt>
  404780:	48 89 df             	mov    %rbx,%rdi
  404783:	e8 f0 c3 ff ff       	callq  400b78 <free@plt>
  404788:	31 c0                	xor    %eax,%eax
  40478a:	5b                   	pop    %rbx
  40478b:	c3                   	retq   
  40478c:	0f 1f 40 00          	nopl   0x0(%rax)
  404790:	e8 e3 c3 ff ff       	callq  400b78 <free@plt>
  404795:	eb cb                	jmp    404762 <linx_close+0x32>
  404797:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40479e:	00 00 

00000000004047a0 <linx_send_w_opt>:
  4047a0:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  4047a5:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  4047aa:	89 cb                	mov    %ecx,%ebx
  4047ac:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  4047b1:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  4047b6:	49 89 fe             	mov    %rdi,%r14
  4047b9:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  4047be:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  4047c3:	48 89 f7             	mov    %rsi,%rdi
  4047c6:	48 83 ec 38          	sub    $0x38,%rsp
  4047ca:	4d 89 c5             	mov    %r8,%r13
  4047cd:	48 8b 2e             	mov    (%rsi),%rbp
  4047d0:	49 89 f7             	mov    %rsi,%r15
  4047d3:	89 54 24 04          	mov    %edx,0x4(%rsp)
  4047d7:	e8 d4 f8 ff ff       	callq  4040b0 <check_endmark>
  4047dc:	8b 44 24 04          	mov    0x4(%rsp),%eax
  4047e0:	4d 85 ed             	test   %r13,%r13
  4047e3:	4c 8d 65 c0          	lea    -0x40(%rbp),%r12
  4047e7:	89 5d dc             	mov    %ebx,-0x24(%rbp)
  4047ea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  4047f1:	89 45 d8             	mov    %eax,-0x28(%rbp)
  4047f4:	75 7e                	jne    404874 <linx_send_w_opt+0xd4>
  4047f6:	41 8b 7e 10          	mov    0x10(%r14),%edi
  4047fa:	49 8d 54 24 18       	lea    0x18(%r12),%rdx
  4047ff:	31 c0                	xor    %eax,%eax
  404801:	be 14 f4 28 40       	mov    $0x4028f414,%esi
  404806:	e8 cd c2 ff ff       	callq  400ad8 <ioctl@plt>
  40480b:	81 7d d0 ff 03 00 00 	cmpl   $0x3ff,-0x30(%rbp)
  404812:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  404816:	89 c3                	mov    %eax,%ebx
  404818:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40481c:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404820:	48 89 10             	mov    %rdx,(%rax)
  404823:	7e 6b                	jle    404890 <linx_send_w_opt+0xf0>
  404825:	49 83 7e 18 00       	cmpq   $0x0,0x18(%r14)
  40482a:	75 64                	jne    404890 <linx_send_w_opt+0xf0>
  40482c:	4d 89 66 18          	mov    %r12,0x18(%r14)
  404830:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
  404837:	89 d8                	mov    %ebx,%eax
  404839:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40483e:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  404843:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  404848:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  40484d:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  404852:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  404857:	48 83 c4 38          	add    $0x38,%rsp
  40485b:	c3                   	retq   
  40485c:	41 83 7d 04 01       	cmpl   $0x1,0x4(%r13)
  404861:	75 0d                	jne    404870 <linx_send_w_opt+0xd0>
  404863:	41 83 4c 24 24 01    	orl    $0x1,0x24(%r12)
  404869:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  404870:	49 83 c5 08          	add    $0x8,%r13
  404874:	41 8b 45 00          	mov    0x0(%r13),%eax
  404878:	85 c0                	test   %eax,%eax
  40487a:	0f 84 76 ff ff ff    	je     4047f6 <linx_send_w_opt+0x56>
  404880:	83 e8 01             	sub    $0x1,%eax
  404883:	75 eb                	jne    404870 <linx_send_w_opt+0xd0>
  404885:	eb d5                	jmp    40485c <linx_send_w_opt+0xbc>
  404887:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40488e:	00 00 
  404890:	4c 89 e7             	mov    %r12,%rdi
  404893:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  404898:	e8 db c2 ff ff       	callq  400b78 <free@plt>
  40489d:	0f 1f 00             	nopl   (%rax)
  4048a0:	eb 8e                	jmp    404830 <linx_send_w_opt+0x90>
  4048a2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  4048a9:	1f 84 00 00 00 00 00 

00000000004048b0 <linx_send_w_s>:
  4048b0:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  4048b5:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  4048ba:	48 89 fd             	mov    %rdi,%rbp
  4048bd:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  4048c2:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  4048c7:	41 89 cc             	mov    %ecx,%r12d
  4048ca:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  4048cf:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  4048d4:	48 83 ec 38          	sub    $0x38,%rsp
  4048d8:	48 8b 1e             	mov    (%rsi),%rbx
  4048db:	41 89 d5             	mov    %edx,%r13d
  4048de:	48 89 f7             	mov    %rsi,%rdi
  4048e1:	49 89 f6             	mov    %rsi,%r14
  4048e4:	e8 c7 f7 ff ff       	callq  4040b0 <check_endmark>
  4048e9:	4c 8d 7b c0          	lea    -0x40(%rbx),%r15
  4048ed:	44 89 63 dc          	mov    %r12d,-0x24(%rbx)
  4048f1:	44 89 6b d8          	mov    %r13d,-0x28(%rbx)
  4048f5:	c7 43 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbx)
  4048fc:	8b 7d 10             	mov    0x10(%rbp),%edi
  4048ff:	31 c0                	xor    %eax,%eax
  404901:	49 8d 57 18          	lea    0x18(%r15),%rdx
  404905:	be 14 f4 28 40       	mov    $0x4028f414,%esi
  40490a:	e8 c9 c1 ff ff       	callq  400ad8 <ioctl@plt>
  40490f:	81 7b d0 ff 03 00 00 	cmpl   $0x3ff,-0x30(%rbx)
  404916:	48 8b 53 c0          	mov    -0x40(%rbx),%rdx
  40491a:	41 89 c4             	mov    %eax,%r12d
  40491d:	48 8b 43 c8          	mov    -0x38(%rbx),%rax
  404921:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404925:	48 89 10             	mov    %rdx,(%rax)
  404928:	7e 3e                	jle    404968 <linx_send_w_s+0xb8>
  40492a:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
  40492f:	75 37                	jne    404968 <linx_send_w_s+0xb8>
  404931:	4c 89 7d 18          	mov    %r15,0x18(%rbp)
  404935:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
  40493c:	44 89 e0             	mov    %r12d,%eax
  40493f:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  404944:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  404949:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  40494e:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  404953:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  404958:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  40495d:	48 83 c4 38          	add    $0x38,%rsp
  404961:	c3                   	retq   
  404962:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  404968:	4c 89 ff             	mov    %r15,%rdi
  40496b:	e8 08 c2 ff ff       	callq  400b78 <free@plt>
  404970:	eb c3                	jmp    404935 <linx_send_w_s+0x85>
  404972:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  404979:	1f 84 00 00 00 00 00 

0000000000404980 <linx_send>:
  404980:	48 89 6c 24 e0       	mov    %rbp,-0x20(%rsp)
  404985:	4c 89 64 24 e8       	mov    %r12,-0x18(%rsp)
  40498a:	48 89 fd             	mov    %rdi,%rbp
  40498d:	4c 89 6c 24 f0       	mov    %r13,-0x10(%rsp)
  404992:	4c 89 74 24 f8       	mov    %r14,-0x8(%rsp)
  404997:	41 89 d4             	mov    %edx,%r12d
  40499a:	48 89 5c 24 d8       	mov    %rbx,-0x28(%rsp)
  40499f:	48 83 ec 28          	sub    $0x28,%rsp
  4049a3:	48 8b 1e             	mov    (%rsi),%rbx
  4049a6:	48 89 f7             	mov    %rsi,%rdi
  4049a9:	49 89 f5             	mov    %rsi,%r13
  4049ac:	e8 ff f6 ff ff       	callq  4040b0 <check_endmark>
  4049b1:	44 89 63 dc          	mov    %r12d,-0x24(%rbx)
  4049b5:	8b 45 14             	mov    0x14(%rbp),%eax
  4049b8:	4c 8d 73 c0          	lea    -0x40(%rbx),%r14
  4049bc:	c7 43 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbx)
  4049c3:	be 14 f4 28 40       	mov    $0x4028f414,%esi
  4049c8:	49 8d 56 18          	lea    0x18(%r14),%rdx
  4049cc:	89 43 d8             	mov    %eax,-0x28(%rbx)
  4049cf:	8b 7d 10             	mov    0x10(%rbp),%edi
  4049d2:	31 c0                	xor    %eax,%eax
  4049d4:	e8 ff c0 ff ff       	callq  400ad8 <ioctl@plt>
  4049d9:	81 7b d0 ff 03 00 00 	cmpl   $0x3ff,-0x30(%rbx)
  4049e0:	48 8b 53 c0          	mov    -0x40(%rbx),%rdx
  4049e4:	41 89 c4             	mov    %eax,%r12d
  4049e7:	48 8b 43 c8          	mov    -0x38(%rbx),%rax
  4049eb:	48 89 42 08          	mov    %rax,0x8(%rdx)
  4049ef:	48 89 10             	mov    %rdx,(%rax)
  4049f2:	7e 3c                	jle    404a30 <linx_send+0xb0>
  4049f4:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
  4049f9:	75 35                	jne    404a30 <linx_send+0xb0>
  4049fb:	4c 89 75 18          	mov    %r14,0x18(%rbp)
  4049ff:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  404a06:	00 
  404a07:	44 89 e0             	mov    %r12d,%eax
  404a0a:	48 8b 1c 24          	mov    (%rsp),%rbx
  404a0e:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  404a13:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  404a18:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
  404a1d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  404a22:	48 83 c4 28          	add    $0x28,%rsp
  404a26:	c3                   	retq   
  404a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  404a2e:	00 00 
  404a30:	4c 89 f7             	mov    %r14,%rdi
  404a33:	e8 40 c1 ff ff       	callq  400b78 <free@plt>
  404a38:	eb c5                	jmp    4049ff <linx_send+0x7f>
  404a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404a40 <linx_free_buf>:
  404a40:	48 89 5c 24 e0       	mov    %rbx,-0x20(%rsp)
  404a45:	48 89 6c 24 e8       	mov    %rbp,-0x18(%rsp)
  404a4a:	48 89 f5             	mov    %rsi,%rbp
  404a4d:	4c 89 64 24 f0       	mov    %r12,-0x10(%rsp)
  404a52:	4c 89 6c 24 f8       	mov    %r13,-0x8(%rsp)
  404a57:	48 83 ec 28          	sub    $0x28,%rsp
  404a5b:	48 8b 1e             	mov    (%rsi),%rbx
  404a5e:	49 89 fc             	mov    %rdi,%r12
  404a61:	48 89 f7             	mov    %rsi,%rdi
  404a64:	e8 47 f6 ff ff       	callq  4040b0 <check_endmark>
  404a69:	81 7b d0 ff 03 00 00 	cmpl   $0x3ff,-0x30(%rbx)
  404a70:	48 8b 53 c0          	mov    -0x40(%rbx),%rdx
  404a74:	4c 8d 6b c0          	lea    -0x40(%rbx),%r13
  404a78:	48 8b 43 c8          	mov    -0x38(%rbx),%rax
  404a7c:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404a80:	48 89 10             	mov    %rdx,(%rax)
  404a83:	7e 33                	jle    404ab8 <linx_free_buf+0x78>
  404a85:	49 83 7c 24 18 00    	cmpq   $0x0,0x18(%r12)
  404a8b:	75 2b                	jne    404ab8 <linx_free_buf+0x78>
  404a8d:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
  404a92:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  404a99:	00 
  404a9a:	31 c0                	xor    %eax,%eax
  404a9c:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  404aa1:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  404aa6:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  404aab:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  404ab0:	48 83 c4 28          	add    $0x28,%rsp
  404ab4:	c3                   	retq   
  404ab5:	0f 1f 00             	nopl   (%rax)
  404ab8:	4c 89 ef             	mov    %r13,%rdi
  404abb:	e8 b8 c0 ff ff       	callq  400b78 <free@plt>
  404ac0:	eb d0                	jmp    404a92 <linx_free_buf+0x52>
  404ac2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  404ac9:	1f 84 00 00 00 00 00 

0000000000404ad0 <common_receive>:
  404ad0:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  404ad5:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  404ada:	48 89 d3             	mov    %rdx,%rbx
  404add:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  404ae2:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  404ae7:	31 d2                	xor    %edx,%edx
  404ae9:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  404aee:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  404af3:	49 89 f7             	mov    %rsi,%r15
  404af6:	48 83 ec 38          	sub    $0x38,%rsp
  404afa:	be 00 10 00 00       	mov    $0x1000,%esi
  404aff:	41 89 cd             	mov    %ecx,%r13d
  404b02:	49 89 fe             	mov    %rdi,%r14
  404b05:	44 89 44 24 04       	mov    %r8d,0x4(%rsp)
  404b0a:	45 89 cc             	mov    %r9d,%r12d
  404b0d:	e8 ae f8 ff ff       	callq  4043c0 <linx_alloc>
  404b12:	48 85 c0             	test   %rax,%rax
  404b15:	48 89 c1             	mov    %rax,%rcx
  404b18:	0f 84 aa 00 00 00    	je     404bc8 <common_receive+0xf8>
  404b1e:	48 8d 68 c0          	lea    -0x40(%rax),%rbp
  404b22:	31 c0                	xor    %eax,%eax
  404b24:	48 85 db             	test   %rbx,%rbx
  404b27:	74 12                	je     404b3b <common_receive+0x6b>
  404b29:	8b 13                	mov    (%rbx),%edx
  404b2b:	c1 fa 1f             	sar    $0x1f,%edx
  404b2e:	89 d0                	mov    %edx,%eax
  404b30:	33 03                	xor    (%rbx),%eax
  404b32:	29 d0                	sub    %edx,%eax
  404b34:	8d 04 85 04 00 00 00 	lea    0x4(,%rax,4),%eax
  404b3b:	45 85 ed             	test   %r13d,%r13d
  404b3e:	89 41 e8             	mov    %eax,-0x18(%rcx)
  404b41:	48 89 59 f0          	mov    %rbx,-0x10(%rcx)
  404b45:	44 89 61 d8          	mov    %r12d,-0x28(%rcx)
  404b49:	0f 85 c1 00 00 00    	jne    404c10 <common_receive+0x140>
  404b4f:	48 8d 5d 18          	lea    0x18(%rbp),%rbx
  404b53:	c7 41 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rcx)
  404b5a:	41 8b 7e 10          	mov    0x10(%r14),%edi
  404b5e:	48 89 da             	mov    %rbx,%rdx
  404b61:	31 c0                	xor    %eax,%eax
  404b63:	be 15 f4 28 c0       	mov    $0xc028f415,%esi
  404b68:	e8 6b bf ff ff       	callq  400ad8 <ioctl@plt>
  404b6d:	48 63 c8             	movslq %eax,%rcx
  404b70:	89 c2                	mov    %eax,%edx
  404b72:	48 85 c9             	test   %rcx,%rcx
  404b75:	7e 5f                	jle    404bd6 <common_receive+0x106>
  404b77:	48 8d 45 40          	lea    0x40(%rbp),%rax
  404b7b:	49 89 07             	mov    %rax,(%r15)
  404b7e:	c6 44 0d 40 ee       	movb   $0xee,0x40(%rbp,%rcx,1)
  404b83:	89 d0                	mov    %edx,%eax
  404b85:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  404b8a:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  404b8f:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  404b94:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  404b99:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  404b9e:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  404ba3:	48 83 c4 38          	add    $0x38,%rsp
  404ba7:	c3                   	retq   
  404ba8:	e8 3b c0 ff ff       	callq  400be8 <__errno_location@plt>
  404bad:	83 38 04             	cmpl   $0x4,(%rax)
  404bb0:	74 a8                	je     404b5a <common_receive+0x8a>
  404bb2:	48 8d 45 40          	lea    0x40(%rbp),%rax
  404bb6:	49 89 07             	mov    %rax,(%r15)
  404bb9:	4c 89 fe             	mov    %r15,%rsi
  404bbc:	4c 89 f7             	mov    %r14,%rdi
  404bbf:	e8 7c fe ff ff       	callq  404a40 <linx_free_buf>
  404bc4:	0f 1f 40 00          	nopl   0x0(%rax)
  404bc8:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
  404bcf:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  404bd4:	eb ad                	jmp    404b83 <common_receive+0xb3>
  404bd6:	48 8b 45 38          	mov    0x38(%rbp),%rax
  404bda:	8b 10                	mov    (%rax),%edx
  404bdc:	8b 45 2c             	mov    0x2c(%rbp),%eax
  404bdf:	85 c0                	test   %eax,%eax
  404be1:	75 3d                	jne    404c20 <common_receive+0x150>
  404be3:	85 d2                	test   %edx,%edx
  404be5:	75 39                	jne    404c20 <common_receive+0x150>
  404be7:	48 8d 45 40          	lea    0x40(%rbp),%rax
  404beb:	4c 89 fe             	mov    %r15,%rsi
  404bee:	4c 89 f7             	mov    %r14,%rdi
  404bf1:	49 89 07             	mov    %rax,(%r15)
  404bf4:	e8 47 fe ff ff       	callq  404a40 <linx_free_buf>
  404bf9:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
  404c00:	31 d2                	xor    %edx,%edx
  404c02:	e9 7c ff ff ff       	jmpq   404b83 <common_receive+0xb3>
  404c07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  404c0e:	00 00 
  404c10:	8b 44 24 04          	mov    0x4(%rsp),%eax
  404c14:	48 8d 5d 18          	lea    0x18(%rbp),%rbx
  404c18:	89 41 ec             	mov    %eax,-0x14(%rcx)
  404c1b:	e9 3a ff ff ff       	jmpq   404b5a <common_receive+0x8a>
  404c20:	48 85 c9             	test   %rcx,%rcx
  404c23:	75 83                	jne    404ba8 <common_receive+0xd8>
  404c25:	48 8d 45 40          	lea    0x40(%rbp),%rax
  404c29:	4c 89 fe             	mov    %r15,%rsi
  404c2c:	4c 89 f7             	mov    %r14,%rdi
  404c2f:	49 89 07             	mov    %rax,(%r15)
  404c32:	e8 59 f8 ff ff       	callq  404490 <resize_signal>
  404c37:	85 c0                	test   %eax,%eax
  404c39:	0f 88 7a ff ff ff    	js     404bb9 <common_receive+0xe9>
  404c3f:	49 8b 07             	mov    (%r15),%rax
  404c42:	48 8d 68 c0          	lea    -0x40(%rax),%rbp
  404c46:	48 8d 5d 18          	lea    0x18(%rbp),%rbx
  404c4a:	e9 0b ff ff ff       	jmpq   404b5a <common_receive+0x8a>
  404c4f:	90                   	nop

0000000000404c50 <linx_receive_from>:
  404c50:	48 89 c8             	mov    %rcx,%rax
  404c53:	45 89 c1             	mov    %r8d,%r9d
  404c56:	b9 01 00 00 00       	mov    $0x1,%ecx
  404c5b:	41 89 d0             	mov    %edx,%r8d
  404c5e:	48 89 c2             	mov    %rax,%rdx
  404c61:	e9 6a fe ff ff       	jmpq   404ad0 <common_receive>
  404c66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404c6d:	00 00 00 

0000000000404c70 <linx_receive_w_tmo>:
  404c70:	48 89 c8             	mov    %rcx,%rax
  404c73:	41 89 d0             	mov    %edx,%r8d
  404c76:	45 31 c9             	xor    %r9d,%r9d
  404c79:	b9 01 00 00 00       	mov    $0x1,%ecx
  404c7e:	48 89 c2             	mov    %rax,%rdx
  404c81:	e9 4a fe ff ff       	jmpq   404ad0 <common_receive>
  404c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404c8d:	00 00 00 

0000000000404c90 <linx_receive>:
  404c90:	45 31 c9             	xor    %r9d,%r9d
  404c93:	45 31 c0             	xor    %r8d,%r8d
  404c96:	31 c9                	xor    %ecx,%ecx
  404c98:	e9 33 fe ff ff       	jmpq   404ad0 <common_receive>
  404c9d:	0f 1f 00             	nopl   (%rax)

0000000000404ca0 <hunt_common>:
  404ca0:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  404ca5:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  404caa:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  404caf:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  404cb4:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  404cb9:	49 89 fe             	mov    %rdi,%r14
  404cbc:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  404cc1:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  404cc6:	48 83 ec 48          	sub    $0x48,%rsp
  404cca:	48 89 f7             	mov    %rsi,%rdi
  404ccd:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404cd2:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
  404cd6:	49 89 d5             	mov    %rdx,%r13
  404cd9:	e8 aa be ff ff       	callq  400b88 <strlen@plt>
  404cde:	4c 63 f8             	movslq %eax,%r15
  404ce1:	49 8d 7f 29          	lea    0x29(%r15),%rdi
  404ce5:	e8 5e be ff ff       	callq  400b48 <malloc@plt>
  404cea:	48 85 c0             	test   %rax,%rax
  404ced:	48 89 c5             	mov    %rax,%rbp
  404cf0:	0f 84 9a 00 00 00    	je     404d90 <hunt_common+0xf0>
  404cf6:	4d 85 ed             	test   %r13,%r13
  404cf9:	0f 84 d1 00 00 00    	je     404dd0 <hunt_common+0x130>
  404cff:	4c 89 ef             	mov    %r13,%rdi
  404d02:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  404d06:	e8 a5 f3 ff ff       	callq  4040b0 <check_endmark>
  404d0b:	49 8b 45 00          	mov    0x0(%r13),%rax
  404d0f:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  404d16:	00 
  404d17:	4c 8d 63 c0          	lea    -0x40(%rbx),%r12
  404d1b:	48 89 45 08          	mov    %rax,0x8(%rbp)
  404d1f:	8b 43 e0             	mov    -0x20(%rbx),%eax
  404d22:	89 45 00             	mov    %eax,0x0(%rbp)
  404d25:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  404d29:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  404d2e:	48 8d 7d 28          	lea    0x28(%rbp),%rdi
  404d32:	31 db                	xor    %ebx,%ebx
  404d34:	48 89 7d 20          	mov    %rdi,0x20(%rbp)
  404d38:	89 45 10             	mov    %eax,0x10(%rbp)
  404d3b:	e8 b8 be ff ff       	callq  400bf8 <strcpy@plt>
  404d40:	41 8b 7e 10          	mov    0x10(%r14),%edi
  404d44:	48 89 ea             	mov    %rbp,%rdx
  404d47:	be 02 f4 28 c0       	mov    $0xc028f402,%esi
  404d4c:	31 c0                	xor    %eax,%eax
  404d4e:	4c 89 7d 18          	mov    %r15,0x18(%rbp)
  404d52:	e8 81 bd ff ff       	callq  400ad8 <ioctl@plt>
  404d57:	48 89 ef             	mov    %rbp,%rdi
  404d5a:	83 f8 ff             	cmp    $0xffffffffffffffff,%eax
  404d5d:	0f 44 d8             	cmove  %eax,%ebx
  404d60:	e8 13 be ff ff       	callq  400b78 <free@plt>
  404d65:	4d 85 e4             	test   %r12,%r12
  404d68:	74 26                	je     404d90 <hunt_common+0xf0>
  404d6a:	41 81 7c 24 10 ff 03 	cmpl   $0x3ff,0x10(%r12)
  404d71:	00 00 
  404d73:	49 8b 14 24          	mov    (%r12),%rdx
  404d77:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  404d7c:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404d80:	48 89 10             	mov    %rdx,(%rax)
  404d83:	7e 6b                	jle    404df0 <hunt_common+0x150>
  404d85:	49 83 7e 18 00       	cmpq   $0x0,0x18(%r14)
  404d8a:	75 64                	jne    404df0 <hunt_common+0x150>
  404d8c:	4d 89 66 18          	mov    %r12,0x18(%r14)
  404d90:	4d 85 ed             	test   %r13,%r13
  404d93:	74 12                	je     404da7 <hunt_common+0x107>
  404d95:	49 83 7d 00 00       	cmpq   $0x0,0x0(%r13)
  404d9a:	74 0b                	je     404da7 <hunt_common+0x107>
  404d9c:	4c 89 ee             	mov    %r13,%rsi
  404d9f:	4c 89 f7             	mov    %r14,%rdi
  404da2:	e8 99 fc ff ff       	callq  404a40 <linx_free_buf>
  404da7:	89 d8                	mov    %ebx,%eax
  404da9:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
  404dae:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  404db3:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
  404db8:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
  404dbd:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  404dc2:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  404dc7:	48 83 c4 48          	add    $0x48,%rsp
  404dcb:	c3                   	retq   
  404dcc:	0f 1f 40 00          	nopl   0x0(%rax)
  404dd0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  404dd7:	00 
  404dd8:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  404dde:	45 31 e4             	xor    %r12d,%r12d
  404de1:	e9 3f ff ff ff       	jmpq   404d25 <hunt_common+0x85>
  404de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404ded:	00 00 00 
  404df0:	4c 89 e7             	mov    %r12,%rdi
  404df3:	e8 80 bd ff ff       	callq  400b78 <free@plt>
  404df8:	eb 96                	jmp    404d90 <hunt_common+0xf0>
  404dfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404e00 <linx_hunt>:
  404e00:	8b 4f 14             	mov    0x14(%rdi),%ecx
  404e03:	e9 98 fe ff ff       	jmpq   404ca0 <hunt_common>
  404e08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  404e0f:	00 

0000000000404e10 <linx_hunt_from>:
  404e10:	e9 8b fe ff ff       	jmpq   404ca0 <hunt_common>
  404e15:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  404e1c:	00 00 00 00 

0000000000404e20 <linx_attach>:
  404e20:	48 89 6c 24 e0       	mov    %rbp,-0x20(%rsp)
  404e25:	4c 89 6c 24 f0       	mov    %r13,-0x10(%rsp)
  404e2a:	48 89 f5             	mov    %rsi,%rbp
  404e2d:	4c 89 74 24 f8       	mov    %r14,-0x8(%rsp)
  404e32:	48 89 5c 24 d8       	mov    %rbx,-0x28(%rsp)
  404e37:	49 89 fd             	mov    %rdi,%r13
  404e3a:	4c 89 64 24 e8       	mov    %r12,-0x18(%rsp)
  404e3f:	48 83 ec 48          	sub    $0x48,%rsp
  404e43:	48 85 f6             	test   %rsi,%rsi
  404e46:	41 89 d6             	mov    %edx,%r14d
  404e49:	0f 84 a1 00 00 00    	je     404ef0 <linx_attach+0xd0>
  404e4f:	48 8b 1e             	mov    (%rsi),%rbx
  404e52:	48 89 f7             	mov    %rsi,%rdi
  404e55:	e8 56 f2 ff ff       	callq  4040b0 <check_endmark>
  404e5a:	8b 43 e0             	mov    -0x20(%rbx),%eax
  404e5d:	4c 8d 63 c0          	lea    -0x40(%rbx),%r12
  404e61:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  404e66:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  404e6d:	00 
  404e6e:	89 44 24 04          	mov    %eax,0x4(%rsp)
  404e72:	41 8b 7d 10          	mov    0x10(%r13),%edi
  404e76:	31 c0                	xor    %eax,%eax
  404e78:	48 89 e2             	mov    %rsp,%rdx
  404e7b:	be 03 f4 18 c0       	mov    $0xc018f403,%esi
  404e80:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  404e87:	00 
  404e88:	44 89 34 24          	mov    %r14d,(%rsp)
  404e8c:	31 db                	xor    %ebx,%ebx
  404e8e:	e8 45 bc ff ff       	callq  400ad8 <ioctl@plt>
  404e93:	83 c0 01             	add    $0x1,%eax
  404e96:	74 04                	je     404e9c <linx_attach+0x7c>
  404e98:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
  404e9c:	4d 85 e4             	test   %r12,%r12
  404e9f:	74 26                	je     404ec7 <linx_attach+0xa7>
  404ea1:	41 81 7c 24 10 ff 03 	cmpl   $0x3ff,0x10(%r12)
  404ea8:	00 00 
  404eaa:	49 8b 14 24          	mov    (%r12),%rdx
  404eae:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  404eb3:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404eb7:	48 89 10             	mov    %rdx,(%rax)
  404eba:	7e 54                	jle    404f10 <linx_attach+0xf0>
  404ebc:	49 83 7d 18 00       	cmpq   $0x0,0x18(%r13)
  404ec1:	75 4d                	jne    404f10 <linx_attach+0xf0>
  404ec3:	4d 89 65 18          	mov    %r12,0x18(%r13)
  404ec7:	89 d8                	mov    %ebx,%eax
  404ec9:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
  404ece:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  404ed3:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  404ed8:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
  404edd:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
  404ee2:	48 83 c4 48          	add    $0x48,%rsp
  404ee6:	c3                   	retq   
  404ee7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  404eee:	00 00 
  404ef0:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  404ef7:	00 00 
  404ef9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  404f00:	00 
  404f01:	45 31 e4             	xor    %r12d,%r12d
  404f04:	e9 69 ff ff ff       	jmpq   404e72 <linx_attach+0x52>
  404f09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  404f10:	4c 89 e7             	mov    %r12,%rdi
  404f13:	e8 60 bc ff ff       	callq  400b78 <free@plt>
  404f18:	eb ad                	jmp    404ec7 <linx_attach+0xa7>
  404f1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404f20 <linx_request_tmo>:
  404f20:	48 89 6c 24 e0       	mov    %rbp,-0x20(%rsp)
  404f25:	4c 89 6c 24 f0       	mov    %r13,-0x10(%rsp)
  404f2a:	48 89 d5             	mov    %rdx,%rbp
  404f2d:	4c 89 74 24 f8       	mov    %r14,-0x8(%rsp)
  404f32:	48 89 5c 24 d8       	mov    %rbx,-0x28(%rsp)
  404f37:	49 89 fd             	mov    %rdi,%r13
  404f3a:	4c 89 64 24 e8       	mov    %r12,-0x18(%rsp)
  404f3f:	48 83 ec 48          	sub    $0x48,%rsp
  404f43:	48 85 d2             	test   %rdx,%rdx
  404f46:	41 89 f6             	mov    %esi,%r14d
  404f49:	0f 84 a1 00 00 00    	je     404ff0 <linx_request_tmo+0xd0>
  404f4f:	48 8b 1a             	mov    (%rdx),%rbx
  404f52:	48 89 d7             	mov    %rdx,%rdi
  404f55:	e8 56 f1 ff ff       	callq  4040b0 <check_endmark>
  404f5a:	8b 43 e0             	mov    -0x20(%rbx),%eax
  404f5d:	4c 8d 63 c0          	lea    -0x40(%rbx),%r12
  404f61:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  404f66:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  404f6d:	00 
  404f6e:	89 44 24 04          	mov    %eax,0x4(%rsp)
  404f72:	41 8b 7d 10          	mov    0x10(%r13),%edi
  404f76:	31 c0                	xor    %eax,%eax
  404f78:	48 89 e2             	mov    %rsp,%rdx
  404f7b:	be 0f f4 18 80       	mov    $0x8018f40f,%esi
  404f80:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  404f87:	00 
  404f88:	44 89 34 24          	mov    %r14d,(%rsp)
  404f8c:	31 db                	xor    %ebx,%ebx
  404f8e:	e8 45 bb ff ff       	callq  400ad8 <ioctl@plt>
  404f93:	83 c0 01             	add    $0x1,%eax
  404f96:	74 04                	je     404f9c <linx_request_tmo+0x7c>
  404f98:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
  404f9c:	4d 85 e4             	test   %r12,%r12
  404f9f:	74 26                	je     404fc7 <linx_request_tmo+0xa7>
  404fa1:	41 81 7c 24 10 ff 03 	cmpl   $0x3ff,0x10(%r12)
  404fa8:	00 00 
  404faa:	49 8b 14 24          	mov    (%r12),%rdx
  404fae:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  404fb3:	48 89 42 08          	mov    %rax,0x8(%rdx)
  404fb7:	48 89 10             	mov    %rdx,(%rax)
  404fba:	7e 54                	jle    405010 <linx_request_tmo+0xf0>
  404fbc:	49 83 7d 18 00       	cmpq   $0x0,0x18(%r13)
  404fc1:	75 4d                	jne    405010 <linx_request_tmo+0xf0>
  404fc3:	4d 89 65 18          	mov    %r12,0x18(%r13)
  404fc7:	89 d8                	mov    %ebx,%eax
  404fc9:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
  404fce:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  404fd3:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  404fd8:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
  404fdd:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
  404fe2:	48 83 c4 48          	add    $0x48,%rsp
  404fe6:	c3                   	retq   
  404fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  404fee:	00 00 
  404ff0:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  404ff7:	00 00 
  404ff9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  405000:	00 
  405001:	45 31 e4             	xor    %r12d,%r12d
  405004:	e9 69 ff ff ff       	jmpq   404f72 <linx_request_tmo+0x52>
  405009:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  405010:	4c 89 e7             	mov    %r12,%rdi
  405013:	e8 60 bb ff ff       	callq  400b78 <free@plt>
  405018:	eb ad                	jmp    404fc7 <linx_request_tmo+0xa7>
  40501a:	90                   	nop
  40501b:	90                   	nop
  40501c:	90                   	nop
  40501d:	90                   	nop
  40501e:	90                   	nop
  40501f:	90                   	nop

0000000000405020 <__libc_csu_fini>:
  405020:	f3 c3                	repz retq 
  405022:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
  405029:	1f 84 00 00 00 00 00 

0000000000405030 <__libc_csu_init>:
  405030:	48 89 6c 24 d8       	mov    %rbp,-0x28(%rsp)
  405035:	4c 89 7c 24 f8       	mov    %r15,-0x8(%rsp)
  40503a:	48 8d 2d d3 1d 20 00 	lea    0x201dd3(%rip),%rbp        # 606e14 <__init_array_end>
  405041:	4c 8d 3d cc 1d 20 00 	lea    0x201dcc(%rip),%r15        # 606e14 <__init_array_end>
  405048:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
  40504d:	4c 89 6c 24 e8       	mov    %r13,-0x18(%rsp)
  405052:	4c 89 74 24 f0       	mov    %r14,-0x10(%rsp)
  405057:	48 89 5c 24 d0       	mov    %rbx,-0x30(%rsp)
  40505c:	48 83 ec 38          	sub    $0x38,%rsp
  405060:	4c 29 fd             	sub    %r15,%rbp
  405063:	41 89 fe             	mov    %edi,%r14d
  405066:	49 89 f5             	mov    %rsi,%r13
  405069:	48 c1 fd 03          	sar    $0x3,%rbp
  40506d:	49 89 d4             	mov    %rdx,%r12
  405070:	e8 0b ba ff ff       	callq  400a80 <_init>
  405075:	48 85 ed             	test   %rbp,%rbp
  405078:	74 1c                	je     405096 <__libc_csu_init+0x66>
  40507a:	31 db                	xor    %ebx,%ebx
  40507c:	0f 1f 40 00          	nopl   0x0(%rax)
  405080:	4c 89 e2             	mov    %r12,%rdx
  405083:	4c 89 ee             	mov    %r13,%rsi
  405086:	44 89 f7             	mov    %r14d,%edi
  405089:	41 ff 14 df          	callq  *(%r15,%rbx,8)
  40508d:	48 83 c3 01          	add    $0x1,%rbx
  405091:	48 39 eb             	cmp    %rbp,%rbx
  405094:	72 ea                	jb     405080 <__libc_csu_init+0x50>
  405096:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40509b:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  4050a0:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  4050a5:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
  4050aa:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  4050af:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  4050b4:	48 83 c4 38          	add    $0x38,%rsp
  4050b8:	c3                   	retq   
  4050b9:	90                   	nop
  4050ba:	90                   	nop
  4050bb:	90                   	nop
  4050bc:	90                   	nop
  4050bd:	90                   	nop
  4050be:	90                   	nop
  4050bf:	90                   	nop

00000000004050c0 <__do_global_ctors_aux>:
  4050c0:	55                   	push   %rbp
  4050c1:	48 89 e5             	mov    %rsp,%rbp
  4050c4:	53                   	push   %rbx
  4050c5:	48 83 ec 08          	sub    $0x8,%rsp
  4050c9:	48 8b 05 48 1d 20 00 	mov    0x201d48(%rip),%rax        # 606e18 <__CTOR_LIST__>
  4050d0:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4050d4:	74 19                	je     4050ef <__do_global_ctors_aux+0x2f>
  4050d6:	bb 18 6e 60 00       	mov    $0x606e18,%ebx
  4050db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4050e0:	48 83 eb 08          	sub    $0x8,%rbx
  4050e4:	ff d0                	callq  *%rax
  4050e6:	48 8b 03             	mov    (%rbx),%rax
  4050e9:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4050ed:	75 f1                	jne    4050e0 <__do_global_ctors_aux+0x20>
  4050ef:	48 83 c4 08          	add    $0x8,%rsp
  4050f3:	5b                   	pop    %rbx
  4050f4:	c9                   	leaveq 
  4050f5:	c3                   	retq   
  4050f6:	90                   	nop
  4050f7:	90                   	nop

Disassembly of section .fini:

00000000004050f8 <_fini>:
  4050f8:	48 83 ec 08          	sub    $0x8,%rsp
  4050fc:	e8 9f bb ff ff       	callq  400ca0 <__do_global_dtors_aux>
  405101:	48 83 c4 08          	add    $0x8,%rsp
  405105:	c3                   	retq   
