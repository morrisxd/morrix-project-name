/*****************************************************************************
 * (C) Copyright Wintegra 2000-2003.  All rights reserved.
 * WINTEGRA CONFIDENTIAL PROPRIETARY
 * Contains Confidential Proprietary information of Wintegra.
 * Reverse engineering is prohibited.
 * The copyright notice does not imply publication.
 *****************************************************************************
/****************************************************************************
*
* File: interworking.dpl
*
* Description: See Interworking Module description under Interworking_Start below.
*
*
* Module Originator:  Eran Kirzner
* Creation Date:  Jan  8, 2001
*
* Change History:
* +------------+--------------------+----------------------------------------
* | Date       | By                 | Description
* +------------+--------------------+----------------------------------------
* |            |                    |
* +------------+--------------------+----------------------------------------
* |            |                    |
* +------------+--------------------+----------------------------------------
* / CVS information /
*       $Id: interworking.dpl,v 1.324 2008/08/20 16:18:20 markve Exp $
*
*
****************************************************************************/
#pragma list raw;

/* Include Files */
#include "config.h"
#include "shared.h"
#include "order.h"
#include "iw_interface.h"
#include "irq.h" /* Must only be included in DPL files, not H files */
#include "scheduler.h"
#include "interworking.h"
#include "interworking_regs.h" /* Must only be included in DPL files, not H files */


#ifdef _MODULE_INTERWORKING_ENABLE_
#ifdef _MODULE_ETHERNET_OAM_ENABLE_
#include "iw_oam_macros.h"
#include "iw_gen_to_comp.h"
#endif /* _MODULE_ETHERNET_OAM_ENABLE_ */
#include "mpls.h"
#include "bssgp.h"
#include "iw_general_macros.h"
#include "iw_enqueuing.h"
#include "forwarding.h"
#include "iw_background_task.h"
#include "iw_routing_macros.h"
#include "iw_bridge_macros.h"
#include "iw_cong_byte_th.h"

#include "decompressor.h"

#ifdef _MODULE_INTERWORKING_MULTICAST_ENABLE_
#include "iw_multicast_struct.h"
#include "iw_multicast_macros.h"
#endif /* _MODULE_INTERWORKING_MULTICAST_ENABLE_ */

#ifdef _MODULE_CUSTOM_IMH_ENABLE_
#include "imh_iw.h"
#endif

/* Global Definitions */

/* Layer 2 interfaces */
global    L_Iw_Nested_Forwarding_System;
global    L_IWM_L2_Interface;
global    L_IWM_L2_ExtWordInTrsInterface;
global    L_IWM_HI_Fast_Bridge_Interface;
global    L_IWM_HI_Full_Bridge_Interface;
global    L_IWM_HI_Switch;

#ifdef _MODULE_AAL0_ENABLE_
global    L_IWM_L2_Aal0_Interface;
#endif  _MODULE_AAL0_ENABLE_
global    L_IWM_Recover_External_CW_Only;
global    L_IWM_BG_Dequeue_Interface;
global    L_IWM_L2_Interface_Cont;

/* Interworking internal module interfaces */
global    L_IWM_FIWT_Analyze;
global    L_IWM_FIWT_Analyze_After_FIWT_Read;
global    L_IWM_After_F_Forwarding;



section Interworking_Start
{


/******************************************************************************
 *
 * Module: Interworking_Start
 *
 * Description:
 *     The Interworking module receive 2 control words (internal & External).
 *     According to this words the IW-DPS selects which interworking process should be taken
 *      (Bridge, Switching or Routing).
 *     The Interworking function will strip the "OLD" L2 overhead from the received IP packet,
 *     process the packet (Protocol validation & Forwarding validation).
 *     After the Packet protocol verification has been finished (no L3 error).
 *     The IW module will select the Next hope table according the the IP-DA (LPM)
 *      and classifier (MFC) results.
 *     According to the next hop table the IW-DPS inserts the new L2 header and trailer,
 *     and enqueue the L2 frame in the correct transmit queue.
 *
 *
 * Input interfaces:
 *      External control word:
 *      The external parameters will be delivered by L2 in a "L2_3 External control word"
 *      which will be placed  above the payload octets (P3) in the external buffer.
 *
 *
 *      Internal control word:
 *      The internal parameters will be delivered by L2 in a "L2_3 Internal control word"
 *      which will be placed in the TRS start from address 0x 170 (r92).
 *
 *
 *
 * Output interfaces:
 *
 *  < for each exit point in this section, specify the machine state at the
 *    point of exit. Including registers, memory contents etc. >
 *
 *****************************************************************************/

// Interworking_Start

   /* Voletile Register */
   register                        WmmOperationSize = r11;
   register                        TempFrameLen     = r12;
   register struct S_TempReg       TempRxL2PrefixSize        = r19         ;// Temp Reg 2
   register struct S_Layer2Status0 L2Status0                 = STATUS0_REG ;// Interwoking type
   register struct S_TempReg       SwitchLayer3ProtocolType  = jir;  // jir = layer 3 protocol Type

   register struct S_TLLI   Tlli  = r11; 
   register struct S_IP_EP  IpEp= r12;
   register struct S_PARSE  ParseBits= r14; 
   register struct S_NSBGP  NSBGPData= r15;
   
   register struct S_TempReg  NSDataPointer= r17;
   register struct S_TempReg  BGPType= r18;
   register struct S_TagLen  TagLenth= r19;
    
   register struct S_TempReg  SrcPort= r17;
   register struct S_TempReg  IpEpOffset= r18;
   register  struct S_TempReg  InterworkingFlowNumber0 = r19;
   register  struct S_TempReg  IpEpNum = r20;

   register struct S_TempReg   ExtensionTableOffset   = r17;
   register struct S_TempReg   PrefixData   = r18;
   
   register struct S_TempReg   hashResult   = r17;   
   register  struct S_TempReg  HashDataPtr     = r18;
   
   register  struct S_TempReg  hashbase     = r19;
   register struct S_TempReg   hashMask= r20;

   register struct DL_RT   DLRouteTable= r15;
   register struct S_TempReg   VpNum= r20;
   register struct S_TempReg   NextVp= r21;
   register struct S_TempReg   UpdateSrcPort= r21;
   
   /***********************************************/
   /* switch AAL0 interface                       */
   /***********************************************/
   /* first + last interface                      */
   /* The data is located at 16 byte offset       */
   /* The the data is written to external         */
   /* memory but no need to read it.              */
   /* The external control word is not written    */
   /* to external memory therefore if BG mode is  */
   /* enable should be written to external mem    */
   /***********************************************/
#ifdef _MODULE_AAL0_ENABLE_
  L_IWM_L2_Aal0_Interface:
   /* Currently this interface work with interworking - switching mode */

#ifdef _MODULE_IW_BG_ENABLE_
   //if IWBG task mode is set then enqueue the packet and save external control word
   if(L2Status0.IWTUserInfo.IWBGM)
   {
    register struct  S_IWBGPacketHandlerBlock IWBGPacketHandlerBlock  = r76  ;
    M_IWBackgroundTaskEnqueue(L2Status0, status1, mode0,
                              L2L3InternalWord,IWBGPacketHandlerBlock, IwMasterKey3Tag ,IwMasterKey3,
                              WRITE_EXT_CNTRL_WORD,IWBG_ENQUEUE_RETURN_DISABLE,mode1,
                              _ORDER_UNLOCK );
   }

#endif /* _MODULE_IW_BG_ENABLE_ */

   ExtDataPointer = L2L3InternalWord.L3DataPtr;

   goto L_IWM_L2_Interface_Cont;

#endif /* _MODULE_AAL0_ENABLE_*/
  L_IWM_Recover_External_CW_Only:
   /* can get heare only from ces/ufe */
    ExtDataPointer = L2L3InternalWord.L3DataPtr - EXTENDED_EXT_CONTROL_WORD_SIZE;

    WmmOperationSize = EXTENDED_EXT_CONTROL_WORD_SIZE;

    *(&$reg(L2L3ExternalWordExt,EXTENTION_CONTROL_WORD_RES_SIZE )) =
       _data_mem(r0, ExtDataPointer, WmmOperationSize);

    ExtDataPointer += EXTENDED_EXT_CONTROL_WORD_SIZE;
    {

#pragma reserve r11;
    // Copy FRG from Internal to External CW.
       L2L3ExternalWord.U_MultiModeField.PweMode.FRG  =  L2L3InternalWord.U_Protocol.CESoPSNField.FRG;
       L2L3InternalWord.U_Protocol.CESoPSNField = 0;
    }

    goto  L_IWM_L2_Interface_Cont;

   /*******************************************/
   /* HSPI interface                          */
   /*******************************************/
   /* The External conrtol word is in the TRS */
   /* Might be also Extension                 */
   /*******************************************/

  L_IWM_L2_ExtWordInTrsInterface:
    #pragma _nosync;
#ifdef _MODULE_IW_BG_ENABLE_

   //if IWBG task mode is set then enqueue the packet


// *********************************
// in HSPI mode, this part is already after dequeue, no need to re-enqueue


   if(L2Status0.IWTUserInfo.IWBGM)
   {

         register struct S_IWBGPacketHandlerBlock  IWBGPacketHandlerBlock = r76  ;

         M_IWBackgroundTaskEnqueue(L2Status0, status1, mode0,
                                   L2L3InternalWord, IWBGPacketHandlerBlock,IwMasterKey3Tag ,IwMasterKey3,
                                   WRITE_EXT_CNTRL_WORD,IWBG_ENQUEUE_RETURN_DISABLE,mode1,
                                   _ORDER_UNLOCK);
   } // if(L2Status0.IWTUserInfo.IWBGM)

#endif //_MODULE_IW_BG_ENABLE_


   // In case of GIGA read the first 64 byte to the IP header location in the TRS (r96)
   // Extract the prefix Size from the External control word


   /* if frame is shorter than 64 bytes, read only actuall frame length */

   TempFrameLen = L2L3InternalWord.FrameLength;
   if (TempFrameLen <=64)
     WmmOperationSize = TempFrameLen;
   else
     WmmOperationSize = 64;

   ExtDataPointer = L2L3InternalWord.L3DataPtr;
   *(&Ipv4HeaderPtr) = _data_mem(r0,ExtDataPointer,WmmOperationSize);

   goto  L_IWM_L2_Interface_Cont;


   /*******************************************/
   /* Common L2  interface                    */
   /*******************************************/
   /* Need to Read the External conrol word   */
   /* the first 64 byte of the packet         */
   /* Might be also Extension but it is not   */
   /* be brought to the TRS here.             */
   /*******************************************/

  L_IWM_L2_Interface:

   // Process the Internal and External L2 control words
   // note that mode register comtain the IWB

#ifdef _MODULE_IW_BG_ENABLE_
   //if IWBG task mode is set then enqueue the packet
   if(L2Status0.IWTUserInfo.IWBGM)
   {
      register struct S_IWBGPacketHandlerBlock  IWBGPacketHandlerBlock = r76  ;

      M_IWBackgroundTaskEnqueue(L2Status0, status1, mode0, L2L3InternalWord,IWBGPacketHandlerBlock,
                                IwMasterKey3Tag ,IwMasterKey3,
                                BG_DEFAULT_L2,IWBG_ENQUEUE_RETURN_DISABLE,mode1,
                                _ORDER_UNLOCK);
   } // if(L2Status0.IWTUserInfo.IWBGM)

#endif //_MODULE_IW_BG_ENABLE_


  L_IWM_BG_Dequeue_Interface:


    /* Task Switch - Read the external control word from the external memory
     (Data_Ptr -16)+ first 64 byte of the packet */
   ExtDataPointer = L2L3InternalWord.L3DataPtr - EXTENDED_EXT_CONTROL_WORD_SIZE;
   TempFrameLen = L2L3InternalWord.FrameLength;
   if (TempFrameLen <=64)
     WmmOperationSize = TempFrameLen+EXTENDED_EXT_CONTROL_WORD_SIZE;
   else
     WmmOperationSize = 64+EXTENDED_EXT_CONTROL_WORD_SIZE;

   *(&$reg(L2L3ExternalWordExt,EXTENTION_CONTROL_WORD_RES_SIZE )) =
      _data_mem(r0, ExtDataPointer, WmmOperationSize);

   ExtDataPointer += EXTENDED_EXT_CONTROL_WORD_SIZE;


  L_IWM_L2_Interface_Cont:
    /********************************************************************************
    *  Note : Host interface does not preforme these line
    *         Host Interface jump directly into Router/Bridge/Switch
    *
    *  Any code inserted into these lines up ti HI interface should be inserted into
    *  iw_host_interface.dpl
    *********************************************************************************/

   // clear status bits that are used by the interworking modules
   status0 &= ~IW_INTERWORKING_STATUS0_MASK;

#if defined (_MODULE_ETHERNET_OAM_ENABLE_) && defined (_MODULE_IW_ETHERNET_OAM_PM_ENABLE_)
   /* DMM message - Set indication in the External control word for updating the time stamp at the transmitter*/
   if (L2L3InternalWord.EthOamPacket)
   {
#pragma outofline;                              \

      status0.U_EthOam_or_ExtResult.EthOamGenerated = 1;
      /* Update LM counter */
      if (L2L3ExternalWordExt.BridgeExt.U_EthOam_or_ChannelNumber.EthernetOamInfo.UpdateLmCounter)
      {
         register TempTxFClCounter = r11;
         register ExtDataPointerLmParamsOffset = r12;

         TempTxFClCounter = _mem(r0,
                                 L2L3InternalWord.U_BuffMode.EthernetOamLmTxFClPointer,
                                 4,
                                 STATISTICS_2_BUS);

         ExtDataPointerLmParamsOffset =
            ExtDataPointer + L2L3ExternalWordExt.BridgeExt.U_EthOam_or_ChannelNumber.EthernetOamInfo.CfmRemrkingOffset;

         _data_mem(r0,
                   ExtDataPointerLmParamsOffset,
                   4) = TempTxFClCounter;
      }
   }

#endif //defined (_MODULE_ETHERNET_OAM_ENABLE_) && defined (_MODULE_IW_ETHERNET_OAM_PM_ENABLE_)


   if (FEATURE_MATRIX_BUFF_CHAIN && L2L3InternalWord.BuffChainPacket)
   {
      /* If the packet is spread across buffer chain */

      status0.BuffChainPacket = 1;

      /* Matrix BD info holds diff pointer to 2nd BD in chain
       * and the size of the first BD in chain (might conflict with multicast). */
      MatrixBuffChainInfo = L2L3InternalWord.U_BuffMode.MatrixBuffChainInfo;

      /* Store the original buffer pointer for later comparison */
      OriginalRxExtDataPointer = ExtDataPointer;
   }

   // load mode1 with the Interworking type
   mode1 = _bf(L2L3ExternalWord,0,16)<<16;

   //Internal Data pointer (Dynamic pointer - start r96)
   FirstParsingBlockPtr = &FirstParsingBlock;


   // Load the jir with the layer 3 protocol Type
   SwitchLayer3ProtocolType = L2L3ExternalWord.U_MultiModeField.Layer3ProtocolType;


   // Extract the prefix Size from the External control word
   TempRxL2PrefixSize = L2L3ExternalWord.RxL2PrefixSize;
   // subtract the previous layer 2 prefix size (e.g LLC/SNAP) from the frame length
   L2FrameLength = L2L3InternalWord.FrameLength;
   // subtract the l2 header (only if it was removed in layer 2)
   L2FrameLength -= TempRxL2PrefixSize;

   // load the protocol specific from the L2 internal control word
   RxL2ProtocolSpecific = L2L3InternalWord.U_Protocol.L2ProtocolSpecific;

   HostTerminationInfo = 0;
   /* Clear the Host Termination Code (copied to host BD in case
      L2TxProtocolType == Host Termination) */
   HostTermCodeAndCongestion = 0;

   // Mask the 12 bits table number (or diffserv translate table)
   // Extract the interworking system Id (from the first entry in the external control word)
   IwSystemId = L2L3ExternalWord.U_SystemId.ParsingConfig.U_ParsingType.UserParsingTable;

#ifdef _MODULE_IW_PROPAGATED_PARAMS_ENABLE_
   /* IwFiwtParamsSaveInd bit must be cleared before entering the first IWS. */
   L2L3ExternalWordExt.BridgeExt.U_TempSavedData.ExtFieldsData.IwFiwtParamsSaveInd = 0;
#endif

   // Set the priority offset to 0
   OutputPriorityInfo = NO_OFFSET;

   /*******************************************/
   /* Nested forwarding interface             */
   /*******************************************/
   /* Reload all interworking interface parm  */
   /* from the FIWT control word (QATptr)     */
   /* in case of nested IW system the first   */
   /* FIWT word holds the system Id and       */
   /* parsing param                           */
   /*******************************************/
  L_Iw_Nested_Forwarding_System:
#pragma _nosync;

   if (mode1.InterworkingType.RoutingMode)
   {// The selected Interworking mode is routing
#ifdef _MODULE_INTERWORKING_ROUTING_ENABLE_
      B_IwRoutingPacketProcessing (mode0,
                                   mode1,
                                   status0,
                                   status1,
                                   L2FrameLength,
                                   IwMasterKey3,
                                   SwitchLayer3ProtocolType,
                                   IwSystemId,
                                   SysRouterInfo,
                                   L2L3ExternalWord,
                                   L2L3ExternalWordExt,
                                   InterworkingFlowNumber,
                                   OutputPriorityInfo,
                                   PceResult);
#else // _MODULE_INTERWORKING_ROUTING_ENABLE_
      goto Layer3_Deny_Packet;
#endif // _MODULE_INTERWORKING_ROUTING_ENABLE_

   }


   else if (mode1.InterworkingType.BridgeMode)
   {
#pragma _nosync;
     L_IWM_HI_Full_Bridge_Interface:

#ifdef _MODULE_INTERWORKING_BRIDGING_ENABLE_
#ifdef _MODULE_ETHERNET_OAM_ENABLE_
      EthernetOamLmInfo = 0;
#endif //_MODULE_ETHERNET_OAM_ENABLE_
      B_IwBridgeFrameProcessing(mode0,
                                mode1,
                                status0,
                                status1,
                                L2FrameLength,
                                IwMasterKey3,
                                IwSystemId,
                                EthernetHeader,
                                BridgeFrameVlanId,
                                InnerVlanTag,
                                BridgeLearningTable,
                                BridgeLearningEntry,
                                SysBridgeInfo,
                                L2L3ExternalWord,
                                L2L3ExternalWordExt,
                                UserParsingTable,
                                Ipv4HeaderPtr,
                                InterworkingFlowNumber,
                                OutputPriorityInfo,
                                PceResult);

#pragma _nosync;
     L_IWM_HI_Fast_Bridge_Interface:

#if defined (_MODULE_ETHERNET_OAM_ENABLE_) && defined (_MODULE_IW_ETHERNET_OAM_PM_ENABLE_)

      /* Update statistics for Ethernet OAM LM */
      M_BridgeEthernetOamUpdateCounters(EthernetOamLmInfo,MAC_IN_MAC_ENCAPSULATION_DISABLE);

#endif

      // increment the Rx valid packets statistics (per bridge port).
     M_UpdateIwPortStatistics(MC_BC_INDICATION_CHECK,
                        M_BitToByte(U_IwPortStatistics.Bridge.RxUcValidPacktes),
                               STATISTICS_SIZE_WORD,
                               L2L3ExternalWordExt.BridgeExt.InputPort,
                               mode1.InterworkingType.IwPortSte,
                               status0);

      goto L_IWM_FIWT_Analyze;
#else
      const L_Iw_Nested_Bridge_Sys_Fast_Mode =0;
      const L_IWM_HI_Fast_Bridge_Interface =0;
      const L_IWM_HI_Full_Bridge_Interface =0;
      goto Layer3_Deny_Packet;
#endif /* _MODULE_INTERWORKING_BRIDGING_ENABLE_ */

   }
   else if (mode1.InterworkingType.SwitchingMode)
   {// The selected Interworking mode is Switching
      // Currently there is no special support for vlan priority in layer 2 switching

     L_IWM_HI_Switch:
      //Valid packet increment the valid packet counter
      // raise statistics if either cut through is disabled ot
      // this is the last packet

      // Extract the match Interworking Flow Number.
      InterworkingFlowNumber = L2L3ExternalWord.L2FlowNum;

      // Analyse the IWFT (Table type, Header strip/add etc.).
      goto L_IWM_FIWT_Analyze;

   }
   else
   {
      // Invalid state :not routingmode, not bridgmode and not switchmode
      // In case of error configuration or unsupported protocol
      // only serial denied packet statistics are incremented
      goto Layer3_Deny_Packet;
   }

  L_IWM_FIWT_Analyze:

   // Fetch the match Interworking Flow Number (InterworkingFlowNumber)
   // Analyze the IWFT (Table type, Header strip/add etc.).

   // Table offset = FIWT number * 64
   FlowNumberOffset = InterworkingFlowNumber * sizeof(S_FIWT);
   // Fetch the match Interworking Flow Table.
   *(&FIWT)=_mem(r0,B_FIWT[FlowNumberOffset],sizeof(S_FIWT),  FIWT_BUS);
   
    //SwitchForwardingOption = $reg(FIWT.ForwardingOption) >> FORWARDING_OPTION_OFFSET;
   /*Frame relay MTU is 2500, it can be use for to determine the receive channel*/
    ParseBits = 0;
    if((mode1.InterworkingType.SwitchingMode) && (L2L3InternalWord.RxL2ProtocolType == L2_RX_PROTOCOL_TYPE_FR))
    {

      NSDataPointer = ExtDataPointer+2;

    #if 0
         {
            register PatchOffset = r10;
            PatchOffset =0x10;
            _mem(r0,B_DEBUG1[PatchOffset],4,DEBUG_BUS) =*(&InterworkingFlowNumber);
         }
    #endif  

      TagLenth = 0;/*TAG = 0 for FR priority ,TAG =1 FOR IP priority*/
      M_BSSGP_Parse(
	  	       FlowNumberOffset,
	  	       NSDataPointer,
               NSBGPData,
               ParseBits,
               BGPType,
               Tlli,
               TagLenth);
    
         /*For some reason, B_CustomerSpecificA doesn't work, so we just borrow B_FIWT for temporary solution */
      M_BSSGP_LookUp( FlowNumberOffset,
              SrcPort,
              IpEpOffset,
              Tlli,
              ParseBits,
              InterworkingFlowNumber,
              InterworkingFlowNumber0,
              IpEpNum,
              IpEp);
         UpdateSrcPort = WP_IPEP_PORT_BASE + SrcPort;
      M_BSSGP_UpdateFIWT(InterworkingFlowNumber,
            FlowNumberOffset,
            ExtensionTableOffset,
            FIWT,
            PrefixData,
            IpEp,
            UpdateSrcPort);

      HashDataPtr =0;/*first 4byte save the hash base */
      *(&hashbase)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);
	  HashDataPtr = 4;/*later 4byte save the hash mask*/
      *(&hashMask)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);	  
      
      FlowNumberOffset = ParseBits;
      F_HashLookup(status0,
             InterworkingFlowNumber,
             NSBGPData.NSBvci,
             hashMask,
             hashbase,
             hashResult,
             FR_HASH_LOOKUP); 
      
      if(hashResult == 0xffff)
      {
         goto L_IWM_FIWT_Analyze_After_FIWT_Read;
      }
	  hashbase&=0xffff;/*hash result*/
      
      ParseBits =  FlowNumberOffset;
      
     
	  /*indicate that this packet will go to fastpath*/
	  ParseBits.BitsMap.NsBytes = 1; /*just using NsBytes to distinguish if it is a fast path flow*/
      HashDataPtr =  ExtDataPointer + 4;
      M_BSSGP_UpdateBvci(HashDataPtr, ParseBits,  hashbase);
      
    }
     //SO BAD, we must use MFC to filter packet. howerver all the packet will arrive here, how to deal with it?
    else if((mode1.InterworkingType.BridgeMode) && (FIWT.U_MTU_or_SysToSys2.MTU == CUSTOMER_ENET_TO_FRAME_RELAY_FIWT))
    {
      //recover FIWT mtu, so that the packet can be forward correctly, I guess the value assignment will not change the value int FIWT table
      FIWT.U_MTU_or_SysToSys2.MTU = 0x600;

       if(EthernetHeader.EtherTypeLength == VLAN_TYPE)
          NSDataPointer  = ExtDataPointer+46;
      else
          NSDataPointer  = ExtDataPointer+42;
	  
	  TagLenth = 1;/*TAG = 0 for FR priority ,TAG =1 FOR IP priority*/
      M_BSSGP_Parse(
	  	    FlowNumberOffset,
	  	    NSDataPointer,
            NSBGPData,
            ParseBits,
            BGPType,
            Tlli,
            TagLenth);
      
      FlowNumberOffset = ParseBits;
                     #if 0
         {
            register PatchOffset = r10;
            PatchOffset =0x10;
            _mem(r0,B_DEBUG1[PatchOffset],4,DEBUG_BUS) =*(&FlowNumberOffset);
         }
#endif  

      
      HashDataPtr =0;
      *(&hashbase)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);
      HashDataPtr = 4;
      *(&hashMask)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);	 
      //F_HashLookup is a standard function, so some volatile register should be saved
      F_HashLookup(status0,
          InterworkingFlowNumber,
          NSBGPData.NSBvci,
          hashMask,
          hashbase,
          hashResult,
          FR_HASH_LOOKUP);
      
      if(hashResult == 0xffff)
      {
         goto L_IWM_FIWT_Analyze_After_FIWT_Read;
      }
      hashbase&=0xffff;/*hash result*/
      ParseBits =  FlowNumberOffset;
      
      
      M_BSSGP_DLLookUp(ParseBits,
            hashbase,
            FlowNumberOffset,
            DLRouteTable,
            InterworkingFlowNumber);

      M_BSSGP_CalcFIWT(ParseBits,
            DLRouteTable.U_Nsei_or_SrcPort.Nsei,
            VpNum,
            NextVp,
            FlowNumberOffset,
            InterworkingFlowNumber,
            FIWT);
	   /*indicate that this packet will go to fastpath*/
	   ParseBits.BitsMap.NsBytes = 1; /*just using NsBytes to distinguish if it is a fast path flow*/
       if(EthernetHeader.EtherTypeLength == VLAN_TYPE)
          HashDataPtr  = ExtDataPointer+48;
      else
          HashDataPtr  = ExtDataPointer+44;
      M_BSSGP_UpdateBvci(HashDataPtr, ParseBits, $reg(DLRouteTable.Bvci));
      
    }
    else if((mode1.InterworkingType.BridgeMode) && (FIWT.U_MTU_or_SysToSys2.MTU == CUSTOMER_ENET_TO_ENET_FIWT))
    {
      //recover FIWT mtu, so that the packet can be forward correctly, I guess the value assignment will not change the value int FIWT table
      FIWT.U_MTU_or_SysToSys2.MTU = 0x600;
            
       if(EthernetHeader.EtherTypeLength == VLAN_TYPE)
          NSDataPointer  = ExtDataPointer+46;
      else
          NSDataPointer  = ExtDataPointer+42;
	  
	  TagLenth = 1;/*TAG = 0 for FR priority ,TAG =1 FOR IP priority*/
      M_BSSGP_Parse(
	  	    FlowNumberOffset,
	  	    NSDataPointer,
            NSBGPData,
            ParseBits,
            BGPType,
            Tlli,
            TagLenth);


      if(ParseBits.UpFlow == PARSE_BSSGP_UP_FLOW_BIT)//up flow 
      {
            /*For some reason, B_CustomerSpecificA doesn't work, so we just borrow B_FIWT for temporary solution */
         M_BSSGP_LookUp( FlowNumberOffset,
                 SrcPort,
                 IpEpOffset,
                 Tlli,
                 ParseBits,
                 InterworkingFlowNumber,
                 InterworkingFlowNumber0,
                 IpEpNum,
                 IpEp);
  
         UpdateSrcPort = WP_IPEP_PORT_BASE + SrcPort;
         M_BSSGP_UpdateFIWT(InterworkingFlowNumber,
               FlowNumberOffset,
               ExtensionTableOffset,
               FIWT,
               PrefixData,
               IpEp,
               UpdateSrcPort);
         
      //FlowNumberOffset = ParseBits;
         HashDataPtr =0;/*first 4byte save the hash base */
         *(&hashbase)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);
   	  HashDataPtr = 4;/*later 4byte save the hash mask*/
         *(&hashMask)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);	  
         
         FlowNumberOffset = ParseBits;
         
         F_HashLookup(status0,
                InterworkingFlowNumber,
                NSBGPData.NSBvci,
                hashMask,
                hashbase,
                hashResult,
                FR_HASH_LOOKUP); 
         
         if(hashResult == 0xffff)
         {
            goto L_IWM_FIWT_Analyze_After_FIWT_Read;
         }
         hashbase&=0xffff;/*hash result*/
         ParseBits =  FlowNumberOffset;
		 /*indicate that this packet will go to fastpath*/
		 ParseBits.BitsMap.NsBytes = 1; /*just using NsBytes to distinguish if it is a fast path flow*/
       if(EthernetHeader.EtherTypeLength == VLAN_TYPE)
          HashDataPtr  = ExtDataPointer+48;
      else
          HashDataPtr  = ExtDataPointer+44;
         //HashDataPtr =  ExtDataPointer + 48;
         M_BSSGP_UpdateBvci(HashDataPtr, ParseBits,  hashbase);
      }
      else //if(ParseBits.UpFlow == PARSE_BSSGP_UP_FLOW_BIT)
      {

         FlowNumberOffset = ParseBits;

         HashDataPtr =0;
         *(&hashbase)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);
         HashDataPtr = 4;
         *(&hashMask)=_mem(r0,B_CustomerSpecificB[HashDataPtr],4,  HASH_BUS);	 
         //F_HashLookup is a standard function, so some volatile register should be saved
         F_HashLookup(status0,
             InterworkingFlowNumber,
             NSBGPData.NSBvci,
             hashMask,
             hashbase,
             hashResult,
             FR_HASH_LOOKUP);
         
         if(hashResult == 0xffff)
         {
            goto L_IWM_FIWT_Analyze_After_FIWT_Read;
         }
         hashbase&=0xffff;/*hash result*/
         ParseBits =  FlowNumberOffset;

         M_BSSGP_DLLookUp(ParseBits,
               hashbase,
               FlowNumberOffset,
               DLRouteTable,
               InterworkingFlowNumber);

         M_BSSGP_CalcIPEP(FlowNumberOffset,
            DLRouteTable.U_Nsei_or_SrcPort.SrcPort,
            IpEpOffset,
            ParseBits.U_Offset_Byte0.Byte0,
            IpEpNum,
            IpEp);
          UpdateSrcPort =WP_IPEP_PORT_BASE+DLRouteTable.U_Nsei_or_SrcPort.SrcPort;
         M_BSSGP_UpdateFIWT(InterworkingFlowNumber,
               FlowNumberOffset,
               ExtensionTableOffset,
               FIWT,
               PrefixData,
               IpEp,
               UpdateSrcPort);
		 /*indicate that this packet will go to fastpath*/
		 ParseBits.BitsMap.NsBytes = 1; /*just using NsBytes to distinguish if it is a fast path flow*/
         //HashDataPtr =  ExtDataPointer + 48;
         if(EthernetHeader.EtherTypeLength == VLAN_TYPE)
            HashDataPtr  = ExtDataPointer+48;
        else
            HashDataPtr  = ExtDataPointer+44;
            
         M_BSSGP_UpdateBvci(HashDataPtr, ParseBits, $reg(DLRouteTable.Bvci));

      }
      
    }
    
  L_IWM_FIWT_Analyze_After_FIWT_Read:
   if(ParseBits.BitsMap.NsBytes == 1)
   {
      register struct S_TempReg     P_STATISTICS_OFFSET = r20;
      P_STATISTICS_OFFSET = 48;
      M_UpdateFlowStatistics(P_STATISTICS_OFFSET,
            ParseBits,
            InterworkingFlowNumber,
            L2FrameLength);
  }

   // Initialize the Gtp to Pdcp Interface
   IwGtpPdcpInterface = 0;

#pragma funcattr retaddr = FunctionReturnAddress0;

   F_Forwarding(FirstParsingBlockPtr,
                SwFiwtPrefixInseartionPtr,
                FIWT,
                Ipv4HeaderPtr,
                InterworkingFlowNumber,
                OutputPriorityInfo,
                L2FrameLength,
                IwFrameLength,
                ExtDataPointer,
                L2L3ExternalWord,
                L2L3ExternalWordExt,
                mode0,
                mode1,
                status0,
                status1,
                QueueAssignmetPtr,
                TxL2ProtocolType,
                HostTerminationInfo,
                CongestionProfileEntry,
                IwMasterKey3,
                FunctionReturnAddress0,
                RxL2ProtocolSpecific);

  L_IWM_After_F_Forwarding:
   // Check Free Pool state - congestion control - Drop
   // Fetch the match Interworking Flow Number.
   // Header striping and inserting and packet validation (TTL,MTU,etc.)
   // Return value is a pointer to the appropriate QAT (QueueAssignmetPtr) and the TxL2ProtocolType


#ifdef _MODULE_CUSTOM_IMH_ENABLE_
   if (TxL2ProtocolType == L2_TX_PROTOCOL_TYPE_IMH)
   {
      F_ImhIwTx(IwMasterKey3,
                QueueAssignmetPtr,
                L2FrameLength,
                ExtDataPointer,
                L2L3ExternalWord);
   }
#endif

#ifdef _MODULE_IW_CONG_BYTE_TH_ENABLE_
   if (status0.IWTUserInfo.ECNG)
   {
      // enhanced congestion mode
      //this macro checks the Enhaced flow congestion thresholds.
      // Frames that exceede appropriate thresholds may may be droped or
      // tagged with EFCI(ATM or FECN in FR).
      // The IW flow number is updated in layer 2 protocol specific field
      B_FlowCongestionHandling(status0,
                               RxL2ProtocolSpecific,
                               mode1,
                               FIWT,
                               InterworkingFlowNumber,
                               QueueAssignmetPtr,
                               L2L3ExternalWord,
                               IwMasterKey3,
                               L2FrameLength,
                               IwFrameLength);
   }
#endif

   // Packet Enqueuing the- fetch the queue assignment table (QAT)
   B_PacketEnqueuing(mode0,
                     mode1,
                     status0,
                     QueueAssignmetPtr,
                     OutputPriorityInfo,
                     CongestionProfileEntry,
                     HostTermCodeAndCongestion,
                     InterworkingFlowNumber,
                     L2L3ExternalWord,
                     RxL2ProtocolSpecific,
                     HostTerminationInfo,
                     FIWT,
                     IwMasterKey3,
                     L2FrameLength,
                     IwFrameLength,
                     BFDChangesBitsetReg);
   // WRED - Weighted Random Early Discard or Tail drop
   // free buffer pool congestion mechanism
   // Upodate the enqueuing parameters - WRED counters & window.
   // Inserting packet into the match output queue (layer 2 buffer ring)
   // Open the Transmit buffer descriptor (BD).
   // Update the layer 2 BD parameters (UUI,Length, status) according to the Tx layer 2 Type.
   // Insert the Data,status and fifo pointers to the transmit BD.
   // Note that in case of error the enqueuing function will release all keys
   // and terminate the interworking task.

   // Terminate the interworking task
   _task_switch(r0, _TERMINATE);


#ifdef _MODULE_INTERWORKING_MULTICAST_ENABLE_
/**********************************************************************************************/
/*             B_IwMulticastServices                                                          */
/**********************************************************************************************/
/* This part of the code is reached in case of Multicast.                                     */
/* In multicast mode the label L_Multicast_Member_Services is  inserted in the                */
/* function return address of F_Forwarding, so the regular IW enqueuing is skipped.           */
/* multicast processing proceeds from this point and terminates inside B_IwMulticastServices  */
/* F_Forwarding is called again inside B_IwMulticastServices, for multicast members forwarding*/
/* Some macros from iw_enqueuing are used for multicast members enqueuing                     */
/**********************************************************************************************/
   global L_Iw_Multicast_Member_Services;
  L_Iw_Multicast_Member_Services:
   B_IwMulticastServices(IwMcGroupMemberEntry,
                         IwMcCosManagementData,
                         IwMcCommonInfo,
                         FirstParsingBlockPtr,
                         SwFiwtPrefixInseartionPtr,
                         OutputPriorityInfo,
                         L2FrameLength,
                         IwFrameLength,
                         IwMcOrigRxExtDataPointer,
                         L2L3ExternalWord,
                         L2L3ExternalWordExt,
                         QueueAssignmetPtr,
                         HostTerminationInfo,
                         IwMasterKey3,
                         FunctionReturnAddress0,
                         RxL2ProtocolSpecific);

#endif // _MODULE_INTERWORKING_MULTICAST_ENABLE_


  Layer3_Protocol_Default:
   // In case that L3 protocol not supported



/****************************************************************************************
 * The follwaing protocols currently are not supported by the Interwoking layer.
 * Any received packet (with these Layer 3 protocol type should be deliver to the host).
 ***************************************************************************************/



   global  Layer3_MPLS_Multicast_Start;
  Layer3_MPLS_Multicast_Start:

   global   Layer3_VLAN_Start;
  Layer3_VLAN_Start:


/*******************************************************
 * all non supported protocol terminat in this point.  *
 *******************************************************/
   global Layer3_Deny_Packet;
   global L_WRED_V2_profile_drop;
  Layer3_Deny_Packet:
  L_WRED_V2_profile_drop:
   /* Drop the packet in case of WRED profile of type V2, error configuration:
      Return the buffer to the free buffer pool, increment denied packets statistics, Terminate. */

   // Drop the packet in case of Classifier deny, Mpls lookup deny or error configuration:
   // (trying to use a module not in package, No mode set (switch, bridge, router) ...)
   // Return the buffer to the free buffer pool, increment denied packets statistics, Terminate.
   F_IwIngressDropPacket(M_BitToByte(S_GlobalStatistics.DeniedPackets),
                         DROP_WITH_STATISTCS,L2L3ExternalWord
                         ,L2L3ExternalWordExt,IwMasterKey3,status0,status1);

}// Interworking_Start End

#endif  /* end of packege spliting tag _MODULE_INTERWORKING_ENABLE_ */


/*****************************************************************************
 * (C) Copyright Wintegra 2000 - 2003, All rights reserved.
 *****************************************************************************/
